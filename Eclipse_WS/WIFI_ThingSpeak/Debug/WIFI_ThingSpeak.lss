
WIFI_ThingSpeak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c2  00800060  00005716  000057aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800322  00800322  00005a6c  2**0
                  ALLOC
  3 .stab         00005328  00000000  00000000  00005a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003542  00000000  00000000  0000ad94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b0  00000000  00000000  0000e456  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f23  00000000  00000000  0000e606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010b1  00000000  00000000  00010529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f43  00000000  00000000  000115da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00012520  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e2  00000000  00000000  000126c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f0  00000000  00000000  000129a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 24 	call	0x480a	; 0x480a <main>
      8a:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ucmpdi2>:
     190:	a0 e1       	ldi	r26, 0x10	; 16
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 86 28 	jmp	0x510c	; 0x510c <__prologue_saves__+0xc>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	ba 2f       	mov	r27, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	ba 95       	dec	r27
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__ucmpdi2+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__ucmpdi2+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	2d 81       	ldd	r18, Y+5	; 0x05
     1de:	3e 81       	ldd	r19, Y+6	; 0x06
     1e0:	4f 81       	ldd	r20, Y+7	; 0x07
     1e2:	58 85       	ldd	r21, Y+8	; 0x08
     1e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e8:	af 85       	ldd	r26, Y+15	; 0x0f
     1ea:	b8 89       	ldd	r27, Y+16	; 0x10
     1ec:	28 17       	cp	r18, r24
     1ee:	39 07       	cpc	r19, r25
     1f0:	4a 07       	cpc	r20, r26
     1f2:	5b 07       	cpc	r21, r27
     1f4:	c8 f0       	brcs	.+50     	; 0x228 <__ucmpdi2+0x98>
     1f6:	82 17       	cp	r24, r18
     1f8:	93 07       	cpc	r25, r19
     1fa:	a4 07       	cpc	r26, r20
     1fc:	b5 07       	cpc	r27, r21
     1fe:	b0 f0       	brcs	.+44     	; 0x22c <__ucmpdi2+0x9c>
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	3a 81       	ldd	r19, Y+2	; 0x02
     204:	4b 81       	ldd	r20, Y+3	; 0x03
     206:	5c 81       	ldd	r21, Y+4	; 0x04
     208:	89 85       	ldd	r24, Y+9	; 0x09
     20a:	9a 85       	ldd	r25, Y+10	; 0x0a
     20c:	ab 85       	ldd	r26, Y+11	; 0x0b
     20e:	bc 85       	ldd	r27, Y+12	; 0x0c
     210:	28 17       	cp	r18, r24
     212:	39 07       	cpc	r19, r25
     214:	4a 07       	cpc	r20, r26
     216:	5b 07       	cpc	r21, r27
     218:	38 f0       	brcs	.+14     	; 0x228 <__ucmpdi2+0x98>
     21a:	82 17       	cp	r24, r18
     21c:	93 07       	cpc	r25, r19
     21e:	a4 07       	cpc	r26, r20
     220:	b5 07       	cpc	r27, r21
     222:	20 f0       	brcs	.+8      	; 0x22c <__ucmpdi2+0x9c>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	03 c0       	rjmp	.+6      	; 0x22e <__ucmpdi2+0x9e>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <__ucmpdi2+0x9e>
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	60 96       	adiw	r28, 0x10	; 16
     230:	ec e0       	ldi	r30, 0x0C	; 12
     232:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <__epilogue_restores__+0xc>

00000236 <__fixunssfsi>:
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	7b 01       	movw	r14, r22
     240:	8c 01       	movw	r16, r24
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	5f e4       	ldi	r21, 0x4F	; 79
     24a:	0e 94 1b 04 	call	0x836	; 0x836 <__gesf2>
     24e:	88 23       	and	r24, r24
     250:	8c f0       	brlt	.+34     	; 0x274 <__fixunssfsi+0x3e>
     252:	c8 01       	movw	r24, r16
     254:	b7 01       	movw	r22, r14
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	5f e4       	ldi	r21, 0x4F	; 79
     25e:	0e 94 93 02 	call	0x526	; 0x526 <__subsf3>
     262:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixsfsi>
     266:	9b 01       	movw	r18, r22
     268:	ac 01       	movw	r20, r24
     26a:	20 50       	subi	r18, 0x00	; 0
     26c:	30 40       	sbci	r19, 0x00	; 0
     26e:	40 40       	sbci	r20, 0x00	; 0
     270:	50 48       	sbci	r21, 0x80	; 128
     272:	06 c0       	rjmp	.+12     	; 0x280 <__fixunssfsi+0x4a>
     274:	c8 01       	movw	r24, r16
     276:	b7 01       	movw	r22, r14
     278:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixsfsi>
     27c:	9b 01       	movw	r18, r22
     27e:	ac 01       	movw	r20, r24
     280:	b9 01       	movw	r22, r18
     282:	ca 01       	movw	r24, r20
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <_fpadd_parts>:
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ed e4       	ldi	r30, 0x4D	; 77
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__prologue_saves__>
     29a:	dc 01       	movw	r26, r24
     29c:	2b 01       	movw	r4, r22
     29e:	fa 01       	movw	r30, r20
     2a0:	9c 91       	ld	r25, X
     2a2:	92 30       	cpi	r25, 0x02	; 2
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <_fpadd_parts+0x1a>
     2a6:	39 c1       	rjmp	.+626    	; 0x51a <__stack+0xbb>
     2a8:	eb 01       	movw	r28, r22
     2aa:	88 81       	ld	r24, Y
     2ac:	82 30       	cpi	r24, 0x02	; 2
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <_fpadd_parts+0x24>
     2b0:	33 c1       	rjmp	.+614    	; 0x518 <__stack+0xb9>
     2b2:	94 30       	cpi	r25, 0x04	; 4
     2b4:	69 f4       	brne	.+26     	; 0x2d0 <_fpadd_parts+0x42>
     2b6:	84 30       	cpi	r24, 0x04	; 4
     2b8:	09 f0       	breq	.+2      	; 0x2bc <_fpadd_parts+0x2e>
     2ba:	2f c1       	rjmp	.+606    	; 0x51a <__stack+0xbb>
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	9c 91       	ld	r25, X
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	98 17       	cp	r25, r24
     2c6:	09 f4       	brne	.+2      	; 0x2ca <_fpadd_parts+0x3c>
     2c8:	28 c1       	rjmp	.+592    	; 0x51a <__stack+0xbb>
     2ca:	a7 e9       	ldi	r26, 0x97	; 151
     2cc:	b2 e0       	ldi	r27, 0x02	; 2
     2ce:	25 c1       	rjmp	.+586    	; 0x51a <__stack+0xbb>
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <_fpadd_parts+0x48>
     2d4:	21 c1       	rjmp	.+578    	; 0x518 <__stack+0xb9>
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	a9 f4       	brne	.+42     	; 0x304 <_fpadd_parts+0x76>
     2da:	92 30       	cpi	r25, 0x02	; 2
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <_fpadd_parts+0x52>
     2de:	1d c1       	rjmp	.+570    	; 0x51a <__stack+0xbb>
     2e0:	9a 01       	movw	r18, r20
     2e2:	ad 01       	movw	r20, r26
     2e4:	88 e0       	ldi	r24, 0x08	; 8
     2e6:	ea 01       	movw	r28, r20
     2e8:	09 90       	ld	r0, Y+
     2ea:	ae 01       	movw	r20, r28
     2ec:	e9 01       	movw	r28, r18
     2ee:	09 92       	st	Y+, r0
     2f0:	9e 01       	movw	r18, r28
     2f2:	81 50       	subi	r24, 0x01	; 1
     2f4:	c1 f7       	brne	.-16     	; 0x2e6 <_fpadd_parts+0x58>
     2f6:	e2 01       	movw	r28, r4
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	11 96       	adiw	r26, 0x01	; 1
     2fc:	9c 91       	ld	r25, X
     2fe:	89 23       	and	r24, r25
     300:	81 83       	std	Z+1, r24	; 0x01
     302:	08 c1       	rjmp	.+528    	; 0x514 <__stack+0xb5>
     304:	92 30       	cpi	r25, 0x02	; 2
     306:	09 f4       	brne	.+2      	; 0x30a <_fpadd_parts+0x7c>
     308:	07 c1       	rjmp	.+526    	; 0x518 <__stack+0xb9>
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	2d 90       	ld	r2, X+
     30e:	3c 90       	ld	r3, X
     310:	13 97       	sbiw	r26, 0x03	; 3
     312:	eb 01       	movw	r28, r22
     314:	8a 81       	ldd	r24, Y+2	; 0x02
     316:	9b 81       	ldd	r25, Y+3	; 0x03
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	ad 90       	ld	r10, X+
     31c:	bd 90       	ld	r11, X+
     31e:	cd 90       	ld	r12, X+
     320:	dc 90       	ld	r13, X
     322:	17 97       	sbiw	r26, 0x07	; 7
     324:	ec 80       	ldd	r14, Y+4	; 0x04
     326:	fd 80       	ldd	r15, Y+5	; 0x05
     328:	0e 81       	ldd	r16, Y+6	; 0x06
     32a:	1f 81       	ldd	r17, Y+7	; 0x07
     32c:	91 01       	movw	r18, r2
     32e:	28 1b       	sub	r18, r24
     330:	39 0b       	sbc	r19, r25
     332:	b9 01       	movw	r22, r18
     334:	37 ff       	sbrs	r19, 7
     336:	04 c0       	rjmp	.+8      	; 0x340 <_fpadd_parts+0xb2>
     338:	66 27       	eor	r22, r22
     33a:	77 27       	eor	r23, r23
     33c:	62 1b       	sub	r22, r18
     33e:	73 0b       	sbc	r23, r19
     340:	60 32       	cpi	r22, 0x20	; 32
     342:	71 05       	cpc	r23, r1
     344:	0c f0       	brlt	.+2      	; 0x348 <_fpadd_parts+0xba>
     346:	61 c0       	rjmp	.+194    	; 0x40a <_fpadd_parts+0x17c>
     348:	12 16       	cp	r1, r18
     34a:	13 06       	cpc	r1, r19
     34c:	6c f5       	brge	.+90     	; 0x3a8 <_fpadd_parts+0x11a>
     34e:	37 01       	movw	r6, r14
     350:	48 01       	movw	r8, r16
     352:	06 2e       	mov	r0, r22
     354:	04 c0       	rjmp	.+8      	; 0x35e <_fpadd_parts+0xd0>
     356:	96 94       	lsr	r9
     358:	87 94       	ror	r8
     35a:	77 94       	ror	r7
     35c:	67 94       	ror	r6
     35e:	0a 94       	dec	r0
     360:	d2 f7       	brpl	.-12     	; 0x356 <_fpadd_parts+0xc8>
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	04 c0       	rjmp	.+8      	; 0x374 <_fpadd_parts+0xe6>
     36c:	22 0f       	add	r18, r18
     36e:	33 1f       	adc	r19, r19
     370:	44 1f       	adc	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	6a 95       	dec	r22
     376:	d2 f7       	brpl	.-12     	; 0x36c <_fpadd_parts+0xde>
     378:	21 50       	subi	r18, 0x01	; 1
     37a:	30 40       	sbci	r19, 0x00	; 0
     37c:	40 40       	sbci	r20, 0x00	; 0
     37e:	50 40       	sbci	r21, 0x00	; 0
     380:	2e 21       	and	r18, r14
     382:	3f 21       	and	r19, r15
     384:	40 23       	and	r20, r16
     386:	51 23       	and	r21, r17
     388:	21 15       	cp	r18, r1
     38a:	31 05       	cpc	r19, r1
     38c:	41 05       	cpc	r20, r1
     38e:	51 05       	cpc	r21, r1
     390:	21 f0       	breq	.+8      	; 0x39a <_fpadd_parts+0x10c>
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	79 01       	movw	r14, r18
     39c:	8a 01       	movw	r16, r20
     39e:	e6 28       	or	r14, r6
     3a0:	f7 28       	or	r15, r7
     3a2:	08 29       	or	r16, r8
     3a4:	19 29       	or	r17, r9
     3a6:	3c c0       	rjmp	.+120    	; 0x420 <_fpadd_parts+0x192>
     3a8:	23 2b       	or	r18, r19
     3aa:	d1 f1       	breq	.+116    	; 0x420 <_fpadd_parts+0x192>
     3ac:	26 0e       	add	r2, r22
     3ae:	37 1e       	adc	r3, r23
     3b0:	35 01       	movw	r6, r10
     3b2:	46 01       	movw	r8, r12
     3b4:	06 2e       	mov	r0, r22
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <_fpadd_parts+0x132>
     3b8:	96 94       	lsr	r9
     3ba:	87 94       	ror	r8
     3bc:	77 94       	ror	r7
     3be:	67 94       	ror	r6
     3c0:	0a 94       	dec	r0
     3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <_fpadd_parts+0x12a>
     3c4:	21 e0       	ldi	r18, 0x01	; 1
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <_fpadd_parts+0x148>
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	44 1f       	adc	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	6a 95       	dec	r22
     3d8:	d2 f7       	brpl	.-12     	; 0x3ce <_fpadd_parts+0x140>
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	30 40       	sbci	r19, 0x00	; 0
     3de:	40 40       	sbci	r20, 0x00	; 0
     3e0:	50 40       	sbci	r21, 0x00	; 0
     3e2:	2a 21       	and	r18, r10
     3e4:	3b 21       	and	r19, r11
     3e6:	4c 21       	and	r20, r12
     3e8:	5d 21       	and	r21, r13
     3ea:	21 15       	cp	r18, r1
     3ec:	31 05       	cpc	r19, r1
     3ee:	41 05       	cpc	r20, r1
     3f0:	51 05       	cpc	r21, r1
     3f2:	21 f0       	breq	.+8      	; 0x3fc <_fpadd_parts+0x16e>
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	59 01       	movw	r10, r18
     3fe:	6a 01       	movw	r12, r20
     400:	a6 28       	or	r10, r6
     402:	b7 28       	or	r11, r7
     404:	c8 28       	or	r12, r8
     406:	d9 28       	or	r13, r9
     408:	0b c0       	rjmp	.+22     	; 0x420 <_fpadd_parts+0x192>
     40a:	82 15       	cp	r24, r2
     40c:	93 05       	cpc	r25, r3
     40e:	2c f0       	brlt	.+10     	; 0x41a <_fpadd_parts+0x18c>
     410:	1c 01       	movw	r2, r24
     412:	aa 24       	eor	r10, r10
     414:	bb 24       	eor	r11, r11
     416:	65 01       	movw	r12, r10
     418:	03 c0       	rjmp	.+6      	; 0x420 <_fpadd_parts+0x192>
     41a:	ee 24       	eor	r14, r14
     41c:	ff 24       	eor	r15, r15
     41e:	87 01       	movw	r16, r14
     420:	11 96       	adiw	r26, 0x01	; 1
     422:	9c 91       	ld	r25, X
     424:	d2 01       	movw	r26, r4
     426:	11 96       	adiw	r26, 0x01	; 1
     428:	8c 91       	ld	r24, X
     42a:	98 17       	cp	r25, r24
     42c:	09 f4       	brne	.+2      	; 0x430 <_fpadd_parts+0x1a2>
     42e:	45 c0       	rjmp	.+138    	; 0x4ba <__stack+0x5b>
     430:	99 23       	and	r25, r25
     432:	39 f0       	breq	.+14     	; 0x442 <_fpadd_parts+0x1b4>
     434:	a8 01       	movw	r20, r16
     436:	97 01       	movw	r18, r14
     438:	2a 19       	sub	r18, r10
     43a:	3b 09       	sbc	r19, r11
     43c:	4c 09       	sbc	r20, r12
     43e:	5d 09       	sbc	r21, r13
     440:	06 c0       	rjmp	.+12     	; 0x44e <_fpadd_parts+0x1c0>
     442:	a6 01       	movw	r20, r12
     444:	95 01       	movw	r18, r10
     446:	2e 19       	sub	r18, r14
     448:	3f 09       	sbc	r19, r15
     44a:	40 0b       	sbc	r20, r16
     44c:	51 0b       	sbc	r21, r17
     44e:	57 fd       	sbrc	r21, 7
     450:	08 c0       	rjmp	.+16     	; 0x462 <__stack+0x3>
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	33 82       	std	Z+3, r3	; 0x03
     456:	22 82       	std	Z+2, r2	; 0x02
     458:	24 83       	std	Z+4, r18	; 0x04
     45a:	35 83       	std	Z+5, r19	; 0x05
     45c:	46 83       	std	Z+6, r20	; 0x06
     45e:	57 83       	std	Z+7, r21	; 0x07
     460:	1d c0       	rjmp	.+58     	; 0x49c <__stack+0x3d>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	81 83       	std	Z+1, r24	; 0x01
     466:	33 82       	std	Z+3, r3	; 0x03
     468:	22 82       	std	Z+2, r2	; 0x02
     46a:	88 27       	eor	r24, r24
     46c:	99 27       	eor	r25, r25
     46e:	dc 01       	movw	r26, r24
     470:	82 1b       	sub	r24, r18
     472:	93 0b       	sbc	r25, r19
     474:	a4 0b       	sbc	r26, r20
     476:	b5 0b       	sbc	r27, r21
     478:	84 83       	std	Z+4, r24	; 0x04
     47a:	95 83       	std	Z+5, r25	; 0x05
     47c:	a6 83       	std	Z+6, r26	; 0x06
     47e:	b7 83       	std	Z+7, r27	; 0x07
     480:	0d c0       	rjmp	.+26     	; 0x49c <__stack+0x3d>
     482:	22 0f       	add	r18, r18
     484:	33 1f       	adc	r19, r19
     486:	44 1f       	adc	r20, r20
     488:	55 1f       	adc	r21, r21
     48a:	24 83       	std	Z+4, r18	; 0x04
     48c:	35 83       	std	Z+5, r19	; 0x05
     48e:	46 83       	std	Z+6, r20	; 0x06
     490:	57 83       	std	Z+7, r21	; 0x07
     492:	82 81       	ldd	r24, Z+2	; 0x02
     494:	93 81       	ldd	r25, Z+3	; 0x03
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	93 83       	std	Z+3, r25	; 0x03
     49a:	82 83       	std	Z+2, r24	; 0x02
     49c:	24 81       	ldd	r18, Z+4	; 0x04
     49e:	35 81       	ldd	r19, Z+5	; 0x05
     4a0:	46 81       	ldd	r20, Z+6	; 0x06
     4a2:	57 81       	ldd	r21, Z+7	; 0x07
     4a4:	da 01       	movw	r26, r20
     4a6:	c9 01       	movw	r24, r18
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	a1 09       	sbc	r26, r1
     4ac:	b1 09       	sbc	r27, r1
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	af 4f       	sbci	r26, 0xFF	; 255
     4b4:	bf 43       	sbci	r27, 0x3F	; 63
     4b6:	28 f3       	brcs	.-54     	; 0x482 <__stack+0x23>
     4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <__stack+0x71>
     4ba:	91 83       	std	Z+1, r25	; 0x01
     4bc:	33 82       	std	Z+3, r3	; 0x03
     4be:	22 82       	std	Z+2, r2	; 0x02
     4c0:	ea 0c       	add	r14, r10
     4c2:	fb 1c       	adc	r15, r11
     4c4:	0c 1d       	adc	r16, r12
     4c6:	1d 1d       	adc	r17, r13
     4c8:	e4 82       	std	Z+4, r14	; 0x04
     4ca:	f5 82       	std	Z+5, r15	; 0x05
     4cc:	06 83       	std	Z+6, r16	; 0x06
     4ce:	17 83       	std	Z+7, r17	; 0x07
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	80 83       	st	Z, r24
     4d4:	24 81       	ldd	r18, Z+4	; 0x04
     4d6:	35 81       	ldd	r19, Z+5	; 0x05
     4d8:	46 81       	ldd	r20, Z+6	; 0x06
     4da:	57 81       	ldd	r21, Z+7	; 0x07
     4dc:	57 ff       	sbrs	r21, 7
     4de:	1a c0       	rjmp	.+52     	; 0x514 <__stack+0xb5>
     4e0:	c9 01       	movw	r24, r18
     4e2:	aa 27       	eor	r26, r26
     4e4:	97 fd       	sbrc	r25, 7
     4e6:	a0 95       	com	r26
     4e8:	ba 2f       	mov	r27, r26
     4ea:	81 70       	andi	r24, 0x01	; 1
     4ec:	90 70       	andi	r25, 0x00	; 0
     4ee:	a0 70       	andi	r26, 0x00	; 0
     4f0:	b0 70       	andi	r27, 0x00	; 0
     4f2:	56 95       	lsr	r21
     4f4:	47 95       	ror	r20
     4f6:	37 95       	ror	r19
     4f8:	27 95       	ror	r18
     4fa:	82 2b       	or	r24, r18
     4fc:	93 2b       	or	r25, r19
     4fe:	a4 2b       	or	r26, r20
     500:	b5 2b       	or	r27, r21
     502:	84 83       	std	Z+4, r24	; 0x04
     504:	95 83       	std	Z+5, r25	; 0x05
     506:	a6 83       	std	Z+6, r26	; 0x06
     508:	b7 83       	std	Z+7, r27	; 0x07
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	93 81       	ldd	r25, Z+3	; 0x03
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	93 83       	std	Z+3, r25	; 0x03
     512:	82 83       	std	Z+2, r24	; 0x02
     514:	df 01       	movw	r26, r30
     516:	01 c0       	rjmp	.+2      	; 0x51a <__stack+0xbb>
     518:	d2 01       	movw	r26, r4
     51a:	cd 01       	movw	r24, r26
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	e2 e1       	ldi	r30, 0x12	; 18
     522:	0c 94 9c 28 	jmp	0x5138	; 0x5138 <__epilogue_restores__>

00000526 <__subsf3>:
     526:	a0 e2       	ldi	r26, 0x20	; 32
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	e9 e9       	ldi	r30, 0x99	; 153
     52c:	f2 e0       	ldi	r31, 0x02	; 2
     52e:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__prologue_saves__+0x18>
     532:	69 83       	std	Y+1, r22	; 0x01
     534:	7a 83       	std	Y+2, r23	; 0x02
     536:	8b 83       	std	Y+3, r24	; 0x03
     538:	9c 83       	std	Y+4, r25	; 0x04
     53a:	2d 83       	std	Y+5, r18	; 0x05
     53c:	3e 83       	std	Y+6, r19	; 0x06
     53e:	4f 83       	std	Y+7, r20	; 0x07
     540:	58 87       	std	Y+8, r21	; 0x08
     542:	e9 e0       	ldi	r30, 0x09	; 9
     544:	ee 2e       	mov	r14, r30
     546:	f1 2c       	mov	r15, r1
     548:	ec 0e       	add	r14, r28
     54a:	fd 1e       	adc	r15, r29
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	b7 01       	movw	r22, r14
     552:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     556:	8e 01       	movw	r16, r28
     558:	0f 5e       	subi	r16, 0xEF	; 239
     55a:	1f 4f       	sbci	r17, 0xFF	; 255
     55c:	ce 01       	movw	r24, r28
     55e:	05 96       	adiw	r24, 0x05	; 5
     560:	b8 01       	movw	r22, r16
     562:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     566:	8a 89       	ldd	r24, Y+18	; 0x12
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	89 27       	eor	r24, r25
     56c:	8a 8b       	std	Y+18, r24	; 0x12
     56e:	c7 01       	movw	r24, r14
     570:	b8 01       	movw	r22, r16
     572:	ae 01       	movw	r20, r28
     574:	47 5e       	subi	r20, 0xE7	; 231
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	0e 94 47 01 	call	0x28e	; 0x28e <_fpadd_parts>
     57c:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     580:	a0 96       	adiw	r28, 0x20	; 32
     582:	e6 e0       	ldi	r30, 0x06	; 6
     584:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__epilogue_restores__+0x18>

00000588 <__addsf3>:
     588:	a0 e2       	ldi	r26, 0x20	; 32
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	ea ec       	ldi	r30, 0xCA	; 202
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__prologue_saves__+0x18>
     594:	69 83       	std	Y+1, r22	; 0x01
     596:	7a 83       	std	Y+2, r23	; 0x02
     598:	8b 83       	std	Y+3, r24	; 0x03
     59a:	9c 83       	std	Y+4, r25	; 0x04
     59c:	2d 83       	std	Y+5, r18	; 0x05
     59e:	3e 83       	std	Y+6, r19	; 0x06
     5a0:	4f 83       	std	Y+7, r20	; 0x07
     5a2:	58 87       	std	Y+8, r21	; 0x08
     5a4:	f9 e0       	ldi	r31, 0x09	; 9
     5a6:	ef 2e       	mov	r14, r31
     5a8:	f1 2c       	mov	r15, r1
     5aa:	ec 0e       	add	r14, r28
     5ac:	fd 1e       	adc	r15, r29
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	b7 01       	movw	r22, r14
     5b4:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     5b8:	8e 01       	movw	r16, r28
     5ba:	0f 5e       	subi	r16, 0xEF	; 239
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
     5be:	ce 01       	movw	r24, r28
     5c0:	05 96       	adiw	r24, 0x05	; 5
     5c2:	b8 01       	movw	r22, r16
     5c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     5c8:	c7 01       	movw	r24, r14
     5ca:	b8 01       	movw	r22, r16
     5cc:	ae 01       	movw	r20, r28
     5ce:	47 5e       	subi	r20, 0xE7	; 231
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	0e 94 47 01 	call	0x28e	; 0x28e <_fpadd_parts>
     5d6:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     5da:	a0 96       	adiw	r28, 0x20	; 32
     5dc:	e6 e0       	ldi	r30, 0x06	; 6
     5de:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__epilogue_restores__+0x18>

000005e2 <__mulsf3>:
     5e2:	a0 e2       	ldi	r26, 0x20	; 32
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	e7 ef       	ldi	r30, 0xF7	; 247
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__prologue_saves__>
     5ee:	69 83       	std	Y+1, r22	; 0x01
     5f0:	7a 83       	std	Y+2, r23	; 0x02
     5f2:	8b 83       	std	Y+3, r24	; 0x03
     5f4:	9c 83       	std	Y+4, r25	; 0x04
     5f6:	2d 83       	std	Y+5, r18	; 0x05
     5f8:	3e 83       	std	Y+6, r19	; 0x06
     5fa:	4f 83       	std	Y+7, r20	; 0x07
     5fc:	58 87       	std	Y+8, r21	; 0x08
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	be 01       	movw	r22, r28
     604:	67 5f       	subi	r22, 0xF7	; 247
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     60c:	ce 01       	movw	r24, r28
     60e:	05 96       	adiw	r24, 0x05	; 5
     610:	be 01       	movw	r22, r28
     612:	6f 5e       	subi	r22, 0xEF	; 239
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     61a:	99 85       	ldd	r25, Y+9	; 0x09
     61c:	92 30       	cpi	r25, 0x02	; 2
     61e:	88 f0       	brcs	.+34     	; 0x642 <__mulsf3+0x60>
     620:	89 89       	ldd	r24, Y+17	; 0x11
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	c8 f0       	brcs	.+50     	; 0x658 <__mulsf3+0x76>
     626:	94 30       	cpi	r25, 0x04	; 4
     628:	19 f4       	brne	.+6      	; 0x630 <__mulsf3+0x4e>
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	51 f4       	brne	.+20     	; 0x642 <__mulsf3+0x60>
     62e:	04 c0       	rjmp	.+8      	; 0x638 <__mulsf3+0x56>
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	29 f4       	brne	.+10     	; 0x63e <__mulsf3+0x5c>
     634:	92 30       	cpi	r25, 0x02	; 2
     636:	81 f4       	brne	.+32     	; 0x658 <__mulsf3+0x76>
     638:	87 e9       	ldi	r24, 0x97	; 151
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	c6 c0       	rjmp	.+396    	; 0x7ca <__mulsf3+0x1e8>
     63e:	92 30       	cpi	r25, 0x02	; 2
     640:	49 f4       	brne	.+18     	; 0x654 <__mulsf3+0x72>
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	9a 85       	ldd	r25, Y+10	; 0x0a
     646:	8a 89       	ldd	r24, Y+18	; 0x12
     648:	98 13       	cpse	r25, r24
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	2a 87       	std	Y+10, r18	; 0x0a
     64e:	ce 01       	movw	r24, r28
     650:	09 96       	adiw	r24, 0x09	; 9
     652:	bb c0       	rjmp	.+374    	; 0x7ca <__mulsf3+0x1e8>
     654:	82 30       	cpi	r24, 0x02	; 2
     656:	49 f4       	brne	.+18     	; 0x66a <__mulsf3+0x88>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	9a 85       	ldd	r25, Y+10	; 0x0a
     65c:	8a 89       	ldd	r24, Y+18	; 0x12
     65e:	98 13       	cpse	r25, r24
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	2a 8b       	std	Y+18, r18	; 0x12
     664:	ce 01       	movw	r24, r28
     666:	41 96       	adiw	r24, 0x11	; 17
     668:	b0 c0       	rjmp	.+352    	; 0x7ca <__mulsf3+0x1e8>
     66a:	2d 84       	ldd	r2, Y+13	; 0x0d
     66c:	3e 84       	ldd	r3, Y+14	; 0x0e
     66e:	4f 84       	ldd	r4, Y+15	; 0x0f
     670:	58 88       	ldd	r5, Y+16	; 0x10
     672:	6d 88       	ldd	r6, Y+21	; 0x15
     674:	7e 88       	ldd	r7, Y+22	; 0x16
     676:	8f 88       	ldd	r8, Y+23	; 0x17
     678:	98 8c       	ldd	r9, Y+24	; 0x18
     67a:	ee 24       	eor	r14, r14
     67c:	ff 24       	eor	r15, r15
     67e:	87 01       	movw	r16, r14
     680:	aa 24       	eor	r10, r10
     682:	bb 24       	eor	r11, r11
     684:	65 01       	movw	r12, r10
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	c1 01       	movw	r24, r2
     694:	81 70       	andi	r24, 0x01	; 1
     696:	90 70       	andi	r25, 0x00	; 0
     698:	89 2b       	or	r24, r25
     69a:	e9 f0       	breq	.+58     	; 0x6d6 <__mulsf3+0xf4>
     69c:	e6 0c       	add	r14, r6
     69e:	f7 1c       	adc	r15, r7
     6a0:	08 1d       	adc	r16, r8
     6a2:	19 1d       	adc	r17, r9
     6a4:	9a 01       	movw	r18, r20
     6a6:	ab 01       	movw	r20, r22
     6a8:	2a 0d       	add	r18, r10
     6aa:	3b 1d       	adc	r19, r11
     6ac:	4c 1d       	adc	r20, r12
     6ae:	5d 1d       	adc	r21, r13
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	e6 14       	cp	r14, r6
     6ba:	f7 04       	cpc	r15, r7
     6bc:	08 05       	cpc	r16, r8
     6be:	19 05       	cpc	r17, r9
     6c0:	20 f4       	brcc	.+8      	; 0x6ca <__mulsf3+0xe8>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	ba 01       	movw	r22, r20
     6cc:	a9 01       	movw	r20, r18
     6ce:	48 0f       	add	r20, r24
     6d0:	59 1f       	adc	r21, r25
     6d2:	6a 1f       	adc	r22, r26
     6d4:	7b 1f       	adc	r23, r27
     6d6:	aa 0c       	add	r10, r10
     6d8:	bb 1c       	adc	r11, r11
     6da:	cc 1c       	adc	r12, r12
     6dc:	dd 1c       	adc	r13, r13
     6de:	97 fe       	sbrs	r9, 7
     6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <__mulsf3+0x110>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	a8 2a       	or	r10, r24
     6ec:	b9 2a       	or	r11, r25
     6ee:	ca 2a       	or	r12, r26
     6f0:	db 2a       	or	r13, r27
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	e0 32       	cpi	r30, 0x20	; 32
     6f6:	f1 05       	cpc	r31, r1
     6f8:	49 f0       	breq	.+18     	; 0x70c <__mulsf3+0x12a>
     6fa:	66 0c       	add	r6, r6
     6fc:	77 1c       	adc	r7, r7
     6fe:	88 1c       	adc	r8, r8
     700:	99 1c       	adc	r9, r9
     702:	56 94       	lsr	r5
     704:	47 94       	ror	r4
     706:	37 94       	ror	r3
     708:	27 94       	ror	r2
     70a:	c3 cf       	rjmp	.-122    	; 0x692 <__mulsf3+0xb0>
     70c:	fa 85       	ldd	r31, Y+10	; 0x0a
     70e:	ea 89       	ldd	r30, Y+18	; 0x12
     710:	2b 89       	ldd	r18, Y+19	; 0x13
     712:	3c 89       	ldd	r19, Y+20	; 0x14
     714:	8b 85       	ldd	r24, Y+11	; 0x0b
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	28 0f       	add	r18, r24
     71a:	39 1f       	adc	r19, r25
     71c:	2e 5f       	subi	r18, 0xFE	; 254
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	17 c0       	rjmp	.+46     	; 0x750 <__mulsf3+0x16e>
     722:	ca 01       	movw	r24, r20
     724:	81 70       	andi	r24, 0x01	; 1
     726:	90 70       	andi	r25, 0x00	; 0
     728:	89 2b       	or	r24, r25
     72a:	61 f0       	breq	.+24     	; 0x744 <__mulsf3+0x162>
     72c:	16 95       	lsr	r17
     72e:	07 95       	ror	r16
     730:	f7 94       	ror	r15
     732:	e7 94       	ror	r14
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e8       	ldi	r27, 0x80	; 128
     73c:	e8 2a       	or	r14, r24
     73e:	f9 2a       	or	r15, r25
     740:	0a 2b       	or	r16, r26
     742:	1b 2b       	or	r17, r27
     744:	76 95       	lsr	r23
     746:	67 95       	ror	r22
     748:	57 95       	ror	r21
     74a:	47 95       	ror	r20
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	77 fd       	sbrc	r23, 7
     752:	e7 cf       	rjmp	.-50     	; 0x722 <__mulsf3+0x140>
     754:	0c c0       	rjmp	.+24     	; 0x76e <__mulsf3+0x18c>
     756:	44 0f       	add	r20, r20
     758:	55 1f       	adc	r21, r21
     75a:	66 1f       	adc	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	17 fd       	sbrc	r17, 7
     760:	41 60       	ori	r20, 0x01	; 1
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	30 40       	sbci	r19, 0x00	; 0
     76e:	40 30       	cpi	r20, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	59 07       	cpc	r21, r25
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	69 07       	cpc	r22, r25
     778:	90 e4       	ldi	r25, 0x40	; 64
     77a:	79 07       	cpc	r23, r25
     77c:	60 f3       	brcs	.-40     	; 0x756 <__mulsf3+0x174>
     77e:	2b 8f       	std	Y+27, r18	; 0x1b
     780:	3c 8f       	std	Y+28, r19	; 0x1c
     782:	db 01       	movw	r26, r22
     784:	ca 01       	movw	r24, r20
     786:	8f 77       	andi	r24, 0x7F	; 127
     788:	90 70       	andi	r25, 0x00	; 0
     78a:	a0 70       	andi	r26, 0x00	; 0
     78c:	b0 70       	andi	r27, 0x00	; 0
     78e:	80 34       	cpi	r24, 0x40	; 64
     790:	91 05       	cpc	r25, r1
     792:	a1 05       	cpc	r26, r1
     794:	b1 05       	cpc	r27, r1
     796:	61 f4       	brne	.+24     	; 0x7b0 <__mulsf3+0x1ce>
     798:	47 fd       	sbrc	r20, 7
     79a:	0a c0       	rjmp	.+20     	; 0x7b0 <__mulsf3+0x1ce>
     79c:	e1 14       	cp	r14, r1
     79e:	f1 04       	cpc	r15, r1
     7a0:	01 05       	cpc	r16, r1
     7a2:	11 05       	cpc	r17, r1
     7a4:	29 f0       	breq	.+10     	; 0x7b0 <__mulsf3+0x1ce>
     7a6:	40 5c       	subi	r20, 0xC0	; 192
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	6f 4f       	sbci	r22, 0xFF	; 255
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	40 78       	andi	r20, 0x80	; 128
     7b0:	1a 8e       	std	Y+26, r1	; 0x1a
     7b2:	fe 17       	cp	r31, r30
     7b4:	11 f0       	breq	.+4      	; 0x7ba <__mulsf3+0x1d8>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	8a 8f       	std	Y+26, r24	; 0x1a
     7ba:	4d 8f       	std	Y+29, r20	; 0x1d
     7bc:	5e 8f       	std	Y+30, r21	; 0x1e
     7be:	6f 8f       	std	Y+31, r22	; 0x1f
     7c0:	78 a3       	std	Y+32, r23	; 0x20
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 8f       	std	Y+25, r24	; 0x19
     7c6:	ce 01       	movw	r24, r28
     7c8:	49 96       	adiw	r24, 0x19	; 25
     7ca:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     7ce:	a0 96       	adiw	r28, 0x20	; 32
     7d0:	e2 e1       	ldi	r30, 0x12	; 18
     7d2:	0c 94 9c 28 	jmp	0x5138	; 0x5138 <__epilogue_restores__>

000007d6 <__gtsf2>:
     7d6:	a8 e1       	ldi	r26, 0x18	; 24
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e1 ef       	ldi	r30, 0xF1	; 241
     7dc:	f3 e0       	ldi	r31, 0x03	; 3
     7de:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__prologue_saves__+0x18>
     7e2:	69 83       	std	Y+1, r22	; 0x01
     7e4:	7a 83       	std	Y+2, r23	; 0x02
     7e6:	8b 83       	std	Y+3, r24	; 0x03
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	2d 83       	std	Y+5, r18	; 0x05
     7ec:	3e 83       	std	Y+6, r19	; 0x06
     7ee:	4f 83       	std	Y+7, r20	; 0x07
     7f0:	58 87       	std	Y+8, r21	; 0x08
     7f2:	89 e0       	ldi	r24, 0x09	; 9
     7f4:	e8 2e       	mov	r14, r24
     7f6:	f1 2c       	mov	r15, r1
     7f8:	ec 0e       	add	r14, r28
     7fa:	fd 1e       	adc	r15, r29
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	b7 01       	movw	r22, r14
     802:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     806:	8e 01       	movw	r16, r28
     808:	0f 5e       	subi	r16, 0xEF	; 239
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	ce 01       	movw	r24, r28
     80e:	05 96       	adiw	r24, 0x05	; 5
     810:	b8 01       	movw	r22, r16
     812:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     816:	89 85       	ldd	r24, Y+9	; 0x09
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	40 f0       	brcs	.+16     	; 0x82c <__gtsf2+0x56>
     81c:	89 89       	ldd	r24, Y+17	; 0x11
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	28 f0       	brcs	.+10     	; 0x82c <__gtsf2+0x56>
     822:	c7 01       	movw	r24, r14
     824:	b8 01       	movw	r22, r16
     826:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     82a:	01 c0       	rjmp	.+2      	; 0x82e <__gtsf2+0x58>
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	68 96       	adiw	r28, 0x18	; 24
     830:	e6 e0       	ldi	r30, 0x06	; 6
     832:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__epilogue_restores__+0x18>

00000836 <__gesf2>:
     836:	a8 e1       	ldi	r26, 0x18	; 24
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e1 e2       	ldi	r30, 0x21	; 33
     83c:	f4 e0       	ldi	r31, 0x04	; 4
     83e:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__prologue_saves__+0x18>
     842:	69 83       	std	Y+1, r22	; 0x01
     844:	7a 83       	std	Y+2, r23	; 0x02
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	9c 83       	std	Y+4, r25	; 0x04
     84a:	2d 83       	std	Y+5, r18	; 0x05
     84c:	3e 83       	std	Y+6, r19	; 0x06
     84e:	4f 83       	std	Y+7, r20	; 0x07
     850:	58 87       	std	Y+8, r21	; 0x08
     852:	89 e0       	ldi	r24, 0x09	; 9
     854:	e8 2e       	mov	r14, r24
     856:	f1 2c       	mov	r15, r1
     858:	ec 0e       	add	r14, r28
     85a:	fd 1e       	adc	r15, r29
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	b7 01       	movw	r22, r14
     862:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     866:	8e 01       	movw	r16, r28
     868:	0f 5e       	subi	r16, 0xEF	; 239
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	ce 01       	movw	r24, r28
     86e:	05 96       	adiw	r24, 0x05	; 5
     870:	b8 01       	movw	r22, r16
     872:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	40 f0       	brcs	.+16     	; 0x88c <__gesf2+0x56>
     87c:	89 89       	ldd	r24, Y+17	; 0x11
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	28 f0       	brcs	.+10     	; 0x88c <__gesf2+0x56>
     882:	c7 01       	movw	r24, r14
     884:	b8 01       	movw	r22, r16
     886:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     88a:	01 c0       	rjmp	.+2      	; 0x88e <__gesf2+0x58>
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	68 96       	adiw	r28, 0x18	; 24
     890:	e6 e0       	ldi	r30, 0x06	; 6
     892:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__epilogue_restores__+0x18>

00000896 <__ltsf2>:
     896:	a8 e1       	ldi	r26, 0x18	; 24
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e1 e5       	ldi	r30, 0x51	; 81
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__prologue_saves__+0x18>
     8a2:	69 83       	std	Y+1, r22	; 0x01
     8a4:	7a 83       	std	Y+2, r23	; 0x02
     8a6:	8b 83       	std	Y+3, r24	; 0x03
     8a8:	9c 83       	std	Y+4, r25	; 0x04
     8aa:	2d 83       	std	Y+5, r18	; 0x05
     8ac:	3e 83       	std	Y+6, r19	; 0x06
     8ae:	4f 83       	std	Y+7, r20	; 0x07
     8b0:	58 87       	std	Y+8, r21	; 0x08
     8b2:	89 e0       	ldi	r24, 0x09	; 9
     8b4:	e8 2e       	mov	r14, r24
     8b6:	f1 2c       	mov	r15, r1
     8b8:	ec 0e       	add	r14, r28
     8ba:	fd 1e       	adc	r15, r29
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	b7 01       	movw	r22, r14
     8c2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     8c6:	8e 01       	movw	r16, r28
     8c8:	0f 5e       	subi	r16, 0xEF	; 239
     8ca:	1f 4f       	sbci	r17, 0xFF	; 255
     8cc:	ce 01       	movw	r24, r28
     8ce:	05 96       	adiw	r24, 0x05	; 5
     8d0:	b8 01       	movw	r22, r16
     8d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     8d6:	89 85       	ldd	r24, Y+9	; 0x09
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	40 f0       	brcs	.+16     	; 0x8ec <__ltsf2+0x56>
     8dc:	89 89       	ldd	r24, Y+17	; 0x11
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__ltsf2+0x56>
     8e2:	c7 01       	movw	r24, r14
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <__ltsf2+0x58>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	68 96       	adiw	r28, 0x18	; 24
     8f0:	e6 e0       	ldi	r30, 0x06	; 6
     8f2:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__epilogue_restores__+0x18>

000008f6 <__fixsfsi>:
     8f6:	ac e0       	ldi	r26, 0x0C	; 12
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e1 e8       	ldi	r30, 0x81	; 129
     8fc:	f4 e0       	ldi	r31, 0x04	; 4
     8fe:	0c 94 90 28 	jmp	0x5120	; 0x5120 <__prologue_saves__+0x20>
     902:	69 83       	std	Y+1, r22	; 0x01
     904:	7a 83       	std	Y+2, r23	; 0x02
     906:	8b 83       	std	Y+3, r24	; 0x03
     908:	9c 83       	std	Y+4, r25	; 0x04
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	be 01       	movw	r22, r28
     910:	6b 5f       	subi	r22, 0xFB	; 251
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     918:	8d 81       	ldd	r24, Y+5	; 0x05
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	61 f1       	breq	.+88     	; 0x976 <__fixsfsi+0x80>
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	50 f1       	brcs	.+84     	; 0x976 <__fixsfsi+0x80>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	21 f4       	brne	.+8      	; 0x92e <__fixsfsi+0x38>
     926:	8e 81       	ldd	r24, Y+6	; 0x06
     928:	88 23       	and	r24, r24
     92a:	51 f1       	breq	.+84     	; 0x980 <__fixsfsi+0x8a>
     92c:	2e c0       	rjmp	.+92     	; 0x98a <__fixsfsi+0x94>
     92e:	2f 81       	ldd	r18, Y+7	; 0x07
     930:	38 85       	ldd	r19, Y+8	; 0x08
     932:	37 fd       	sbrc	r19, 7
     934:	20 c0       	rjmp	.+64     	; 0x976 <__fixsfsi+0x80>
     936:	6e 81       	ldd	r22, Y+6	; 0x06
     938:	2f 31       	cpi	r18, 0x1F	; 31
     93a:	31 05       	cpc	r19, r1
     93c:	1c f0       	brlt	.+6      	; 0x944 <__fixsfsi+0x4e>
     93e:	66 23       	and	r22, r22
     940:	f9 f0       	breq	.+62     	; 0x980 <__fixsfsi+0x8a>
     942:	23 c0       	rjmp	.+70     	; 0x98a <__fixsfsi+0x94>
     944:	8e e1       	ldi	r24, 0x1E	; 30
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	82 1b       	sub	r24, r18
     94a:	93 0b       	sbc	r25, r19
     94c:	29 85       	ldd	r18, Y+9	; 0x09
     94e:	3a 85       	ldd	r19, Y+10	; 0x0a
     950:	4b 85       	ldd	r20, Y+11	; 0x0b
     952:	5c 85       	ldd	r21, Y+12	; 0x0c
     954:	04 c0       	rjmp	.+8      	; 0x95e <__fixsfsi+0x68>
     956:	56 95       	lsr	r21
     958:	47 95       	ror	r20
     95a:	37 95       	ror	r19
     95c:	27 95       	ror	r18
     95e:	8a 95       	dec	r24
     960:	d2 f7       	brpl	.-12     	; 0x956 <__fixsfsi+0x60>
     962:	66 23       	and	r22, r22
     964:	b1 f0       	breq	.+44     	; 0x992 <__fixsfsi+0x9c>
     966:	50 95       	com	r21
     968:	40 95       	com	r20
     96a:	30 95       	com	r19
     96c:	21 95       	neg	r18
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	4f 4f       	sbci	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	0e c0       	rjmp	.+28     	; 0x992 <__fixsfsi+0x9c>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	09 c0       	rjmp	.+18     	; 0x992 <__fixsfsi+0x9c>
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	3f ef       	ldi	r19, 0xFF	; 255
     984:	4f ef       	ldi	r20, 0xFF	; 255
     986:	5f e7       	ldi	r21, 0x7F	; 127
     988:	04 c0       	rjmp	.+8      	; 0x992 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e8       	ldi	r21, 0x80	; 128
     992:	b9 01       	movw	r22, r18
     994:	ca 01       	movw	r24, r20
     996:	2c 96       	adiw	r28, 0x0c	; 12
     998:	e2 e0       	ldi	r30, 0x02	; 2
     99a:	0c 94 ac 28 	jmp	0x5158	; 0x5158 <__epilogue_restores__+0x20>

0000099e <__pack_f>:
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	fc 01       	movw	r30, r24
     9aa:	e4 80       	ldd	r14, Z+4	; 0x04
     9ac:	f5 80       	ldd	r15, Z+5	; 0x05
     9ae:	06 81       	ldd	r16, Z+6	; 0x06
     9b0:	17 81       	ldd	r17, Z+7	; 0x07
     9b2:	d1 80       	ldd	r13, Z+1	; 0x01
     9b4:	80 81       	ld	r24, Z
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	48 f4       	brcc	.+18     	; 0x9cc <__pack_f+0x2e>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e1       	ldi	r26, 0x10	; 16
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e8 2a       	or	r14, r24
     9c4:	f9 2a       	or	r15, r25
     9c6:	0a 2b       	or	r16, r26
     9c8:	1b 2b       	or	r17, r27
     9ca:	a5 c0       	rjmp	.+330    	; 0xb16 <__pack_f+0x178>
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <__pack_f+0x34>
     9d0:	9f c0       	rjmp	.+318    	; 0xb10 <__pack_f+0x172>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	21 f4       	brne	.+8      	; 0x9de <__pack_f+0x40>
     9d6:	ee 24       	eor	r14, r14
     9d8:	ff 24       	eor	r15, r15
     9da:	87 01       	movw	r16, r14
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__pack_f+0x4a>
     9de:	e1 14       	cp	r14, r1
     9e0:	f1 04       	cpc	r15, r1
     9e2:	01 05       	cpc	r16, r1
     9e4:	11 05       	cpc	r17, r1
     9e6:	19 f4       	brne	.+6      	; 0x9ee <__pack_f+0x50>
     9e8:	e0 e0       	ldi	r30, 0x00	; 0
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	96 c0       	rjmp	.+300    	; 0xb1a <__pack_f+0x17c>
     9ee:	62 81       	ldd	r22, Z+2	; 0x02
     9f0:	73 81       	ldd	r23, Z+3	; 0x03
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	62 38       	cpi	r22, 0x82	; 130
     9f6:	79 07       	cpc	r23, r25
     9f8:	0c f0       	brlt	.+2      	; 0x9fc <__pack_f+0x5e>
     9fa:	5b c0       	rjmp	.+182    	; 0xab2 <__pack_f+0x114>
     9fc:	22 e8       	ldi	r18, 0x82	; 130
     9fe:	3f ef       	ldi	r19, 0xFF	; 255
     a00:	26 1b       	sub	r18, r22
     a02:	37 0b       	sbc	r19, r23
     a04:	2a 31       	cpi	r18, 0x1A	; 26
     a06:	31 05       	cpc	r19, r1
     a08:	2c f0       	brlt	.+10     	; 0xa14 <__pack_f+0x76>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	2a c0       	rjmp	.+84     	; 0xa68 <__pack_f+0xca>
     a14:	b8 01       	movw	r22, r16
     a16:	a7 01       	movw	r20, r14
     a18:	02 2e       	mov	r0, r18
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__pack_f+0x86>
     a1c:	76 95       	lsr	r23
     a1e:	67 95       	ror	r22
     a20:	57 95       	ror	r21
     a22:	47 95       	ror	r20
     a24:	0a 94       	dec	r0
     a26:	d2 f7       	brpl	.-12     	; 0xa1c <__pack_f+0x7e>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x9c>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	aa 1f       	adc	r26, r26
     a38:	bb 1f       	adc	r27, r27
     a3a:	2a 95       	dec	r18
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x94>
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	a1 09       	sbc	r26, r1
     a42:	b1 09       	sbc	r27, r1
     a44:	8e 21       	and	r24, r14
     a46:	9f 21       	and	r25, r15
     a48:	a0 23       	and	r26, r16
     a4a:	b1 23       	and	r27, r17
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	a1 05       	cpc	r26, r1
     a50:	b1 05       	cpc	r27, r1
     a52:	21 f0       	breq	.+8      	; 0xa5c <__pack_f+0xbe>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	9a 01       	movw	r18, r20
     a5e:	ab 01       	movw	r20, r22
     a60:	28 2b       	or	r18, r24
     a62:	39 2b       	or	r19, r25
     a64:	4a 2b       	or	r20, r26
     a66:	5b 2b       	or	r21, r27
     a68:	da 01       	movw	r26, r20
     a6a:	c9 01       	movw	r24, r18
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	90 70       	andi	r25, 0x00	; 0
     a70:	a0 70       	andi	r26, 0x00	; 0
     a72:	b0 70       	andi	r27, 0x00	; 0
     a74:	80 34       	cpi	r24, 0x40	; 64
     a76:	91 05       	cpc	r25, r1
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <__pack_f+0xee>
     a7e:	27 ff       	sbrs	r18, 7
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <__pack_f+0xf6>
     a82:	20 5c       	subi	r18, 0xC0	; 192
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	4f 4f       	sbci	r20, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__pack_f+0xf6>
     a8c:	21 5c       	subi	r18, 0xC1	; 193
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	20 30       	cpi	r18, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	3a 07       	cpc	r19, r26
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	4a 07       	cpc	r20, r26
     aa2:	a0 e4       	ldi	r26, 0x40	; 64
     aa4:	5a 07       	cpc	r21, r26
     aa6:	10 f0       	brcs	.+4      	; 0xaac <__pack_f+0x10e>
     aa8:	e1 e0       	ldi	r30, 0x01	; 1
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	79 01       	movw	r14, r18
     aae:	8a 01       	movw	r16, r20
     ab0:	27 c0       	rjmp	.+78     	; 0xb00 <__pack_f+0x162>
     ab2:	60 38       	cpi	r22, 0x80	; 128
     ab4:	71 05       	cpc	r23, r1
     ab6:	64 f5       	brge	.+88     	; 0xb10 <__pack_f+0x172>
     ab8:	fb 01       	movw	r30, r22
     aba:	e1 58       	subi	r30, 0x81	; 129
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	d8 01       	movw	r26, r16
     ac0:	c7 01       	movw	r24, r14
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	90 70       	andi	r25, 0x00	; 0
     ac6:	a0 70       	andi	r26, 0x00	; 0
     ac8:	b0 70       	andi	r27, 0x00	; 0
     aca:	80 34       	cpi	r24, 0x40	; 64
     acc:	91 05       	cpc	r25, r1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	39 f4       	brne	.+14     	; 0xae2 <__pack_f+0x144>
     ad4:	e7 fe       	sbrs	r14, 7
     ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__pack_f+0x154>
     ad8:	80 e4       	ldi	r24, 0x40	; 64
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__pack_f+0x14c>
     ae2:	8f e3       	ldi	r24, 0x3F	; 63
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e8 0e       	add	r14, r24
     aec:	f9 1e       	adc	r15, r25
     aee:	0a 1f       	adc	r16, r26
     af0:	1b 1f       	adc	r17, r27
     af2:	17 ff       	sbrs	r17, 7
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <__pack_f+0x162>
     af6:	16 95       	lsr	r17
     af8:	07 95       	ror	r16
     afa:	f7 94       	ror	r15
     afc:	e7 94       	ror	r14
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	16 95       	lsr	r17
     b04:	07 95       	ror	r16
     b06:	f7 94       	ror	r15
     b08:	e7 94       	ror	r14
     b0a:	8a 95       	dec	r24
     b0c:	d1 f7       	brne	.-12     	; 0xb02 <__pack_f+0x164>
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__pack_f+0x17c>
     b10:	ee 24       	eor	r14, r14
     b12:	ff 24       	eor	r15, r15
     b14:	87 01       	movw	r16, r14
     b16:	ef ef       	ldi	r30, 0xFF	; 255
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	6e 2f       	mov	r22, r30
     b1c:	67 95       	ror	r22
     b1e:	66 27       	eor	r22, r22
     b20:	67 95       	ror	r22
     b22:	90 2f       	mov	r25, r16
     b24:	9f 77       	andi	r25, 0x7F	; 127
     b26:	d7 94       	ror	r13
     b28:	dd 24       	eor	r13, r13
     b2a:	d7 94       	ror	r13
     b2c:	8e 2f       	mov	r24, r30
     b2e:	86 95       	lsr	r24
     b30:	49 2f       	mov	r20, r25
     b32:	46 2b       	or	r20, r22
     b34:	58 2f       	mov	r21, r24
     b36:	5d 29       	or	r21, r13
     b38:	b7 01       	movw	r22, r14
     b3a:	ca 01       	movw	r24, r20
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	08 95       	ret

00000b48 <__unpack_f>:
     b48:	fc 01       	movw	r30, r24
     b4a:	db 01       	movw	r26, r22
     b4c:	40 81       	ld	r20, Z
     b4e:	51 81       	ldd	r21, Z+1	; 0x01
     b50:	22 81       	ldd	r18, Z+2	; 0x02
     b52:	62 2f       	mov	r22, r18
     b54:	6f 77       	andi	r22, 0x7F	; 127
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	22 1f       	adc	r18, r18
     b5a:	22 27       	eor	r18, r18
     b5c:	22 1f       	adc	r18, r18
     b5e:	93 81       	ldd	r25, Z+3	; 0x03
     b60:	89 2f       	mov	r24, r25
     b62:	88 0f       	add	r24, r24
     b64:	82 2b       	or	r24, r18
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	99 1f       	adc	r25, r25
     b6c:	99 27       	eor	r25, r25
     b6e:	99 1f       	adc	r25, r25
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	9c 93       	st	X, r25
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	a9 f5       	brne	.+106    	; 0xbe6 <__unpack_f+0x9e>
     b7c:	41 15       	cp	r20, r1
     b7e:	51 05       	cpc	r21, r1
     b80:	61 05       	cpc	r22, r1
     b82:	71 05       	cpc	r23, r1
     b84:	11 f4       	brne	.+4      	; 0xb8a <__unpack_f+0x42>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	37 c0       	rjmp	.+110    	; 0xbf8 <__unpack_f+0xb0>
     b8a:	82 e8       	ldi	r24, 0x82	; 130
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	13 96       	adiw	r26, 0x03	; 3
     b90:	9c 93       	st	X, r25
     b92:	8e 93       	st	-X, r24
     b94:	12 97       	sbiw	r26, 0x02	; 2
     b96:	9a 01       	movw	r18, r20
     b98:	ab 01       	movw	r20, r22
     b9a:	67 e0       	ldi	r22, 0x07	; 7
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	44 1f       	adc	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	6a 95       	dec	r22
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <__unpack_f+0x54>
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	8c 93       	st	X, r24
     bac:	0d c0       	rjmp	.+26     	; 0xbc8 <__unpack_f+0x80>
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	44 1f       	adc	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	13 96       	adiw	r26, 0x03	; 3
     bc2:	9c 93       	st	X, r25
     bc4:	8e 93       	st	-X, r24
     bc6:	12 97       	sbiw	r26, 0x02	; 2
     bc8:	20 30       	cpi	r18, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	38 07       	cpc	r19, r24
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	48 07       	cpc	r20, r24
     bd2:	80 e4       	ldi	r24, 0x40	; 64
     bd4:	58 07       	cpc	r21, r24
     bd6:	58 f3       	brcs	.-42     	; 0xbae <__unpack_f+0x66>
     bd8:	14 96       	adiw	r26, 0x04	; 4
     bda:	2d 93       	st	X+, r18
     bdc:	3d 93       	st	X+, r19
     bde:	4d 93       	st	X+, r20
     be0:	5c 93       	st	X, r21
     be2:	17 97       	sbiw	r26, 0x07	; 7
     be4:	08 95       	ret
     be6:	2f 3f       	cpi	r18, 0xFF	; 255
     be8:	31 05       	cpc	r19, r1
     bea:	79 f4       	brne	.+30     	; 0xc0a <__unpack_f+0xc2>
     bec:	41 15       	cp	r20, r1
     bee:	51 05       	cpc	r21, r1
     bf0:	61 05       	cpc	r22, r1
     bf2:	71 05       	cpc	r23, r1
     bf4:	19 f4       	brne	.+6      	; 0xbfc <__unpack_f+0xb4>
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	8c 93       	st	X, r24
     bfa:	08 95       	ret
     bfc:	64 ff       	sbrs	r22, 4
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <__unpack_f+0xbe>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	8c 93       	st	X, r24
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <__unpack_f+0xe2>
     c06:	1c 92       	st	X, r1
     c08:	10 c0       	rjmp	.+32     	; 0xc2a <__unpack_f+0xe2>
     c0a:	2f 57       	subi	r18, 0x7F	; 127
     c0c:	30 40       	sbci	r19, 0x00	; 0
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	3c 93       	st	X, r19
     c12:	2e 93       	st	-X, r18
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	8c 93       	st	X, r24
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	44 0f       	add	r20, r20
     c1e:	55 1f       	adc	r21, r21
     c20:	66 1f       	adc	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	8a 95       	dec	r24
     c26:	d1 f7       	brne	.-12     	; 0xc1c <__unpack_f+0xd4>
     c28:	70 64       	ori	r23, 0x40	; 64
     c2a:	14 96       	adiw	r26, 0x04	; 4
     c2c:	4d 93       	st	X+, r20
     c2e:	5d 93       	st	X+, r21
     c30:	6d 93       	st	X+, r22
     c32:	7c 93       	st	X, r23
     c34:	17 97       	sbiw	r26, 0x07	; 7
     c36:	08 95       	ret

00000c38 <__fpcmp_parts_f>:
     c38:	1f 93       	push	r17
     c3a:	dc 01       	movw	r26, r24
     c3c:	fb 01       	movw	r30, r22
     c3e:	9c 91       	ld	r25, X
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	08 f4       	brcc	.+2      	; 0xc46 <__fpcmp_parts_f+0xe>
     c44:	47 c0       	rjmp	.+142    	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c46:	80 81       	ld	r24, Z
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <__fpcmp_parts_f+0x16>
     c4c:	43 c0       	rjmp	.+134    	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c4e:	94 30       	cpi	r25, 0x04	; 4
     c50:	51 f4       	brne	.+20     	; 0xc66 <__fpcmp_parts_f+0x2e>
     c52:	11 96       	adiw	r26, 0x01	; 1
     c54:	1c 91       	ld	r17, X
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	99 f5       	brne	.+102    	; 0xcc0 <__fpcmp_parts_f+0x88>
     c5a:	81 81       	ldd	r24, Z+1	; 0x01
     c5c:	68 2f       	mov	r22, r24
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	61 1b       	sub	r22, r17
     c62:	71 09       	sbc	r23, r1
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <__fpcmp_parts_f+0xac>
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	21 f0       	breq	.+8      	; 0xc72 <__fpcmp_parts_f+0x3a>
     c6a:	92 30       	cpi	r25, 0x02	; 2
     c6c:	31 f4       	brne	.+12     	; 0xc7a <__fpcmp_parts_f+0x42>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	b9 f1       	breq	.+110    	; 0xce0 <__fpcmp_parts_f+0xa8>
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	88 23       	and	r24, r24
     c76:	89 f1       	breq	.+98     	; 0xcda <__fpcmp_parts_f+0xa2>
     c78:	2d c0       	rjmp	.+90     	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	1c 91       	ld	r17, X
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	f1 f0       	breq	.+60     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c84:	81 81       	ldd	r24, Z+1	; 0x01
     c86:	18 17       	cp	r17, r24
     c88:	d9 f4       	brne	.+54     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	13 97       	sbiw	r26, 0x03	; 3
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	94 f0       	brlt	.+36     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	bc f0       	brlt	.+46     	; 0xcd0 <__fpcmp_parts_f+0x98>
     ca2:	14 96       	adiw	r26, 0x04	; 4
     ca4:	8d 91       	ld	r24, X+
     ca6:	9d 91       	ld	r25, X+
     ca8:	0d 90       	ld	r0, X+
     caa:	bc 91       	ld	r27, X
     cac:	a0 2d       	mov	r26, r0
     cae:	24 81       	ldd	r18, Z+4	; 0x04
     cb0:	35 81       	ldd	r19, Z+5	; 0x05
     cb2:	46 81       	ldd	r20, Z+6	; 0x06
     cb4:	57 81       	ldd	r21, Z+7	; 0x07
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	4a 07       	cpc	r20, r26
     cbc:	5b 07       	cpc	r21, r27
     cbe:	18 f4       	brcc	.+6      	; 0xcc6 <__fpcmp_parts_f+0x8e>
     cc0:	11 23       	and	r17, r17
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <__fpcmp_parts_f+0x9c>
     cc4:	0a c0       	rjmp	.+20     	; 0xcda <__fpcmp_parts_f+0xa2>
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	a4 07       	cpc	r26, r20
     ccc:	b5 07       	cpc	r27, r21
     cce:	40 f4       	brcc	.+16     	; 0xce0 <__fpcmp_parts_f+0xa8>
     cd0:	11 23       	and	r17, r17
     cd2:	19 f0       	breq	.+6      	; 0xcda <__fpcmp_parts_f+0xa2>
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <__fpcmp_parts_f+0xac>
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	7f ef       	ldi	r23, 0xFF	; 255
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__fpcmp_parts_f+0xac>
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	cb 01       	movw	r24, r22
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <Convert_uint64_to_String>:
/**************************                   INCLUDES                   **************************/
#include "STRING_SERVICE_FUN.h"


void Convert_uint64_to_String(uint64 var , uint8 * String)
{
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	c4 55       	subi	r28, 0x54	; 84
     d08:	d0 40       	sbci	r29, 0x00	; 0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	fe 01       	movw	r30, r28
     d16:	ed 5b       	subi	r30, 0xBD	; 189
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	20 83       	st	Z, r18
     d1c:	31 83       	std	Z+1, r19	; 0x01
     d1e:	42 83       	std	Z+2, r20	; 0x02
     d20:	53 83       	std	Z+3, r21	; 0x03
     d22:	64 83       	std	Z+4, r22	; 0x04
     d24:	75 83       	std	Z+5, r23	; 0x05
     d26:	86 83       	std	Z+6, r24	; 0x06
     d28:	97 83       	std	Z+7, r25	; 0x07
     d2a:	fe 01       	movw	r30, r28
     d2c:	e5 5b       	subi	r30, 0xB5	; 181
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	11 83       	std	Z+1, r17	; 0x01
     d32:	00 83       	st	Z, r16
    uint8 index = 60 ; /*   As I will take last 4 bytes and convert them to Hexa Decemal  */
     d34:	8c e3       	ldi	r24, 0x3C	; 60
     d36:	8a 83       	std	Y+2, r24	; 0x02
    uint8 String_t[64];
    uint8 it = 0 ;
     d38:	19 82       	std	Y+1, r1	; 0x01
     d3a:	ec c1       	rjmp	.+984    	; 0x1114 <Convert_uint64_to_String+0x42a>
    for( ; it < 16; it++)
    {
        switch( (var >> index) & 0x0F ) 
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	a8 2f       	mov	r26, r24
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	fe 01       	movw	r30, r28
     d44:	ed 5b       	subi	r30, 0xBD	; 189
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	20 81       	ld	r18, Z
     d4a:	31 81       	ldd	r19, Z+1	; 0x01
     d4c:	42 81       	ldd	r20, Z+2	; 0x02
     d4e:	53 81       	ldd	r21, Z+3	; 0x03
     d50:	64 81       	ldd	r22, Z+4	; 0x04
     d52:	75 81       	ldd	r23, Z+5	; 0x05
     d54:	86 81       	ldd	r24, Z+6	; 0x06
     d56:	97 81       	ldd	r25, Z+7	; 0x07
     d58:	0a 2f       	mov	r16, r26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
     d5e:	a2 2e       	mov	r10, r18
     d60:	b3 2e       	mov	r11, r19
     d62:	c4 2e       	mov	r12, r20
     d64:	d5 2e       	mov	r13, r21
     d66:	e6 2e       	mov	r14, r22
     d68:	f7 2e       	mov	r15, r23
     d6a:	08 2f       	mov	r16, r24
     d6c:	19 2f       	mov	r17, r25
     d6e:	2a 2d       	mov	r18, r10
     d70:	3b 2d       	mov	r19, r11
     d72:	4c 2d       	mov	r20, r12
     d74:	5d 2d       	mov	r21, r13
     d76:	6e 2d       	mov	r22, r14
     d78:	7f 2d       	mov	r23, r15
     d7a:	80 2f       	mov	r24, r16
     d7c:	91 2f       	mov	r25, r17
     d7e:	e2 2f       	mov	r30, r18
     d80:	ef 70       	andi	r30, 0x0F	; 15
     d82:	2e 96       	adiw	r28, 0x0e	; 14
     d84:	ef af       	std	Y+63, r30	; 0x3f
     d86:	2e 97       	sbiw	r28, 0x0e	; 14
     d88:	e3 2f       	mov	r30, r19
     d8a:	e0 70       	andi	r30, 0x00	; 0
     d8c:	2f 96       	adiw	r28, 0x0f	; 15
     d8e:	ef af       	std	Y+63, r30	; 0x3f
     d90:	2f 97       	sbiw	r28, 0x0f	; 15
     d92:	e4 2f       	mov	r30, r20
     d94:	e0 70       	andi	r30, 0x00	; 0
     d96:	60 96       	adiw	r28, 0x10	; 16
     d98:	ef af       	std	Y+63, r30	; 0x3f
     d9a:	60 97       	sbiw	r28, 0x10	; 16
     d9c:	e5 2f       	mov	r30, r21
     d9e:	e0 70       	andi	r30, 0x00	; 0
     da0:	61 96       	adiw	r28, 0x11	; 17
     da2:	ef af       	std	Y+63, r30	; 0x3f
     da4:	61 97       	sbiw	r28, 0x11	; 17
     da6:	e6 2f       	mov	r30, r22
     da8:	e0 70       	andi	r30, 0x00	; 0
     daa:	62 96       	adiw	r28, 0x12	; 18
     dac:	ef af       	std	Y+63, r30	; 0x3f
     dae:	62 97       	sbiw	r28, 0x12	; 18
     db0:	e7 2f       	mov	r30, r23
     db2:	e0 70       	andi	r30, 0x00	; 0
     db4:	63 96       	adiw	r28, 0x13	; 19
     db6:	ef af       	std	Y+63, r30	; 0x3f
     db8:	63 97       	sbiw	r28, 0x13	; 19
     dba:	e8 2f       	mov	r30, r24
     dbc:	e0 70       	andi	r30, 0x00	; 0
     dbe:	64 96       	adiw	r28, 0x14	; 20
     dc0:	ef af       	std	Y+63, r30	; 0x3f
     dc2:	64 97       	sbiw	r28, 0x14	; 20
     dc4:	e9 2f       	mov	r30, r25
     dc6:	e0 70       	andi	r30, 0x00	; 0
     dc8:	65 96       	adiw	r28, 0x15	; 21
     dca:	ef af       	std	Y+63, r30	; 0x3f
     dcc:	65 97       	sbiw	r28, 0x15	; 21
     dce:	2e 96       	adiw	r28, 0x0e	; 14
     dd0:	8f ad       	ldd	r24, Y+63	; 0x3f
     dd2:	2e 97       	sbiw	r28, 0x0e	; 14
     dd4:	8c 30       	cpi	r24, 0x0C	; 12
     dd6:	21 f5       	brne	.+72     	; 0xe20 <Convert_uint64_to_String+0x136>
     dd8:	2f 96       	adiw	r28, 0x0f	; 15
     dda:	ef ad       	ldd	r30, Y+63	; 0x3f
     ddc:	2f 97       	sbiw	r28, 0x0f	; 15
     dde:	ee 23       	and	r30, r30
     de0:	f9 f4       	brne	.+62     	; 0xe20 <Convert_uint64_to_String+0x136>
     de2:	60 96       	adiw	r28, 0x10	; 16
     de4:	8f ad       	ldd	r24, Y+63	; 0x3f
     de6:	60 97       	sbiw	r28, 0x10	; 16
     de8:	88 23       	and	r24, r24
     dea:	d1 f4       	brne	.+52     	; 0xe20 <Convert_uint64_to_String+0x136>
     dec:	61 96       	adiw	r28, 0x11	; 17
     dee:	ef ad       	ldd	r30, Y+63	; 0x3f
     df0:	61 97       	sbiw	r28, 0x11	; 17
     df2:	ee 23       	and	r30, r30
     df4:	a9 f4       	brne	.+42     	; 0xe20 <Convert_uint64_to_String+0x136>
     df6:	62 96       	adiw	r28, 0x12	; 18
     df8:	8f ad       	ldd	r24, Y+63	; 0x3f
     dfa:	62 97       	sbiw	r28, 0x12	; 18
     dfc:	88 23       	and	r24, r24
     dfe:	81 f4       	brne	.+32     	; 0xe20 <Convert_uint64_to_String+0x136>
     e00:	63 96       	adiw	r28, 0x13	; 19
     e02:	ef ad       	ldd	r30, Y+63	; 0x3f
     e04:	63 97       	sbiw	r28, 0x13	; 19
     e06:	ee 23       	and	r30, r30
     e08:	59 f4       	brne	.+22     	; 0xe20 <Convert_uint64_to_String+0x136>
     e0a:	64 96       	adiw	r28, 0x14	; 20
     e0c:	8f ad       	ldd	r24, Y+63	; 0x3f
     e0e:	64 97       	sbiw	r28, 0x14	; 20
     e10:	88 23       	and	r24, r24
     e12:	31 f4       	brne	.+12     	; 0xe20 <Convert_uint64_to_String+0x136>
     e14:	65 96       	adiw	r28, 0x15	; 21
     e16:	ef ad       	ldd	r30, Y+63	; 0x3f
     e18:	65 97       	sbiw	r28, 0x15	; 21
     e1a:	ee 23       	and	r30, r30
     e1c:	09 f4       	brne	.+2      	; 0xe20 <Convert_uint64_to_String+0x136>
     e1e:	1a c1       	rjmp	.+564    	; 0x1054 <Convert_uint64_to_String+0x36a>
     e20:	2e 96       	adiw	r28, 0x0e	; 14
     e22:	2f ad       	ldd	r18, Y+63	; 0x3f
     e24:	2e 97       	sbiw	r28, 0x0e	; 14
     e26:	2f 96       	adiw	r28, 0x0f	; 15
     e28:	3f ad       	ldd	r19, Y+63	; 0x3f
     e2a:	2f 97       	sbiw	r28, 0x0f	; 15
     e2c:	60 96       	adiw	r28, 0x10	; 16
     e2e:	4f ad       	ldd	r20, Y+63	; 0x3f
     e30:	60 97       	sbiw	r28, 0x10	; 16
     e32:	61 96       	adiw	r28, 0x11	; 17
     e34:	5f ad       	ldd	r21, Y+63	; 0x3f
     e36:	61 97       	sbiw	r28, 0x11	; 17
     e38:	62 96       	adiw	r28, 0x12	; 18
     e3a:	6f ad       	ldd	r22, Y+63	; 0x3f
     e3c:	62 97       	sbiw	r28, 0x12	; 18
     e3e:	63 96       	adiw	r28, 0x13	; 19
     e40:	7f ad       	ldd	r23, Y+63	; 0x3f
     e42:	63 97       	sbiw	r28, 0x13	; 19
     e44:	64 96       	adiw	r28, 0x14	; 20
     e46:	8f ad       	ldd	r24, Y+63	; 0x3f
     e48:	64 97       	sbiw	r28, 0x14	; 20
     e4a:	65 96       	adiw	r28, 0x15	; 21
     e4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e4e:	65 97       	sbiw	r28, 0x15	; 21
     e50:	0f 2e       	mov	r0, r31
     e52:	fc e0       	ldi	r31, 0x0C	; 12
     e54:	af 2e       	mov	r10, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	bb 24       	eor	r11, r11
     e5a:	cc 24       	eor	r12, r12
     e5c:	dd 24       	eor	r13, r13
     e5e:	ee 24       	eor	r14, r14
     e60:	ff 24       	eor	r15, r15
     e62:	00 e0       	ldi	r16, 0x00	; 0
     e64:	10 e0       	ldi	r17, 0x00	; 0
     e66:	0e 94 c8 00 	call	0x190	; 0x190 <__ucmpdi2>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <Convert_uint64_to_String+0x186>
     e6e:	5a c0       	rjmp	.+180    	; 0xf24 <Convert_uint64_to_String+0x23a>
     e70:	2e 96       	adiw	r28, 0x0e	; 14
     e72:	8f ad       	ldd	r24, Y+63	; 0x3f
     e74:	2e 97       	sbiw	r28, 0x0e	; 14
     e76:	8a 30       	cpi	r24, 0x0A	; 10
     e78:	21 f5       	brne	.+72     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     e7a:	2f 96       	adiw	r28, 0x0f	; 15
     e7c:	ef ad       	ldd	r30, Y+63	; 0x3f
     e7e:	2f 97       	sbiw	r28, 0x0f	; 15
     e80:	ee 23       	and	r30, r30
     e82:	f9 f4       	brne	.+62     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     e84:	60 96       	adiw	r28, 0x10	; 16
     e86:	8f ad       	ldd	r24, Y+63	; 0x3f
     e88:	60 97       	sbiw	r28, 0x10	; 16
     e8a:	88 23       	and	r24, r24
     e8c:	d1 f4       	brne	.+52     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     e8e:	61 96       	adiw	r28, 0x11	; 17
     e90:	ef ad       	ldd	r30, Y+63	; 0x3f
     e92:	61 97       	sbiw	r28, 0x11	; 17
     e94:	ee 23       	and	r30, r30
     e96:	a9 f4       	brne	.+42     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     e98:	62 96       	adiw	r28, 0x12	; 18
     e9a:	8f ad       	ldd	r24, Y+63	; 0x3f
     e9c:	62 97       	sbiw	r28, 0x12	; 18
     e9e:	88 23       	and	r24, r24
     ea0:	81 f4       	brne	.+32     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     ea2:	63 96       	adiw	r28, 0x13	; 19
     ea4:	ef ad       	ldd	r30, Y+63	; 0x3f
     ea6:	63 97       	sbiw	r28, 0x13	; 19
     ea8:	ee 23       	and	r30, r30
     eaa:	59 f4       	brne	.+22     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     eac:	64 96       	adiw	r28, 0x14	; 20
     eae:	8f ad       	ldd	r24, Y+63	; 0x3f
     eb0:	64 97       	sbiw	r28, 0x14	; 20
     eb2:	88 23       	and	r24, r24
     eb4:	31 f4       	brne	.+12     	; 0xec2 <Convert_uint64_to_String+0x1d8>
     eb6:	65 96       	adiw	r28, 0x15	; 21
     eb8:	ef ad       	ldd	r30, Y+63	; 0x3f
     eba:	65 97       	sbiw	r28, 0x15	; 21
     ebc:	ee 23       	and	r30, r30
     ebe:	09 f4       	brne	.+2      	; 0xec2 <Convert_uint64_to_String+0x1d8>
     ec0:	b3 c0       	rjmp	.+358    	; 0x1028 <Convert_uint64_to_String+0x33e>
     ec2:	2e 96       	adiw	r28, 0x0e	; 14
     ec4:	8f ad       	ldd	r24, Y+63	; 0x3f
     ec6:	2e 97       	sbiw	r28, 0x0e	; 14
     ec8:	8b 30       	cpi	r24, 0x0B	; 11
     eca:	09 f0       	breq	.+2      	; 0xece <Convert_uint64_to_String+0x1e4>
     ecc:	ef c0       	rjmp	.+478    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     ece:	2f 96       	adiw	r28, 0x0f	; 15
     ed0:	ef ad       	ldd	r30, Y+63	; 0x3f
     ed2:	2f 97       	sbiw	r28, 0x0f	; 15
     ed4:	ee 23       	and	r30, r30
     ed6:	09 f0       	breq	.+2      	; 0xeda <Convert_uint64_to_String+0x1f0>
     ed8:	e9 c0       	rjmp	.+466    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     eda:	60 96       	adiw	r28, 0x10	; 16
     edc:	8f ad       	ldd	r24, Y+63	; 0x3f
     ede:	60 97       	sbiw	r28, 0x10	; 16
     ee0:	88 23       	and	r24, r24
     ee2:	09 f0       	breq	.+2      	; 0xee6 <Convert_uint64_to_String+0x1fc>
     ee4:	e3 c0       	rjmp	.+454    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     ee6:	61 96       	adiw	r28, 0x11	; 17
     ee8:	ef ad       	ldd	r30, Y+63	; 0x3f
     eea:	61 97       	sbiw	r28, 0x11	; 17
     eec:	ee 23       	and	r30, r30
     eee:	09 f0       	breq	.+2      	; 0xef2 <Convert_uint64_to_String+0x208>
     ef0:	dd c0       	rjmp	.+442    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     ef2:	62 96       	adiw	r28, 0x12	; 18
     ef4:	8f ad       	ldd	r24, Y+63	; 0x3f
     ef6:	62 97       	sbiw	r28, 0x12	; 18
     ef8:	88 23       	and	r24, r24
     efa:	09 f0       	breq	.+2      	; 0xefe <Convert_uint64_to_String+0x214>
     efc:	d7 c0       	rjmp	.+430    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     efe:	63 96       	adiw	r28, 0x13	; 19
     f00:	ef ad       	ldd	r30, Y+63	; 0x3f
     f02:	63 97       	sbiw	r28, 0x13	; 19
     f04:	ee 23       	and	r30, r30
     f06:	09 f0       	breq	.+2      	; 0xf0a <Convert_uint64_to_String+0x220>
     f08:	d1 c0       	rjmp	.+418    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     f0a:	64 96       	adiw	r28, 0x14	; 20
     f0c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f0e:	64 97       	sbiw	r28, 0x14	; 20
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <Convert_uint64_to_String+0x22c>
     f14:	cb c0       	rjmp	.+406    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     f16:	65 96       	adiw	r28, 0x15	; 21
     f18:	ef ad       	ldd	r30, Y+63	; 0x3f
     f1a:	65 97       	sbiw	r28, 0x15	; 21
     f1c:	ee 23       	and	r30, r30
     f1e:	09 f0       	breq	.+2      	; 0xf22 <Convert_uint64_to_String+0x238>
     f20:	c5 c0       	rjmp	.+394    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     f22:	8d c0       	rjmp	.+282    	; 0x103e <Convert_uint64_to_String+0x354>
     f24:	2e 96       	adiw	r28, 0x0e	; 14
     f26:	8f ad       	ldd	r24, Y+63	; 0x3f
     f28:	2e 97       	sbiw	r28, 0x0e	; 14
     f2a:	8e 30       	cpi	r24, 0x0E	; 14
     f2c:	21 f5       	brne	.+72     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f2e:	2f 96       	adiw	r28, 0x0f	; 15
     f30:	ef ad       	ldd	r30, Y+63	; 0x3f
     f32:	2f 97       	sbiw	r28, 0x0f	; 15
     f34:	ee 23       	and	r30, r30
     f36:	f9 f4       	brne	.+62     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f38:	60 96       	adiw	r28, 0x10	; 16
     f3a:	8f ad       	ldd	r24, Y+63	; 0x3f
     f3c:	60 97       	sbiw	r28, 0x10	; 16
     f3e:	88 23       	and	r24, r24
     f40:	d1 f4       	brne	.+52     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f42:	61 96       	adiw	r28, 0x11	; 17
     f44:	ef ad       	ldd	r30, Y+63	; 0x3f
     f46:	61 97       	sbiw	r28, 0x11	; 17
     f48:	ee 23       	and	r30, r30
     f4a:	a9 f4       	brne	.+42     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f4c:	62 96       	adiw	r28, 0x12	; 18
     f4e:	8f ad       	ldd	r24, Y+63	; 0x3f
     f50:	62 97       	sbiw	r28, 0x12	; 18
     f52:	88 23       	and	r24, r24
     f54:	81 f4       	brne	.+32     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f56:	63 96       	adiw	r28, 0x13	; 19
     f58:	ef ad       	ldd	r30, Y+63	; 0x3f
     f5a:	63 97       	sbiw	r28, 0x13	; 19
     f5c:	ee 23       	and	r30, r30
     f5e:	59 f4       	brne	.+22     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f60:	64 96       	adiw	r28, 0x14	; 20
     f62:	8f ad       	ldd	r24, Y+63	; 0x3f
     f64:	64 97       	sbiw	r28, 0x14	; 20
     f66:	88 23       	and	r24, r24
     f68:	31 f4       	brne	.+12     	; 0xf76 <Convert_uint64_to_String+0x28c>
     f6a:	65 96       	adiw	r28, 0x15	; 21
     f6c:	ef ad       	ldd	r30, Y+63	; 0x3f
     f6e:	65 97       	sbiw	r28, 0x15	; 21
     f70:	ee 23       	and	r30, r30
     f72:	09 f4       	brne	.+2      	; 0xf76 <Convert_uint64_to_String+0x28c>
     f74:	85 c0       	rjmp	.+266    	; 0x1080 <Convert_uint64_to_String+0x396>
     f76:	2e 96       	adiw	r28, 0x0e	; 14
     f78:	2f ad       	ldd	r18, Y+63	; 0x3f
     f7a:	2e 97       	sbiw	r28, 0x0e	; 14
     f7c:	2f 96       	adiw	r28, 0x0f	; 15
     f7e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f80:	2f 97       	sbiw	r28, 0x0f	; 15
     f82:	60 96       	adiw	r28, 0x10	; 16
     f84:	4f ad       	ldd	r20, Y+63	; 0x3f
     f86:	60 97       	sbiw	r28, 0x10	; 16
     f88:	61 96       	adiw	r28, 0x11	; 17
     f8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f8c:	61 97       	sbiw	r28, 0x11	; 17
     f8e:	62 96       	adiw	r28, 0x12	; 18
     f90:	6f ad       	ldd	r22, Y+63	; 0x3f
     f92:	62 97       	sbiw	r28, 0x12	; 18
     f94:	63 96       	adiw	r28, 0x13	; 19
     f96:	7f ad       	ldd	r23, Y+63	; 0x3f
     f98:	63 97       	sbiw	r28, 0x13	; 19
     f9a:	64 96       	adiw	r28, 0x14	; 20
     f9c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f9e:	64 97       	sbiw	r28, 0x14	; 20
     fa0:	65 96       	adiw	r28, 0x15	; 21
     fa2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fa4:	65 97       	sbiw	r28, 0x15	; 21
     fa6:	0f 2e       	mov	r0, r31
     fa8:	fe e0       	ldi	r31, 0x0E	; 14
     faa:	af 2e       	mov	r10, r31
     fac:	f0 2d       	mov	r31, r0
     fae:	bb 24       	eor	r11, r11
     fb0:	cc 24       	eor	r12, r12
     fb2:	dd 24       	eor	r13, r13
     fb4:	ee 24       	eor	r14, r14
     fb6:	ff 24       	eor	r15, r15
     fb8:	00 e0       	ldi	r16, 0x00	; 0
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	0e 94 c8 00 	call	0x190	; 0x190 <__ucmpdi2>
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	08 f4       	brcc	.+2      	; 0xfc6 <Convert_uint64_to_String+0x2dc>
     fc4:	52 c0       	rjmp	.+164    	; 0x106a <Convert_uint64_to_String+0x380>
     fc6:	2e 96       	adiw	r28, 0x0e	; 14
     fc8:	8f ad       	ldd	r24, Y+63	; 0x3f
     fca:	2e 97       	sbiw	r28, 0x0e	; 14
     fcc:	8f 30       	cpi	r24, 0x0F	; 15
     fce:	09 f0       	breq	.+2      	; 0xfd2 <Convert_uint64_to_String+0x2e8>
     fd0:	6d c0       	rjmp	.+218    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     fd2:	2f 96       	adiw	r28, 0x0f	; 15
     fd4:	ef ad       	ldd	r30, Y+63	; 0x3f
     fd6:	2f 97       	sbiw	r28, 0x0f	; 15
     fd8:	ee 23       	and	r30, r30
     fda:	09 f0       	breq	.+2      	; 0xfde <Convert_uint64_to_String+0x2f4>
     fdc:	67 c0       	rjmp	.+206    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     fde:	60 96       	adiw	r28, 0x10	; 16
     fe0:	8f ad       	ldd	r24, Y+63	; 0x3f
     fe2:	60 97       	sbiw	r28, 0x10	; 16
     fe4:	88 23       	and	r24, r24
     fe6:	09 f0       	breq	.+2      	; 0xfea <Convert_uint64_to_String+0x300>
     fe8:	61 c0       	rjmp	.+194    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     fea:	61 96       	adiw	r28, 0x11	; 17
     fec:	ef ad       	ldd	r30, Y+63	; 0x3f
     fee:	61 97       	sbiw	r28, 0x11	; 17
     ff0:	ee 23       	and	r30, r30
     ff2:	09 f0       	breq	.+2      	; 0xff6 <Convert_uint64_to_String+0x30c>
     ff4:	5b c0       	rjmp	.+182    	; 0x10ac <Convert_uint64_to_String+0x3c2>
     ff6:	62 96       	adiw	r28, 0x12	; 18
     ff8:	8f ad       	ldd	r24, Y+63	; 0x3f
     ffa:	62 97       	sbiw	r28, 0x12	; 18
     ffc:	88 23       	and	r24, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <Convert_uint64_to_String+0x318>
    1000:	55 c0       	rjmp	.+170    	; 0x10ac <Convert_uint64_to_String+0x3c2>
    1002:	63 96       	adiw	r28, 0x13	; 19
    1004:	ef ad       	ldd	r30, Y+63	; 0x3f
    1006:	63 97       	sbiw	r28, 0x13	; 19
    1008:	ee 23       	and	r30, r30
    100a:	09 f0       	breq	.+2      	; 0x100e <Convert_uint64_to_String+0x324>
    100c:	4f c0       	rjmp	.+158    	; 0x10ac <Convert_uint64_to_String+0x3c2>
    100e:	64 96       	adiw	r28, 0x14	; 20
    1010:	8f ad       	ldd	r24, Y+63	; 0x3f
    1012:	64 97       	sbiw	r28, 0x14	; 20
    1014:	88 23       	and	r24, r24
    1016:	09 f0       	breq	.+2      	; 0x101a <Convert_uint64_to_String+0x330>
    1018:	49 c0       	rjmp	.+146    	; 0x10ac <Convert_uint64_to_String+0x3c2>
    101a:	65 96       	adiw	r28, 0x15	; 21
    101c:	ef ad       	ldd	r30, Y+63	; 0x3f
    101e:	65 97       	sbiw	r28, 0x15	; 21
    1020:	ee 23       	and	r30, r30
    1022:	09 f0       	breq	.+2      	; 0x1026 <Convert_uint64_to_String+0x33c>
    1024:	43 c0       	rjmp	.+134    	; 0x10ac <Convert_uint64_to_String+0x3c2>
    1026:	37 c0       	rjmp	.+110    	; 0x1096 <Convert_uint64_to_String+0x3ac>
        {
            case 0x0A : 
                String_t[it] = 'A';
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	ce 01       	movw	r24, r28
    1030:	03 96       	adiw	r24, 0x03	; 3
    1032:	fc 01       	movw	r30, r24
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	81 e4       	ldi	r24, 0x41	; 65
    103a:	80 83       	st	Z, r24
    103c:	65 c0       	rjmp	.+202    	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0B :
                String_t[it] = 'B';
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	ce 01       	movw	r24, r28
    1046:	03 96       	adiw	r24, 0x03	; 3
    1048:	fc 01       	movw	r30, r24
    104a:	e2 0f       	add	r30, r18
    104c:	f3 1f       	adc	r31, r19
    104e:	82 e4       	ldi	r24, 0x42	; 66
    1050:	80 83       	st	Z, r24
    1052:	5a c0       	rjmp	.+180    	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0C :
                String_t[it] = 'C';
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	ce 01       	movw	r24, r28
    105c:	03 96       	adiw	r24, 0x03	; 3
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	83 e4       	ldi	r24, 0x43	; 67
    1066:	80 83       	st	Z, r24
    1068:	4f c0       	rjmp	.+158    	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0D :
                String_t[it] = 'D';
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	03 96       	adiw	r24, 0x03	; 3
    1074:	fc 01       	movw	r30, r24
    1076:	e2 0f       	add	r30, r18
    1078:	f3 1f       	adc	r31, r19
    107a:	84 e4       	ldi	r24, 0x44	; 68
    107c:	80 83       	st	Z, r24
    107e:	44 c0       	rjmp	.+136    	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0E :
                String_t[it] = 'E';
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	03 96       	adiw	r24, 0x03	; 3
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	85 e4       	ldi	r24, 0x45	; 69
    1092:	80 83       	st	Z, r24
    1094:	39 c0       	rjmp	.+114    	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0F :
                String_t[it] = 'F';
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	ce 01       	movw	r24, r28
    109e:	03 96       	adiw	r24, 0x03	; 3
    10a0:	fc 01       	movw	r30, r24
    10a2:	e2 0f       	add	r30, r18
    10a4:	f3 1f       	adc	r31, r19
    10a6:	86 e4       	ldi	r24, 0x46	; 70
    10a8:	80 83       	st	Z, r24
    10aa:	2e c0       	rjmp	.+92     	; 0x1108 <Convert_uint64_to_String+0x41e>
            break ;

            default :
                String_t[it] = ( ( (var >> index) & 0x0F ) | 0x30 ); // to convert 0 from decimal to hexa
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	88 2e       	mov	r8, r24
    10b0:	99 24       	eor	r9, r9
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	a8 2f       	mov	r26, r24
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	fe 01       	movw	r30, r28
    10ba:	ed 5b       	subi	r30, 0xBD	; 189
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	20 81       	ld	r18, Z
    10c0:	31 81       	ldd	r19, Z+1	; 0x01
    10c2:	42 81       	ldd	r20, Z+2	; 0x02
    10c4:	53 81       	ldd	r21, Z+3	; 0x03
    10c6:	64 81       	ldd	r22, Z+4	; 0x04
    10c8:	75 81       	ldd	r23, Z+5	; 0x05
    10ca:	86 81       	ldd	r24, Z+6	; 0x06
    10cc:	97 81       	ldd	r25, Z+7	; 0x07
    10ce:	0a 2f       	mov	r16, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    10d4:	a2 2e       	mov	r10, r18
    10d6:	b3 2e       	mov	r11, r19
    10d8:	c4 2e       	mov	r12, r20
    10da:	d5 2e       	mov	r13, r21
    10dc:	e6 2e       	mov	r14, r22
    10de:	f7 2e       	mov	r15, r23
    10e0:	08 2f       	mov	r16, r24
    10e2:	19 2f       	mov	r17, r25
    10e4:	2a 2d       	mov	r18, r10
    10e6:	3b 2d       	mov	r19, r11
    10e8:	4c 2d       	mov	r20, r12
    10ea:	5d 2d       	mov	r21, r13
    10ec:	6e 2d       	mov	r22, r14
    10ee:	7f 2d       	mov	r23, r15
    10f0:	80 2f       	mov	r24, r16
    10f2:	91 2f       	mov	r25, r17
    10f4:	82 2f       	mov	r24, r18
    10f6:	8f 70       	andi	r24, 0x0F	; 15
    10f8:	28 2f       	mov	r18, r24
    10fa:	20 63       	ori	r18, 0x30	; 48
    10fc:	ce 01       	movw	r24, r28
    10fe:	03 96       	adiw	r24, 0x03	; 3
    1100:	fc 01       	movw	r30, r24
    1102:	e8 0d       	add	r30, r8
    1104:	f9 1d       	adc	r31, r9
    1106:	20 83       	st	Z, r18
            break;
        }

        index -= 4;
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	84 50       	subi	r24, 0x04	; 4
    110c:	8a 83       	std	Y+2, r24	; 0x02
void Convert_uint64_to_String(uint64 var , uint8 * String)
{
    uint8 index = 60 ; /*   As I will take last 4 bytes and convert them to Hexa Decemal  */
    uint8 String_t[64];
    uint8 it = 0 ;
    for( ; it < 16; it++)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	08 f4       	brcc	.+2      	; 0x111c <Convert_uint64_to_String+0x432>
    111a:	10 ce       	rjmp	.-992    	; 0xd3c <Convert_uint64_to_String+0x52>

        index -= 4;
    }


    it =0 ;
    111c:	19 82       	std	Y+1, r1	; 0x01
    index = 0 ;
    111e:	1a 82       	std	Y+2, r1	; 0x02
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <Convert_uint64_to_String+0x43e>
    while(String_t[it] == '0')
    {
        it ++;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	89 83       	std	Y+1, r24	; 0x01
    }


    it =0 ;
    index = 0 ;
    while(String_t[it] == '0')
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	ce 01       	movw	r24, r28
    1130:	03 96       	adiw	r24, 0x03	; 3
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	80 81       	ld	r24, Z
    113a:	80 33       	cpi	r24, 0x30	; 48
    113c:	91 f3       	breq	.-28     	; 0x1122 <Convert_uint64_to_String+0x438>
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <Convert_uint64_to_String+0x48c>
        it ++;
    }

    while(it < 16)
    {
        String[index] = String_t[it];
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	fe 01       	movw	r30, r28
    1148:	e5 5b       	subi	r30, 0xB5	; 181
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	dc 01       	movw	r26, r24
    1152:	a2 0f       	add	r26, r18
    1154:	b3 1f       	adc	r27, r19
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	ce 01       	movw	r24, r28
    115e:	03 96       	adiw	r24, 0x03	; 3
    1160:	fc 01       	movw	r30, r24
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	80 81       	ld	r24, Z
    1168:	8c 93       	st	X, r24
        it++ , index++ ; 
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	8a 83       	std	Y+2, r24	; 0x02
    while(String_t[it] == '0')
    {
        it ++;
    }

    while(it < 16)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	80 31       	cpi	r24, 0x10	; 16
    117a:	10 f3       	brcs	.-60     	; 0x1140 <Convert_uint64_to_String+0x456>
    {
        String[index] = String_t[it];
        it++ , index++ ; 
    }
    String[index] = '\0';
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	fe 01       	movw	r30, r28
    1184:	e5 5b       	subi	r30, 0xB5	; 181
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	fc 01       	movw	r30, r24
    118e:	e2 0f       	add	r30, r18
    1190:	f3 1f       	adc	r31, r19
    1192:	10 82       	st	Z, r1

}
    1194:	cc 5a       	subi	r28, 0xAC	; 172
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	08 95       	ret

000011bc <__vector_13>:

static volatile void (*g_CallBackPtr_Receive_USART)(void) = NULL_PTR;


ISR(USART_RXC)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_Receive_USART != NULL_PTR)
    11e6:	80 91 22 03 	lds	r24, 0x0322
    11ea:	90 91 23 03 	lds	r25, 0x0323
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	29 f0       	breq	.+10     	; 0x11fc <__vector_13+0x40>
    {
        g_CallBackPtr_Receive_USART();
    11f2:	e0 91 22 03 	lds	r30, 0x0322
    11f6:	f0 91 23 03 	lds	r31, 0x0323
    11fa:	09 95       	icall
    }
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <USART_Init>:

void USART_Init(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
        /* configue ability of transmit and recieve  */
    if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Transmit_Only)
    122a:	80 91 a2 02 	lds	r24, 0x02A2
    122e:	88 23       	and	r24, r24
    1230:	41 f4       	brne	.+16     	; 0x1242 <USART_Init+0x20>
    {
        SET_BIT(UCSRB,TXEN);
    1232:	aa e2       	ldi	r26, 0x2A	; 42
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ea e2       	ldi	r30, 0x2A	; 42
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 60       	ori	r24, 0x08	; 8
    123e:	8c 93       	st	X, r24
    1240:	1e c0       	rjmp	.+60     	; 0x127e <USART_Init+0x5c>
    }
    else if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Receive_Only)
    1242:	80 91 a2 02 	lds	r24, 0x02A2
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	41 f4       	brne	.+16     	; 0x125a <USART_Init+0x38>
    {
        SET_BIT(UCSRB,RXEN);
    124a:	aa e2       	ldi	r26, 0x2A	; 42
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e2       	ldi	r30, 0x2A	; 42
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 61       	ori	r24, 0x10	; 16
    1256:	8c 93       	st	X, r24
    1258:	12 c0       	rjmp	.+36     	; 0x127e <USART_Init+0x5c>
    }
    else if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Transmit_Receive)
    125a:	80 91 a2 02 	lds	r24, 0x02A2
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	71 f4       	brne	.+28     	; 0x127e <USART_Init+0x5c>
    {
        SET_BIT(UCSRB,RXEN);
    1262:	aa e2       	ldi	r26, 0x2A	; 42
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ea e2       	ldi	r30, 0x2A	; 42
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	8c 93       	st	X, r24
        SET_BIT(UCSRB,TXEN);
    1270:	aa e2       	ldi	r26, 0x2A	; 42
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e2       	ldi	r30, 0x2A	; 42
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	8c 93       	st	X, r24
    }
    #if(USART_CURRENT_MODE == USART_Asynchronous_Normal_Speed)
    /*  SEt Asynchronous mode & parity & stop & data setting */
    UCSRC = (1 << URSEL) | (USART_ConfigTypeParam.USART_Parity_value << UPM0) | (USART_ConfigTypeParam.USART_NUM_STOP_Bit_value << USBS) | ((USART_ConfigTypeParam.USART_DATA_Bit_value ) << UCSZ0);
    127e:	e0 e4       	ldi	r30, 0x40	; 64
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 91 a0 02 	lds	r24, 0x02A0
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	82 95       	swap	r24
    128c:	92 95       	swap	r25
    128e:	90 7f       	andi	r25, 0xF0	; 240
    1290:	98 27       	eor	r25, r24
    1292:	80 7f       	andi	r24, 0xF0	; 240
    1294:	98 27       	eor	r25, r24
    1296:	28 2f       	mov	r18, r24
    1298:	20 68       	ori	r18, 0x80	; 128
    129a:	80 91 a1 02 	lds	r24, 0x02A1
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	28 2b       	or	r18, r24
    12b0:	80 91 9f 02 	lds	r24, 0x029F
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 2b       	or	r24, r18
    12be:	80 83       	st	Z, r24
    /*  Set 9 data bit if exist in setting in config.c*/
    UCSRB = (UCSRB & 0xFB) | ((USART_ConfigTypeParam.USART_DATA_Bit_value & 0x04) << UCSZ2) ;
    12c0:	aa e2       	ldi	r26, 0x2A	; 42
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ea e2       	ldi	r30, 0x2A	; 42
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	2b 7f       	andi	r18, 0xFB	; 251
    12ce:	80 91 9f 02 	lds	r24, 0x029F
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	84 70       	andi	r24, 0x04	; 4
    12d8:	90 70       	andi	r25, 0x00	; 0
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	82 2b       	or	r24, r18
    12e4:	8c 93       	st	X, r24
    /*  Set 9 data bit if exist in setting in config.c*/
    UCSRB = (UCSRB & 0xFB) | ((USART_ConfigTypeParam.USART_DATA_Bit_value & 0x04) << UCSZ2) ;
    #endif

    /*  setting value of UBRR  */
    UBRRH = ((USART_ConfigTypeParam.UBRR_value >> 8));
    12e6:	e0 e4       	ldi	r30, 0x40	; 64
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 91 a3 02 	lds	r24, 0x02A3
    12ee:	90 91 a4 02 	lds	r25, 0x02A4
    12f2:	89 2f       	mov	r24, r25
    12f4:	99 27       	eor	r25, r25
    12f6:	80 83       	st	Z, r24
    UBRRL = (uint8)(USART_ConfigTypeParam.UBRR_value )  ; /* take only low * bits*/
    12f8:	e9 e2       	ldi	r30, 0x29	; 41
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 91 a3 02 	lds	r24, 0x02A3
    1300:	90 91 a4 02 	lds	r25, 0x02A4
    1304:	80 83       	st	Z, r24
    // if(USART_ConfigTypeParam.UBRR_value > 0xFF)
    // {
    //     UBRRH = (~(1 << URSEL)) | ((USART_ConfigTypeParam.UBRR_value >> 8) & 0x0F);
    // }

}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <USART_SendBytePolling>:


void USART_SendBytePolling(uint16 send_data)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <USART_SendBytePolling+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
    while(BIT_IS_CLEAR(UCSRA,UDRE));
    131a:	eb e2       	ldi	r30, 0x2B	; 43
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	80 72       	andi	r24, 0x20	; 32
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	b9 f3       	breq	.-18     	; 0x131a <USART_SendBytePolling+0xe>
    /*  Should set value of 9th bit  of data if exist before setting value of UDR*/
    if(send_data & 0x0100)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	80 70       	andi	r24, 0x00	; 0
    1332:	91 70       	andi	r25, 0x01	; 1
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	41 f0       	breq	.+16     	; 0x1348 <USART_SendBytePolling+0x3c>
        SET_BIT(UCSRB,TXB8);
    1338:	aa e2       	ldi	r26, 0x2A	; 42
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ea e2       	ldi	r30, 0x2A	; 42
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	8c 93       	st	X, r24
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <USART_SendBytePolling+0x4a>
    else
        CLEAR_BIT(UCSRB,TXB8);
    1348:	aa e2       	ldi	r26, 0x2A	; 42
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ea e2       	ldi	r30, 0x2A	; 42
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	8e 7f       	andi	r24, 0xFE	; 254
    1354:	8c 93       	st	X, r24

    /*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
    UDR = (uint8)(send_data & 0x00FF);
    1356:	ec e2       	ldi	r30, 0x2C	; 44
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	80 83       	st	Z, r24
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <USART_ReceiveBytePolling>:


uint16 USART_ReceiveBytePolling(void)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <USART_ReceiveBytePolling+0x6>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    uint16 Returned_value = 0;
    1372:	1a 82       	std	Y+2, r1	; 0x02
    1374:	19 82       	std	Y+1, r1	; 0x01

    /*  Will wait until receive data */
    /*  So you stuck here call this function and there are not MCU send Data for you*/
    while(BIT_IS_CLEAR(UCSRA,RXC));
    1376:	eb e2       	ldi	r30, 0x2B	; 43
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	88 23       	and	r24, r24
    137e:	dc f7       	brge	.-10     	; 0x1376 <USART_ReceiveBytePolling+0xe>
    /*  Should read 9th bit of data if use 9 bit data before UDR*/
    Returned_value = ( (UCSRB & 0x02) << 7) ;
    1380:	ea e2       	ldi	r30, 0x2A	; 42
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	82 70       	andi	r24, 0x02	; 2
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	96 95       	lsr	r25
    1390:	98 2f       	mov	r25, r24
    1392:	88 27       	eor	r24, r24
    1394:	97 95       	ror	r25
    1396:	87 95       	ror	r24
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
    Returned_value |= UDR ;
    139c:	ec e2       	ldi	r30, 0x2C	; 44
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	82 2b       	or	r24, r18
    13ac:	93 2b       	or	r25, r19
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    return Returned_value;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <USART_SendStringPolling>:



void USART_SendStringPolling(const uint8 * send_data)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <USART_SendStringPolling+0x6>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	10 c0       	rjmp	.+32     	; 0x13f4 <USART_SendStringPolling+0x34>
    while(send_data[it] != '\0')
    {
        USART_SendBytePolling(send_data[it]);
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	fc 01       	movw	r30, r24
    13e0:	e2 0f       	add	r30, r18
    13e2:	f3 1f       	adc	r31, r19
    13e4:	80 81       	ld	r24, Z
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 86 09 	call	0x130c	; 0x130c <USART_SendBytePolling>
        it++;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	89 83       	std	Y+1, r24	; 0x01


void USART_SendStringPolling(const uint8 * send_data)
{
    uint8 it = 0;
    while(send_data[it] != '\0')
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	fc 01       	movw	r30, r24
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	80 81       	ld	r24, Z
    1406:	88 23       	and	r24, r24
    1408:	29 f7       	brne	.-54     	; 0x13d4 <USART_SendStringPolling+0x14>
    {
        USART_SendBytePolling(send_data[it]);
        it++;
    }
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <USART_ReceiveStringPolling>:


void USART_ReceiveStringPolling(uint8 * receive_data)
{
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <USART_ReceiveStringPolling+0xa>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9b 83       	std	Y+3, r25	; 0x03
    1428:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it =0 ;
    142a:	19 82       	std	Y+1, r1	; 0x01
    receive_data[it] = (uint8)USART_ReceiveBytePolling();
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	8c 01       	movw	r16, r24
    1438:	02 0f       	add	r16, r18
    143a:	13 1f       	adc	r17, r19
    143c:	0e 94 b4 09 	call	0x1368	; 0x1368 <USART_ReceiveBytePolling>
    1440:	f8 01       	movw	r30, r16
    1442:	80 83       	st	Z, r24
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <USART_ReceiveStringPolling+0x4e>
    while(receive_data[it] != '#')
    {
        it++;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	8f 5f       	subi	r24, 0xFF	; 255
    144a:	89 83       	std	Y+1, r24	; 0x01
        receive_data[it] = (uint8)USART_ReceiveBytePolling();
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	8c 01       	movw	r16, r24
    1458:	02 0f       	add	r16, r18
    145a:	13 1f       	adc	r17, r19
    145c:	0e 94 b4 09 	call	0x1368	; 0x1368 <USART_ReceiveBytePolling>
    1460:	f8 01       	movw	r30, r16
    1462:	80 83       	st	Z, r24

void USART_ReceiveStringPolling(uint8 * receive_data)
{
    uint8 it =0 ;
    receive_data[it] = (uint8)USART_ReceiveBytePolling();
    while(receive_data[it] != '#')
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	fc 01       	movw	r30, r24
    1470:	e2 0f       	add	r30, r18
    1472:	f3 1f       	adc	r31, r19
    1474:	80 81       	ld	r24, Z
    1476:	83 32       	cpi	r24, 0x23	; 35
    1478:	31 f7       	brne	.-52     	; 0x1446 <USART_ReceiveStringPolling+0x30>
    {
        it++;
        receive_data[it] = (uint8)USART_ReceiveBytePolling();
    }
    receive_data[it] = '\0';
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	fc 01       	movw	r30, r24
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	10 82       	st	Z, r1
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <USART_EnableReceiveInerrupt>:



void USART_EnableReceiveInerrupt(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB,RXCIE);
    14a4:	aa e2       	ldi	r26, 0x2A	; 42
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ea e2       	ldi	r30, 0x2A	; 42
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	80 68       	ori	r24, 0x80	; 128
    14b0:	8c 93       	st	X, r24
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <USART_receiveByteAsynchCallBack>:



void USART_receiveByteAsynchCallBack(void(*a_ptr)(void))
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <USART_receiveByteAsynchCallBack+0x6>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01

    g_CallBackPtr_Receive_USART = a_ptr;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	90 93 23 03 	sts	0x0323, r25
    14ce:	80 93 22 03 	sts	0x0322, r24
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <USART_receiveStringAsynchCallBack>:

void USART_receiveStringAsynchCallBack(void(*a_ptr)(void))
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <USART_receiveStringAsynchCallBack+0x6>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01

    g_CallBackPtr_Receive_USART = a_ptr;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	90 93 23 03 	sts	0x0323, r25
    14f2:	80 93 22 03 	sts	0x0322, r24
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <USART_Catch_UDR_Value>:




uint16 USART_Catch_UDR_Value(void)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <USART_Catch_UDR_Value+0x6>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    uint16 Returned_value = 0;
    150a:	1a 82       	std	Y+2, r1	; 0x02
    150c:	19 82       	std	Y+1, r1	; 0x01
    /*  Should read 9th bit of data if use 9 bit data before UDR*/
    Returned_value = ( (UCSRB & 0x02) << 7) ;
    150e:	ea e2       	ldi	r30, 0x2A	; 42
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	82 70       	andi	r24, 0x02	; 2
    151a:	90 70       	andi	r25, 0x00	; 0
    151c:	96 95       	lsr	r25
    151e:	98 2f       	mov	r25, r24
    1520:	88 27       	eor	r24, r24
    1522:	97 95       	ror	r25
    1524:	87 95       	ror	r24
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    Returned_value |= UDR ;
    152a:	ec e2       	ldi	r30, 0x2C	; 44
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	82 2b       	or	r24, r18
    153a:	93 2b       	or	r25, r19
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    return Returned_value;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <Timer0_Init>:




void Timer0_Init(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
    1556:	a3 e5       	ldi	r26, 0x53	; 83
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e3 e5       	ldi	r30, 0x53	; 83
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 68       	ori	r24, 0x80	; 128
    1562:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0,WGM00);
    1564:	a3 e5       	ldi	r26, 0x53	; 83
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e3 e5       	ldi	r30, 0x53	; 83
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8f 7b       	andi	r24, 0xBF	; 191
    1570:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,WGM01);
    1572:	a3 e5       	ldi	r26, 0x53	; 83
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e3 e5       	ldi	r30, 0x53	; 83
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	87 7f       	andi	r24, 0xF7	; 247
    157e:	8c 93       	st	X, r24
        SET_BIT(SREG , 7);
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
    #else
        /*  Disable overflow Interrupt  */
        CLEAR_BIT(TIMSK,TOIE0);
    1580:	a9 e5       	ldi	r26, 0x59	; 89
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e9 e5       	ldi	r30, 0x59	; 89
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8e 7f       	andi	r24, 0xFE	; 254
    158c:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timer0_UpdateValue>
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
    15a6:	e2 e5       	ldi	r30, 0x52	; 82
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	80 83       	st	Z, r24
}
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <Timer0_StopClock>:


void Timer0_StopClock(void)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
    15be:	a3 e5       	ldi	r26, 0x53	; 83
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e3 e5       	ldi	r30, 0x53	; 83
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	88 7f       	andi	r24, 0xF8	; 248
    15ca:	8c 93       	st	X, r24
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    15da:	a3 e5       	ldi	r26, 0x53	; 83
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 e5       	ldi	r30, 0x53	; 83
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	98 2f       	mov	r25, r24
    15e6:	98 7f       	andi	r25, 0xF8	; 248
    15e8:	80 91 a5 02 	lds	r24, 0x02A5
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <Timer0_DelayOVFPolling>:
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)

    #if(INTERUPT_STATE_T0 == Disable_Interrupt_T0)

        void Timer0_DelayOVFPolling(void)
        {
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
            Timer0_ProvideClock();
    15fe:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <Timer0_ProvideClock>
            /*  Loop in flag of overflow    */
            while(BIT_IS_CLEAR(TIFR,TOV0));
    1602:	e8 e5       	ldi	r30, 0x58	; 88
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	b9 f3       	breq	.-18     	; 0x1602 <Timer0_DelayOVFPolling+0xc>

            /*  Clear flag by write one  */
            SET_BIT(TIFR,TOV0);
    1614:	a8 e5       	ldi	r26, 0x58	; 88
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e5       	ldi	r30, 0x58	; 88
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
            Timer0_StopClock();
    1622:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Timer0_StopClock>
        }
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	57 c0       	rjmp	.+174    	; 0x16e8 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	c9 01       	movw	r24, r18
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
    164a:	fc 01       	movw	r30, r24
    164c:	e9 55       	subi	r30, 0x59	; 89
    164e:	fd 4f       	sbci	r31, 0xFD	; 253
    1650:	80 81       	ld	r24, Z
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	e9 f4       	brne	.+58     	; 0x1690 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	c9 01       	movw	r24, r18
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	fc 01       	movw	r30, r24
    1668:	ea 55       	subi	r30, 0x5A	; 90
    166a:	fd 4f       	sbci	r31, 0xFD	; 253
    166c:	40 81       	ld	r20, Z
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	c9 01       	movw	r24, r18
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	fc 01       	movw	r30, r24
    1680:	e8 55       	subi	r30, 0x58	; 88
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	90 81       	ld	r25, Z
    1686:	84 2f       	mov	r24, r20
    1688:	69 2f       	mov	r22, r25
    168a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <GPIO_SetPortDirection>
    168e:	29 c0       	rjmp	.+82     	; 0x16e2 <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	c9 01       	movw	r24, r18
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	82 0f       	add	r24, r18
    169e:	93 1f       	adc	r25, r19
    16a0:	fc 01       	movw	r30, r24
    16a2:	ea 55       	subi	r30, 0x5A	; 90
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	50 81       	ld	r21, Z
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	c9 01       	movw	r24, r18
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	fc 01       	movw	r30, r24
    16ba:	e9 55       	subi	r30, 0x59	; 89
    16bc:	fd 4f       	sbci	r31, 0xFD	; 253
    16be:	40 81       	ld	r20, Z
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	c9 01       	movw	r24, r18
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	82 0f       	add	r24, r18
    16ce:	93 1f       	adc	r25, r19
    16d0:	fc 01       	movw	r30, r24
    16d2:	e8 55       	subi	r30, 0x58	; 88
    16d4:	fd 4f       	sbci	r31, 0xFD	; 253
    16d6:	90 81       	ld	r25, Z
    16d8:	85 2f       	mov	r24, r21
    16da:	64 2f       	mov	r22, r20
    16dc:	49 2f       	mov	r20, r25
    16de:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	88 23       	and	r24, r24
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <GPIO_init+0xc4>
    16ee:	a5 cf       	rjmp	.-182    	; 0x163a <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <GPIO_SetPinDirection+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <GPIO_SetPinDirection+0x8>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	6a 83       	std	Y+2, r22	; 0x02
    170a:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	08 f0       	brcs	.+2      	; 0x1714 <GPIO_SetPinDirection+0x1c>
    1712:	d8 c1       	rjmp	.+944    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	08 f0       	brcs	.+2      	; 0x171c <GPIO_SetPinDirection+0x24>
    171a:	d4 c1       	rjmp	.+936    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3d 83       	std	Y+5, r19	; 0x05
    1724:	2c 83       	std	Y+4, r18	; 0x04
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <GPIO_SetPinDirection+0x3a>
    1730:	84 c0       	rjmp	.+264    	; 0x183a <GPIO_SetPinDirection+0x142>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <GPIO_SetPinDirection+0x4e>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	71 f0       	breq	.+28     	; 0x1760 <GPIO_SetPinDirection+0x68>
    1744:	bf c1       	rjmp	.+894    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <GPIO_SetPinDirection+0x5a>
    1750:	e1 c0       	rjmp	.+450    	; 0x1914 <GPIO_SetPinDirection+0x21c>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <GPIO_SetPinDirection+0x66>
    175c:	48 c1       	rjmp	.+656    	; 0x19ee <GPIO_SetPinDirection+0x2f6>
    175e:	b2 c1       	rjmp	.+868    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 23       	and	r24, r24
    1764:	41 f5       	brne	.+80     	; 0x17b6 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    1766:	aa e3       	ldi	r26, 0x3A	; 58
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ea e3       	ldi	r30, 0x3A	; 58
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_SetPinDirection+0x8a>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	2a 95       	dec	r18
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_SetPinDirection+0x86>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    178c:	ab e3       	ldi	r26, 0x3B	; 59
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb e3       	ldi	r30, 0x3B	; 59
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_SetPinDirection+0xb2>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_SetPinDirection+0xae>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	87 c1       	rjmp	.+782    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	39 f5       	brne	.+78     	; 0x180a <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    17bc:	aa e3       	ldi	r26, 0x3A	; 58
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ea e3       	ldi	r30, 0x3A	; 58
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_SetPinDirection+0xe0>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	2a 95       	dec	r18
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_SetPinDirection+0xdc>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    17e2:	ab e3       	ldi	r26, 0x3B	; 59
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	eb e3       	ldi	r30, 0x3B	; 59
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_SetPinDirection+0x108>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_SetPinDirection+0x104>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	5d c1       	rjmp	.+698    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	09 f0       	breq	.+2      	; 0x1812 <GPIO_SetPinDirection+0x11a>
    1810:	59 c1       	rjmp	.+690    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    1812:	aa e3       	ldi	r26, 0x3A	; 58
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ea e3       	ldi	r30, 0x3A	; 58
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_SetPinDirection+0x138>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_SetPinDirection+0x134>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	45 c1       	rjmp	.+650    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 23       	and	r24, r24
    183e:	41 f5       	brne	.+80     	; 0x1890 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    1840:	a7 e3       	ldi	r26, 0x37	; 55
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e7 e3       	ldi	r30, 0x37	; 55
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <GPIO_SetPinDirection+0x164>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	2a 95       	dec	r18
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <GPIO_SetPinDirection+0x160>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    1866:	a8 e3       	ldi	r26, 0x38	; 56
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e8 e3       	ldi	r30, 0x38	; 56
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <GPIO_SetPinDirection+0x18c>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <GPIO_SetPinDirection+0x188>
    1888:	80 95       	com	r24
    188a:	84 23       	and	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	1a c1       	rjmp	.+564    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	39 f5       	brne	.+78     	; 0x18e4 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    1896:	a7 e3       	ldi	r26, 0x37	; 55
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e7 e3       	ldi	r30, 0x37	; 55
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_SetPinDirection+0x1ba>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	2a 95       	dec	r18
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_SetPinDirection+0x1b6>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    18bc:	a8 e3       	ldi	r26, 0x38	; 56
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e8 e3       	ldi	r30, 0x38	; 56
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_SetPinDirection+0x1e2>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_SetPinDirection+0x1de>
    18de:	84 2b       	or	r24, r20
    18e0:	8c 93       	st	X, r24
    18e2:	f0 c0       	rjmp	.+480    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	82 30       	cpi	r24, 0x02	; 2
    18e8:	09 f0       	breq	.+2      	; 0x18ec <GPIO_SetPinDirection+0x1f4>
    18ea:	ec c0       	rjmp	.+472    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_SetPinDirection+0x212>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_SetPinDirection+0x20e>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	d8 c0       	rjmp	.+432    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	88 23       	and	r24, r24
    1918:	41 f5       	brne	.+80     	; 0x196a <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    191a:	a4 e3       	ldi	r26, 0x34	; 52
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e4 e3       	ldi	r30, 0x34	; 52
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_SetPinDirection+0x23e>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	2a 95       	dec	r18
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_SetPinDirection+0x23a>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    1940:	a5 e3       	ldi	r26, 0x35	; 53
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e5 e3       	ldi	r30, 0x35	; 53
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_SetPinDirection+0x266>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_SetPinDirection+0x262>
    1962:	80 95       	com	r24
    1964:	84 23       	and	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	ad c0       	rjmp	.+346    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	39 f5       	brne	.+78     	; 0x19be <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1970:	a4 e3       	ldi	r26, 0x34	; 52
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e4 e3       	ldi	r30, 0x34	; 52
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_SetPinDirection+0x294>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	2a 95       	dec	r18
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_SetPinDirection+0x290>
    1990:	80 95       	com	r24
    1992:	84 23       	and	r24, r20
    1994:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    1996:	a5 e3       	ldi	r26, 0x35	; 53
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <GPIO_SetPinDirection+0x2bc>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <GPIO_SetPinDirection+0x2b8>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	83 c0       	rjmp	.+262    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <GPIO_SetPinDirection+0x2ce>
    19c4:	7f c0       	rjmp	.+254    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    19c6:	a4 e3       	ldi	r26, 0x34	; 52
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e4 e3       	ldi	r30, 0x34	; 52
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_SetPinDirection+0x2ec>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_SetPinDirection+0x2e8>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	6b c0       	rjmp	.+214    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 23       	and	r24, r24
    19f2:	41 f5       	brne	.+80     	; 0x1a44 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    19f4:	a1 e3       	ldi	r26, 0x31	; 49
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e1 e3       	ldi	r30, 0x31	; 49
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_SetPinDirection+0x318>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	2a 95       	dec	r18
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_SetPinDirection+0x314>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    1a1a:	a2 e3       	ldi	r26, 0x32	; 50
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_SetPinDirection+0x340>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_SetPinDirection+0x33c>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	40 c0       	rjmp	.+128    	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	39 f5       	brne	.+78     	; 0x1a98 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    1a4a:	a1 e3       	ldi	r26, 0x31	; 49
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e1 e3       	ldi	r30, 0x31	; 49
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <GPIO_SetPinDirection+0x36e>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	2a 95       	dec	r18
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <GPIO_SetPinDirection+0x36a>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_SetPinDirection+0x396>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_SetPinDirection+0x392>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	16 c0       	rjmp	.+44     	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	99 f4       	brne	.+38     	; 0x1ac4 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    1a9e:	a1 e3       	ldi	r26, 0x31	; 49
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e1 e3       	ldi	r30, 0x31	; 49
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <GPIO_SetPinDirection+0x3c4>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <GPIO_SetPinDirection+0x3c0>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <GPIO_ReadPin+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <GPIO_ReadPin+0x8>
    1adc:	0f 92       	push	r0
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1ae6:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	84 30       	cpi	r24, 0x04	; 4
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <GPIO_ReadPin+0x1c>
    1aee:	84 c0       	rjmp	.+264    	; 0x1bf8 <GPIO_ReadPin+0x124>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	88 30       	cpi	r24, 0x08	; 8
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <GPIO_ReadPin+0x24>
    1af6:	80 c0       	rjmp	.+256    	; 0x1bf8 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3d 83       	std	Y+5, r19	; 0x05
    1b00:	2c 83       	std	Y+4, r18	; 0x04
    1b02:	4c 81       	ldd	r20, Y+4	; 0x04
    1b04:	5d 81       	ldd	r21, Y+5	; 0x05
    1b06:	41 30       	cpi	r20, 0x01	; 1
    1b08:	51 05       	cpc	r21, r1
    1b0a:	79 f1       	breq	.+94     	; 0x1b6a <GPIO_ReadPin+0x96>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	91 05       	cpc	r25, r1
    1b14:	34 f4       	brge	.+12     	; 0x1b22 <GPIO_ReadPin+0x4e>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	21 15       	cp	r18, r1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	69 f0       	breq	.+26     	; 0x1b3a <GPIO_ReadPin+0x66>
    1b20:	6b c0       	rjmp	.+214    	; 0x1bf8 <GPIO_ReadPin+0x124>
    1b22:	4c 81       	ldd	r20, Y+4	; 0x04
    1b24:	5d 81       	ldd	r21, Y+5	; 0x05
    1b26:	42 30       	cpi	r20, 0x02	; 2
    1b28:	51 05       	cpc	r21, r1
    1b2a:	b9 f1       	breq	.+110    	; 0x1b9a <GPIO_ReadPin+0xc6>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	83 30       	cpi	r24, 0x03	; 3
    1b32:	91 05       	cpc	r25, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <GPIO_ReadPin+0x64>
    1b36:	49 c0       	rjmp	.+146    	; 0x1bca <GPIO_ReadPin+0xf6>
    1b38:	5f c0       	rjmp	.+190    	; 0x1bf8 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    1b3a:	e9 e3       	ldi	r30, 0x39	; 57
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <GPIO_ReadPin+0x7e>
    1b4e:	55 95       	asr	r21
    1b50:	47 95       	ror	r20
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <GPIO_ReadPin+0x7a>
    1b56:	ca 01       	movw	r24, r20
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	88 23       	and	r24, r24
    1b5e:	19 f0       	breq	.+6      	; 0x1b66 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	49 c0       	rjmp	.+146    	; 0x1bf8 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1b66:	19 82       	std	Y+1, r1	; 0x01
    1b68:	47 c0       	rjmp	.+142    	; 0x1bf8 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    1b6a:	e6 e3       	ldi	r30, 0x36	; 54
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <GPIO_ReadPin+0xae>
    1b7e:	55 95       	asr	r21
    1b80:	47 95       	ror	r20
    1b82:	8a 95       	dec	r24
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <GPIO_ReadPin+0xaa>
    1b86:	ca 01       	movw	r24, r20
    1b88:	81 70       	andi	r24, 0x01	; 1
    1b8a:	90 70       	andi	r25, 0x00	; 0
    1b8c:	88 23       	and	r24, r24
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	31 c0       	rjmp	.+98     	; 0x1bf8 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1b96:	19 82       	std	Y+1, r1	; 0x01
    1b98:	2f c0       	rjmp	.+94     	; 0x1bf8 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    1b9a:	e3 e3       	ldi	r30, 0x33	; 51
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <GPIO_ReadPin+0xde>
    1bae:	55 95       	asr	r21
    1bb0:	47 95       	ror	r20
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <GPIO_ReadPin+0xda>
    1bb6:	ca 01       	movw	r24, r20
    1bb8:	81 70       	andi	r24, 0x01	; 1
    1bba:	90 70       	andi	r25, 0x00	; 0
    1bbc:	88 23       	and	r24, r24
    1bbe:	19 f0       	breq	.+6      	; 0x1bc6 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	19 c0       	rjmp	.+50     	; 0x1bf8 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1bc6:	19 82       	std	Y+1, r1	; 0x01
    1bc8:	17 c0       	rjmp	.+46     	; 0x1bf8 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    1bca:	e0 e3       	ldi	r30, 0x30	; 48
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a9 01       	movw	r20, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <GPIO_ReadPin+0x10e>
    1bde:	55 95       	asr	r21
    1be0:	47 95       	ror	r20
    1be2:	8a 95       	dec	r24
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <GPIO_ReadPin+0x10a>
    1be6:	ca 01       	movw	r24, r20
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	90 70       	andi	r25, 0x00	; 0
    1bec:	88 23       	and	r24, r24
    1bee:	19 f0       	breq	.+6      	; 0x1bf6 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1bf6:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_WritePin+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_WritePin+0x8>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
    1c1c:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <GPIO_WritePin+0x1c>
    1c24:	e4 c0       	rjmp	.+456    	; 0x1dee <GPIO_WritePin+0x1e4>
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 30       	cpi	r24, 0x08	; 8
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <GPIO_WritePin+0x24>
    1c2c:	e0 c0       	rjmp	.+448    	; 0x1dee <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3d 83       	std	Y+5, r19	; 0x05
    1c36:	2c 83       	std	Y+4, r18	; 0x04
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <GPIO_WritePin+0x3a>
    1c42:	47 c0       	rjmp	.+142    	; 0x1cd2 <GPIO_WritePin+0xc8>
    1c44:	2c 81       	ldd	r18, Y+4	; 0x04
    1c46:	3d 81       	ldd	r19, Y+5	; 0x05
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <GPIO_WritePin+0x4e>
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	9d 81       	ldd	r25, Y+5	; 0x05
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	71 f0       	breq	.+28     	; 0x1c72 <GPIO_WritePin+0x68>
    1c56:	cb c0       	rjmp	.+406    	; 0x1dee <GPIO_WritePin+0x1e4>
    1c58:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <GPIO_WritePin+0x5a>
    1c62:	67 c0       	rjmp	.+206    	; 0x1d32 <GPIO_WritePin+0x128>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <GPIO_WritePin+0x66>
    1c6e:	91 c0       	rjmp	.+290    	; 0x1d92 <GPIO_WritePin+0x188>
    1c70:	be c0       	rjmp	.+380    	; 0x1dee <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	a1 f4       	brne	.+40     	; 0x1ca0 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <GPIO_WritePin+0x8c>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <GPIO_WritePin+0x88>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	a7 c0       	rjmp	.+334    	; 0x1dee <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <GPIO_WritePin+0x9e>
    1ca6:	a3 c0       	rjmp	.+326    	; 0x1dee <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1ca8:	ab e3       	ldi	r26, 0x3B	; 59
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e3       	ldi	r30, 0x3B	; 59
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_WritePin+0xbc>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_WritePin+0xb8>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	8e c0       	rjmp	.+284    	; 0x1dee <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1cd8:	a8 e3       	ldi	r26, 0x38	; 56
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e8 e3       	ldi	r30, 0x38	; 56
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_WritePin+0xec>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_WritePin+0xe8>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	77 c0       	rjmp	.+238    	; 0x1dee <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 23       	and	r24, r24
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <GPIO_WritePin+0xfe>
    1d06:	73 c0       	rjmp	.+230    	; 0x1dee <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1d08:	a8 e3       	ldi	r26, 0x38	; 56
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e8 e3       	ldi	r30, 0x38	; 56
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_WritePin+0x11c>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_WritePin+0x118>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	5e c0       	rjmp	.+188    	; 0x1dee <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	a1 f4       	brne	.+40     	; 0x1d60 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1d38:	a5 e3       	ldi	r26, 0x35	; 53
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e5 e3       	ldi	r30, 0x35	; 53
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <GPIO_WritePin+0x14c>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <GPIO_WritePin+0x148>
    1d5a:	84 2b       	or	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	47 c0       	rjmp	.+142    	; 0x1dee <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	88 23       	and	r24, r24
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <GPIO_WritePin+0x15e>
    1d66:	43 c0       	rjmp	.+134    	; 0x1dee <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1d68:	a5 e3       	ldi	r26, 0x35	; 53
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e5 e3       	ldi	r30, 0x35	; 53
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <GPIO_WritePin+0x17c>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <GPIO_WritePin+0x178>
    1d8a:	80 95       	com	r24
    1d8c:	84 23       	and	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	2e c0       	rjmp	.+92     	; 0x1dee <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	a1 f4       	brne	.+40     	; 0x1dc0 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    1d98:	a2 e3       	ldi	r26, 0x32	; 50
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e2 e3       	ldi	r30, 0x32	; 50
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <GPIO_WritePin+0x1ac>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <GPIO_WritePin+0x1a8>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	17 c0       	rjmp	.+46     	; 0x1dee <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	88 23       	and	r24, r24
    1dc4:	a1 f4       	brne	.+40     	; 0x1dee <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1dc6:	a2 e3       	ldi	r26, 0x32	; 50
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_WritePin+0x1da>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_WritePin+0x1d6>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
                break;

        }
    }
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <GPIO_TogglePin+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <GPIO_TogglePin+0x8>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	84 30       	cpi	r24, 0x04	; 4
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <GPIO_TogglePin+0x18>
    1e14:	72 c0       	rjmp	.+228    	; 0x1efa <GPIO_TogglePin+0xfc>
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	88 30       	cpi	r24, 0x08	; 8
    1e1a:	08 f0       	brcs	.+2      	; 0x1e1e <GPIO_TogglePin+0x20>
    1e1c:	6e c0       	rjmp	.+220    	; 0x1efa <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	3c 83       	std	Y+4, r19	; 0x04
    1e26:	2b 83       	std	Y+3, r18	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	49 f1       	breq	.+82     	; 0x1e84 <GPIO_TogglePin+0x86>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <GPIO_TogglePin+0x48>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <GPIO_TogglePin+0x5e>
    1e44:	5a c0       	rjmp	.+180    	; 0x1efa <GPIO_TogglePin+0xfc>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	71 f1       	breq	.+92     	; 0x1eac <GPIO_TogglePin+0xae>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	e9 f1       	breq	.+122    	; 0x1ed4 <GPIO_TogglePin+0xd6>
    1e5a:	4f c0       	rjmp	.+158    	; 0x1efa <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_TogglePin+0x7c>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_TogglePin+0x78>
    1e7e:	84 27       	eor	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	3b c0       	rjmp	.+118    	; 0x1efa <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1e84:	a8 e3       	ldi	r26, 0x38	; 56
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e8 e3       	ldi	r30, 0x38	; 56
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_TogglePin+0xa4>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_TogglePin+0xa0>
    1ea6:	84 27       	eor	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	27 c0       	rjmp	.+78     	; 0x1efa <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1eac:	a5 e3       	ldi	r26, 0x35	; 53
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e3       	ldi	r30, 0x35	; 53
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <GPIO_TogglePin+0xcc>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <GPIO_TogglePin+0xc8>
    1ece:	84 27       	eor	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	13 c0       	rjmp	.+38     	; 0x1efa <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <GPIO_TogglePin+0xf4>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <GPIO_TogglePin+0xf0>
    1ef6:	84 27       	eor	r24, r20
    1ef8:	8c 93       	st	X, r24
                break;

        }
    }

}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <GPIO_SetPortDirection+0x6>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <GPIO_SetPortDirection+0x8>
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <GPIO_SetPortDirection+0x18>
    1f1e:	96 c0       	rjmp	.+300    	; 0x204c <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	3c 83       	std	Y+4, r19	; 0x04
    1f28:	2b 83       	std	Y+3, r18	; 0x03
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 05       	cpc	r25, r1
    1f32:	a9 f1       	breq	.+106    	; 0x1f9e <GPIO_SetPortDirection+0x96>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <GPIO_SetPortDirection+0x40>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	71 f0       	breq	.+28     	; 0x1f62 <GPIO_SetPortDirection+0x5a>
    1f46:	82 c0       	rjmp	.+260    	; 0x204c <GPIO_SetPortDirection+0x144>
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	31 05       	cpc	r19, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <GPIO_SetPortDirection+0x4c>
    1f52:	43 c0       	rjmp	.+134    	; 0x1fda <GPIO_SetPortDirection+0xd2>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <GPIO_SetPortDirection+0x58>
    1f5e:	5a c0       	rjmp	.+180    	; 0x2014 <GPIO_SetPortDirection+0x10c>
    1f60:	75 c0       	rjmp	.+234    	; 0x204c <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	88 23       	and	r24, r24
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1f68:	ea e3       	ldi	r30, 0x3A	; 58
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1f6e:	eb e3       	ldi	r30, 0x3B	; 59
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	10 82       	st	Z, r1
    1f74:	6b c0       	rjmp	.+214    	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	41 f4       	brne	.+16     	; 0x1f8c <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1f7c:	ea e3       	ldi	r30, 0x3A	; 58
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1f82:	eb e3       	ldi	r30, 0x3B	; 59
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	80 83       	st	Z, r24
    1f8a:	60 c0       	rjmp	.+192    	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <GPIO_SetPortDirection+0x8c>
    1f92:	5c c0       	rjmp	.+184    	; 0x204c <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1f94:	ea e3       	ldi	r30, 0x3A	; 58
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
    1f9c:	57 c0       	rjmp	.+174    	; 0x204c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	88 23       	and	r24, r24
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1fa4:	e7 e3       	ldi	r30, 0x37	; 55
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1faa:	e8 e3       	ldi	r30, 0x38	; 56
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	10 82       	st	Z, r1
    1fb0:	4d c0       	rjmp	.+154    	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1fb8:	e7 e3       	ldi	r30, 0x37	; 55
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1fbe:	e8 e3       	ldi	r30, 0x38	; 56
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	80 83       	st	Z, r24
    1fc6:	42 c0       	rjmp	.+132    	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	8f 3f       	cpi	r24, 0xFF	; 255
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <GPIO_SetPortDirection+0xc8>
    1fce:	3e c0       	rjmp	.+124    	; 0x204c <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1fd0:	e7 e3       	ldi	r30, 0x37	; 55
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8f ef       	ldi	r24, 0xFF	; 255
    1fd6:	80 83       	st	Z, r24
    1fd8:	39 c0       	rjmp	.+114    	; 0x204c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	88 23       	and	r24, r24
    1fde:	39 f4       	brne	.+14     	; 0x1fee <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1fe0:	e4 e3       	ldi	r30, 0x34	; 52
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1fe6:	e5 e3       	ldi	r30, 0x35	; 53
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	10 82       	st	Z, r1
    1fec:	2f c0       	rjmp	.+94     	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	41 f4       	brne	.+16     	; 0x2004 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1ff4:	e4 e3       	ldi	r30, 0x34	; 52
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1ffa:	e5 e3       	ldi	r30, 0x35	; 53
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
    2000:	80 83       	st	Z, r24
    2002:	24 c0       	rjmp	.+72     	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	8f 3f       	cpi	r24, 0xFF	; 255
    2008:	09 f5       	brne	.+66     	; 0x204c <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    200a:	e4 e3       	ldi	r30, 0x34	; 52
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	80 83       	st	Z, r24
    2012:	1c c0       	rjmp	.+56     	; 0x204c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	88 23       	and	r24, r24
    2018:	39 f4       	brne	.+14     	; 0x2028 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    201a:	e1 e3       	ldi	r30, 0x31	; 49
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    2020:	e2 e3       	ldi	r30, 0x32	; 50
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1
    2026:	12 c0       	rjmp	.+36     	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	41 f4       	brne	.+16     	; 0x203e <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    202e:	e1 e3       	ldi	r30, 0x31	; 49
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    2034:	e2 e3       	ldi	r30, 0x32	; 50
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	80 83       	st	Z, r24
    203c:	07 c0       	rjmp	.+14     	; 0x204c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	8f 3f       	cpi	r24, 0xFF	; 255
    2042:	21 f4       	brne	.+8      	; 0x204c <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    2044:	e1 e3       	ldi	r30, 0x31	; 49
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <GPIO_ReadPort+0x6>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <GPIO_ReadPort+0x8>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    2068:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	90 f5       	brcc	.+100    	; 0x20d4 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3c 83       	std	Y+4, r19	; 0x04
    2078:	2b 83       	std	Y+3, r18	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	d1 f0       	breq	.+52     	; 0x20b8 <GPIO_ReadPort+0x5e>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <GPIO_ReadPort+0x3e>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 f0       	breq	.+24     	; 0x20ae <GPIO_ReadPort+0x54>
    2096:	1e c0       	rjmp	.+60     	; 0x20d4 <GPIO_ReadPort+0x7a>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	81 f0       	breq	.+32     	; 0x20c2 <GPIO_ReadPort+0x68>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <GPIO_ReadPort+0x72>
    20ac:	13 c0       	rjmp	.+38     	; 0x20d4 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    20ae:	e9 e3       	ldi	r30, 0x39	; 57
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    20b8:	e6 e3       	ldi	r30, 0x36	; 54
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    20c2:	e3 e3       	ldi	r30, 0x33	; 51
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    20cc:	e0 e3       	ldi	r30, 0x30	; 48
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <GPIO_WritePort+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <GPIO_WritePort+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	90 f5       	brcc	.+100    	; 0x215e <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	3c 83       	std	Y+4, r19	; 0x04
    2102:	2b 83       	std	Y+3, r18	; 0x03
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	d1 f0       	breq	.+52     	; 0x2142 <GPIO_WritePort+0x5e>
    210e:	2b 81       	ldd	r18, Y+3	; 0x03
    2110:	3c 81       	ldd	r19, Y+4	; 0x04
    2112:	22 30       	cpi	r18, 0x02	; 2
    2114:	31 05       	cpc	r19, r1
    2116:	2c f4       	brge	.+10     	; 0x2122 <GPIO_WritePort+0x3e>
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	61 f0       	breq	.+24     	; 0x2138 <GPIO_WritePort+0x54>
    2120:	1e c0       	rjmp	.+60     	; 0x215e <GPIO_WritePort+0x7a>
    2122:	2b 81       	ldd	r18, Y+3	; 0x03
    2124:	3c 81       	ldd	r19, Y+4	; 0x04
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	81 f0       	breq	.+32     	; 0x214c <GPIO_WritePort+0x68>
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	83 30       	cpi	r24, 0x03	; 3
    2132:	91 05       	cpc	r25, r1
    2134:	81 f0       	breq	.+32     	; 0x2156 <GPIO_WritePort+0x72>
    2136:	13 c0       	rjmp	.+38     	; 0x215e <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    2138:	eb e3       	ldi	r30, 0x3B	; 59
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	80 83       	st	Z, r24
    2140:	0e c0       	rjmp	.+28     	; 0x215e <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    2142:	e8 e3       	ldi	r30, 0x38	; 56
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	80 83       	st	Z, r24
    214a:	09 c0       	rjmp	.+18     	; 0x215e <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    214c:	e5 e3       	ldi	r30, 0x35	; 53
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	80 83       	st	Z, r24
    2154:	04 c0       	rjmp	.+8      	; 0x215e <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    2156:	e2 e3       	ldi	r30, 0x32	; 50
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	80 83       	st	Z, r24
                break ;
        }
    }
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <GPIO_TogglePort+0x6>
    2172:	0f 92       	push	r0
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	08 f0       	brcs	.+2      	; 0x2182 <GPIO_TogglePort+0x16>
    2180:	3e c0       	rjmp	.+124    	; 0x21fe <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	3b 83       	std	Y+3, r19	; 0x03
    218a:	2a 83       	std	Y+2, r18	; 0x02
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	91 05       	cpc	r25, r1
    2194:	e9 f0       	breq	.+58     	; 0x21d0 <GPIO_TogglePort+0x64>
    2196:	2a 81       	ldd	r18, Y+2	; 0x02
    2198:	3b 81       	ldd	r19, Y+3	; 0x03
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	2c f4       	brge	.+10     	; 0x21aa <GPIO_TogglePort+0x3e>
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	61 f0       	breq	.+24     	; 0x21c0 <GPIO_TogglePort+0x54>
    21a8:	2a c0       	rjmp	.+84     	; 0x21fe <GPIO_TogglePort+0x92>
    21aa:	2a 81       	ldd	r18, Y+2	; 0x02
    21ac:	3b 81       	ldd	r19, Y+3	; 0x03
    21ae:	22 30       	cpi	r18, 0x02	; 2
    21b0:	31 05       	cpc	r19, r1
    21b2:	b1 f0       	breq	.+44     	; 0x21e0 <GPIO_TogglePort+0x74>
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	91 05       	cpc	r25, r1
    21bc:	c9 f0       	breq	.+50     	; 0x21f0 <GPIO_TogglePort+0x84>
    21be:	1f c0       	rjmp	.+62     	; 0x21fe <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    21c0:	ab e3       	ldi	r26, 0x3B	; 59
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb e3       	ldi	r30, 0x3B	; 59
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 95       	com	r24
    21cc:	8c 93       	st	X, r24
    21ce:	17 c0       	rjmp	.+46     	; 0x21fe <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    21d0:	a8 e3       	ldi	r26, 0x38	; 56
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e8 e3       	ldi	r30, 0x38	; 56
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 95       	com	r24
    21dc:	8c 93       	st	X, r24
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    21e0:	a5 e3       	ldi	r26, 0x35	; 53
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e5 e3       	ldi	r30, 0x35	; 53
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 95       	com	r24
    21ec:	8c 93       	st	X, r24
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    21f0:	a2 e3       	ldi	r26, 0x32	; 50
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e2 e3       	ldi	r30, 0x32	; 50
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 95       	com	r24
    21fc:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	0f 92       	push	r0
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	87 70       	andi	r24, 0x07	; 7
    221a:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    221c:	a7 e2       	ldi	r26, 0x27	; 39
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e7 e2       	ldi	r30, 0x27	; 39
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	98 2f       	mov	r25, r24
    2228:	90 7e       	andi	r25, 0xE0	; 224
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	89 2b       	or	r24, r25
    222e:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    2230:	a6 e2       	ldi	r26, 0x26	; 38
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e6 e2       	ldi	r30, 0x26	; 38
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	80 64       	ori	r24, 0x40	; 64
    223c:	8c 93       	st	X, r24
}
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <ADC_Init>:

void ADC_Init(void)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    224e:	a7 e2       	ldi	r26, 0x27	; 39
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e7 e2       	ldi	r30, 0x27	; 39
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	28 2f       	mov	r18, r24
    225a:	2f 73       	andi	r18, 0x3F	; 63
    225c:	80 91 aa 02 	lds	r24, 0x02AA
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	00 24       	eor	r0, r0
    2266:	96 95       	lsr	r25
    2268:	87 95       	ror	r24
    226a:	07 94       	ror	r0
    226c:	96 95       	lsr	r25
    226e:	87 95       	ror	r24
    2270:	07 94       	ror	r0
    2272:	98 2f       	mov	r25, r24
    2274:	80 2d       	mov	r24, r0
    2276:	82 2b       	or	r24, r18
    2278:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    227a:	80 91 ab 02 	lds	r24, 0x02AB
    227e:	88 23       	and	r24, r24
    2280:	41 f4       	brne	.+16     	; 0x2292 <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    2282:	a7 e2       	ldi	r26, 0x27	; 39
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e7 e2       	ldi	r30, 0x27	; 39
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 7d       	andi	r24, 0xDF	; 223
    228e:	8c 93       	st	X, r24
    2290:	0b c0       	rjmp	.+22     	; 0x22a8 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    2292:	80 91 ab 02 	lds	r24, 0x02AB
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	39 f4       	brne	.+14     	; 0x22a8 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    229a:	a7 e2       	ldi	r26, 0x27	; 39
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e7 e2       	ldi	r30, 0x27	; 39
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	80 62       	ori	r24, 0x20	; 32
    22a6:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    22a8:	a6 e2       	ldi	r26, 0x26	; 38
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e6 e2       	ldi	r30, 0x26	; 38
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 68       	ori	r24, 0x80	; 128
    22b4:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    22b6:	80 91 a9 02 	lds	r24, 0x02A9
    22ba:	88 23       	and	r24, r24
    22bc:	99 f1       	breq	.+102    	; 0x2324 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    22be:	80 91 a9 02 	lds	r24, 0x02A9
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	79 f4       	brne	.+30     	; 0x22e4 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    22c6:	a6 e2       	ldi	r26, 0x26	; 38
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e6 e2       	ldi	r30, 0x26	; 38
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	80 62       	ori	r24, 0x20	; 32
    22d2:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    22d4:	a0 e5       	ldi	r26, 0x50	; 80
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e0 e5       	ldi	r30, 0x50	; 80
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8f 70       	andi	r24, 0x0F	; 15
    22e0:	8c 93       	st	X, r24
    22e2:	20 c0       	rjmp	.+64     	; 0x2324 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    22e4:	80 91 a9 02 	lds	r24, 0x02A9
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	e1 f4       	brne	.+56     	; 0x2324 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    22ec:	a6 e2       	ldi	r26, 0x26	; 38
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e6 e2       	ldi	r30, 0x26	; 38
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 62       	ori	r24, 0x20	; 32
    22f8:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    22fa:	a0 e5       	ldi	r26, 0x50	; 80
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e0 e5       	ldi	r30, 0x50	; 80
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	28 2f       	mov	r18, r24
    2306:	2f 70       	andi	r18, 0x0F	; 15
    2308:	80 91 ad 02 	lds	r24, 0x02AD
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	82 95       	swap	r24
    2316:	92 95       	swap	r25
    2318:	90 7f       	andi	r25, 0xF0	; 240
    231a:	98 27       	eor	r25, r24
    231c:	80 7f       	andi	r24, 0xF0	; 240
    231e:	98 27       	eor	r25, r24
    2320:	82 2b       	or	r24, r18
    2322:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    2324:	a6 e2       	ldi	r26, 0x26	; 38
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e6 e2       	ldi	r30, 0x26	; 38
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	98 2f       	mov	r25, r24
    2330:	98 7f       	andi	r25, 0xF8	; 248
    2332:	80 91 ac 02 	lds	r24, 0x02AC
    2336:	87 70       	andi	r24, 0x07	; 7
    2338:	89 2b       	or	r24, r25
    233a:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    233c:	a6 e2       	ldi	r26, 0x26	; 38
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e6 e2       	ldi	r30, 0x26	; 38
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	87 7f       	andi	r24, 0xF7	; 247
    2348:	8c 93       	st	X, r24
    #endif
        
}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <ADC_ReadChannelSingleConvertion+0x6>
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ADC_conversion_value = 0 ;
    235e:	1a 82       	std	Y+2, r1	; 0x02
    2360:	19 82       	std	Y+1, r1	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	0e 94 05 11 	call	0x220a	; 0x220a <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    2368:	e6 e2       	ldi	r30, 0x26	; 38
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	80 71       	andi	r24, 0x10	; 16
    2374:	90 70       	andi	r25, 0x00	; 0
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	b9 f3       	breq	.-18     	; 0x2368 <ADC_ReadChannelSingleConvertion+0x18>
    ADC_conversion_value = ADC_ReadConversionRegister();
    237a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <ADC_ReadConversionRegister>
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    2382:	a6 e2       	ldi	r26, 0x26	; 38
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e6 e2       	ldi	r30, 0x26	; 38
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 61       	ori	r24, 0x10	; 16
    238e:	8c 93       	st	X, r24
    return ADC_conversion_value;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	0e 94 05 11 	call	0x220a	; 0x220a <ADC_OnlyStartConversionGeneral>
}
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <ADC_ReadConversionRegister+0x6>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    23c4:	1a 82       	std	Y+2, r1	; 0x02
    23c6:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    23c8:	80 91 ab 02 	lds	r24, 0x02AB
    23cc:	88 23       	and	r24, r24
    23ce:	b9 f4       	brne	.+46     	; 0x23fe <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    23d0:	e4 e2       	ldi	r30, 0x24	; 36
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    23de:	e5 e2       	ldi	r30, 0x25	; 37
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	83 70       	andi	r24, 0x03	; 3
    23ea:	90 70       	andi	r25, 0x00	; 0
    23ec:	38 2f       	mov	r19, r24
    23ee:	22 27       	eor	r18, r18
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	82 2b       	or	r24, r18
    23f6:	93 2b       	or	r25, r19
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	20 c0       	rjmp	.+64     	; 0x243e <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    23fe:	80 91 ab 02 	lds	r24, 0x02AB
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	e1 f4       	brne	.+56     	; 0x243e <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    2406:	e4 e2       	ldi	r30, 0x24	; 36
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	82 95       	swap	r24
    240e:	86 95       	lsr	r24
    2410:	86 95       	lsr	r24
    2412:	83 70       	andi	r24, 0x03	; 3
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	90 70       	andi	r25, 0x00	; 0
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    241e:	e5 e2       	ldi	r30, 0x25	; 37
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9c 01       	movw	r18, r24
    242a:	22 0f       	add	r18, r18
    242c:	33 1f       	adc	r19, r19
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	82 2b       	or	r24, r18
    2438:	93 2b       	or	r25, r19
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <WIFI_Buffer>:

uint16 Max_TimeOut = 400; //by Try and error this acceptable number
/*  And also can be reduced for 500 and this is too much time */

void WIFI_Buffer(void)
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    uint8 oldsrg = SREG;
    245a:	ef e5       	ldi	r30, 0x5F	; 95
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	89 83       	std	Y+1, r24	; 0x01
	cli();
    2462:	f8 94       	cli
	Rec_Data[Counter] = USART_Catch_UDR_Value();
    2464:	80 91 89 03 	lds	r24, 0x0389
    2468:	08 2f       	mov	r16, r24
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	0e 94 80 0a 	call	0x1500	; 0x1500 <USART_Catch_UDR_Value>
    2470:	f8 01       	movw	r30, r16
    2472:	eb 5d       	subi	r30, 0xDB	; 219
    2474:	fc 4f       	sbci	r31, 0xFC	; 252
    2476:	80 83       	st	Z, r24
	Counter++;
    2478:	80 91 89 03 	lds	r24, 0x0389
    247c:	8f 5f       	subi	r24, 0xFF	; 255
    247e:	80 93 89 03 	sts	0x0389, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
    2482:	80 91 89 03 	lds	r24, 0x0389
    2486:	84 36       	cpi	r24, 0x64	; 100
    2488:	11 f4       	brne	.+4      	; 0x248e <WIFI_Buffer+0x42>
		Counter = 0; //pointer = 0;
    248a:	10 92 89 03 	sts	0x0389, r1
	}
	SREG = oldsrg;
    248e:	ef e5       	ldi	r30, 0x5F	; 95
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	80 83       	st	Z, r24
}
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	08 95       	ret

000024a2 <Str_GetLength>:

uint8 Str_GetLength(uint8 * Str)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <Str_GetLength+0x6>
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9b 83       	std	Y+3, r25	; 0x03
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Counter = 0 ;
    24b2:	19 82       	std	Y+1, r1	; 0x01
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <Str_GetLength+0x1a>
    while(Str[Counter] != '\0')
    {
        Counter++;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	89 83       	std	Y+1, r24	; 0x01
}

uint8 Str_GetLength(uint8 * Str)
{
    uint8 Counter = 0 ;
    while(Str[Counter] != '\0')
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	fc 01       	movw	r30, r24
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	80 81       	ld	r24, Z
    24ce:	88 23       	and	r24, r24
    24d0:	91 f7       	brne	.-28     	; 0x24b6 <Str_GetLength+0x14>
    {
        Counter++;
    }
    return Counter ;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <Str_Comp>:

sint8 Str_Comp(uint8 * s1 ,uint8 * s2 , uint8 length )
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	27 97       	sbiw	r28, 0x07	; 7
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	7c 83       	std	Y+4, r23	; 0x04
    24fa:	6b 83       	std	Y+3, r22	; 0x03
    24fc:	4d 83       	std	Y+5, r20	; 0x05
    24fe:	0a c0       	rjmp	.+20     	; 0x2514 <Str_Comp+0x34>
    while(length-- && *s1 && (*s1 == *s2) )
    {
        s1++;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
        s2++;
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
    return Counter ;
}

sint8 Str_Comp(uint8 * s1 ,uint8 * s2 , uint8 length )
{
    while(length-- && *s1 && (*s1 == *s2) )
    2514:	2d 81       	ldd	r18, Y+5	; 0x05
    2516:	2f 83       	std	Y+7, r18	; 0x07
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	88 23       	and	r24, r24
    251c:	11 f0       	breq	.+4      	; 0x2522 <Str_Comp+0x42>
    251e:	21 e0       	ldi	r18, 0x01	; 1
    2520:	2f 83       	std	Y+7, r18	; 0x07
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	81 50       	subi	r24, 0x01	; 1
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	89 27       	eor	r24, r25
    252e:	88 23       	and	r24, r24
    2530:	69 f4       	brne	.+26     	; 0x254c <Str_Comp+0x6c>
    2532:	e9 81       	ldd	r30, Y+1	; 0x01
    2534:	fa 81       	ldd	r31, Y+2	; 0x02
    2536:	80 81       	ld	r24, Z
    2538:	88 23       	and	r24, r24
    253a:	41 f0       	breq	.+16     	; 0x254c <Str_Comp+0x6c>
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	90 81       	ld	r25, Z
    2542:	eb 81       	ldd	r30, Y+3	; 0x03
    2544:	fc 81       	ldd	r31, Y+4	; 0x04
    2546:	80 81       	ld	r24, Z
    2548:	98 17       	cp	r25, r24
    254a:	d1 f2       	breq	.-76     	; 0x2500 <Str_Comp+0x20>
    {
        s1++;
        s2++;
    }
    if(length == 0)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	88 23       	and	r24, r24
    2550:	11 f4       	brne	.+4      	; 0x2556 <Str_Comp+0x76>
    {return 0;}
    2552:	1e 82       	std	Y+6, r1	; 0x06
    2554:	0a c0       	rjmp	.+20     	; 0x256a <Str_Comp+0x8a>
    else
    {
        return *s1 -*s2 ;
    2556:	e9 81       	ldd	r30, Y+1	; 0x01
    2558:	fa 81       	ldd	r31, Y+2	; 0x02
    255a:	90 81       	ld	r25, Z
    255c:	eb 81       	ldd	r30, Y+3	; 0x03
    255e:	fc 81       	ldd	r31, Y+4	; 0x04
    2560:	80 81       	ld	r24, Z
    2562:	29 2f       	mov	r18, r25
    2564:	28 1b       	sub	r18, r24
    2566:	82 2f       	mov	r24, r18
    2568:	8e 83       	std	Y+6, r24	; 0x06
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    }
}
    256c:	27 96       	adiw	r28, 0x07	; 7
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <is_subset>:

uint8 is_subset(const char* haystack, const char* needle) {
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	29 97       	sbiw	r28, 0x09	; 9
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	78 87       	std	Y+8, r23	; 0x08
    2598:	6f 83       	std	Y+7, r22	; 0x07
    if (*needle == '\0') {
    259a:	ef 81       	ldd	r30, Y+7	; 0x07
    259c:	f8 85       	ldd	r31, Y+8	; 0x08
    259e:	80 81       	ld	r24, Z
    25a0:	88 23       	and	r24, r24
    25a2:	81 f5       	brne	.+96     	; 0x2604 <is_subset+0x86>
        return TRUE;  // Empty needle is always a subset
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	89 87       	std	Y+9, r24	; 0x09
    25a8:	33 c0       	rjmp	.+102    	; 0x2610 <is_subset+0x92>
    }

    while (*haystack != '\0') {
        const char* h = haystack;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
        const char* n = needle;
    25b2:	8f 81       	ldd	r24, Y+7	; 0x07
    25b4:	98 85       	ldd	r25, Y+8	; 0x08
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	0a c0       	rjmp	.+20     	; 0x25d0 <is_subset+0x52>

        while (*n != '\0' && *h == *n) {
            h++;
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
            n++;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01

    while (*haystack != '\0') {
        const char* h = haystack;
        const char* n = needle;

        while (*n != '\0' && *h == *n) {
    25d0:	e9 81       	ldd	r30, Y+1	; 0x01
    25d2:	fa 81       	ldd	r31, Y+2	; 0x02
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	41 f0       	breq	.+16     	; 0x25ea <is_subset+0x6c>
    25da:	eb 81       	ldd	r30, Y+3	; 0x03
    25dc:	fc 81       	ldd	r31, Y+4	; 0x04
    25de:	90 81       	ld	r25, Z
    25e0:	e9 81       	ldd	r30, Y+1	; 0x01
    25e2:	fa 81       	ldd	r31, Y+2	; 0x02
    25e4:	80 81       	ld	r24, Z
    25e6:	98 17       	cp	r25, r24
    25e8:	49 f3       	breq	.-46     	; 0x25bc <is_subset+0x3e>
            h++;
            n++;
        }

        if (*n == '\0') {
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	80 81       	ld	r24, Z
    25f0:	88 23       	and	r24, r24
    25f2:	19 f4       	brne	.+6      	; 0x25fa <is_subset+0x7c>
            return TRUE;  // Needle found as a subset
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	89 87       	std	Y+9, r24	; 0x09
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <is_subset+0x92>
        }

        haystack++;
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
uint8 is_subset(const char* haystack, const char* needle) {
    if (*needle == '\0') {
        return TRUE;  // Empty needle is always a subset
    }

    while (*haystack != '\0') {
    2604:	ed 81       	ldd	r30, Y+5	; 0x05
    2606:	fe 81       	ldd	r31, Y+6	; 0x06
    2608:	80 81       	ld	r24, Z
    260a:	88 23       	and	r24, r24
    260c:	71 f6       	brne	.-100    	; 0x25aa <is_subset+0x2c>
        }

        haystack++;
    }

    return FALSE;  // Needle not found as a subset
    260e:	19 86       	std	Y+9, r1	; 0x09
    2610:	89 85       	ldd	r24, Y+9	; 0x09
}
    2612:	29 96       	adiw	r28, 0x09	; 9
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <WIFI_CheckRespond>:

void WIFI_CheckRespond(uint8 * expected_Respond,WIFI_Result * WIFI_state)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	62 97       	sbiw	r28, 0x12	; 18
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	7a 8b       	std	Y+18, r23	; 0x12
    263e:	69 8b       	std	Y+17, r22	; 0x11
    // uint8 Buffer_Length = 0 ;
    // Buffer_Length = Str_GetLength(expected_Respond);
    // if(Str_Comp(Rec_Data,expected_Respond,Buffer_Length) == 0)
    LCD_MoveCursor(0,0);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    LCD_DisplayString(Rec_Data);
    2648:	85 e2       	ldi	r24, 0x25	; 37
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    if(is_subset(Rec_Data,expected_Respond) == TRUE)
    2650:	85 e2       	ldi	r24, 0x25	; 37
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	2f 85       	ldd	r18, Y+15	; 0x0f
    2656:	38 89       	ldd	r19, Y+16	; 0x10
    2658:	b9 01       	movw	r22, r18
    265a:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	09 f0       	breq	.+2      	; 0x2664 <WIFI_CheckRespond+0x40>
    2662:	77 c0       	rjmp	.+238    	; 0x2752 <WIFI_CheckRespond+0x12e>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	aa ef       	ldi	r26, 0xFA	; 250
    266a:	b3 e4       	ldi	r27, 0x43	; 67
    266c:	8b 87       	std	Y+11, r24	; 0x0b
    266e:	9c 87       	std	Y+12, r25	; 0x0c
    2670:	ad 87       	std	Y+13, r26	; 0x0d
    2672:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a ef       	ldi	r20, 0xFA	; 250
    2682:	54 e4       	ldi	r21, 0x44	; 68
    2684:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8f 83       	std	Y+7, r24	; 0x07
    268e:	98 87       	std	Y+8, r25	; 0x08
    2690:	a9 87       	std	Y+9, r26	; 0x09
    2692:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <WIFI_CheckRespond+0x92>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	3f c0       	rjmp	.+126    	; 0x2734 <WIFI_CheckRespond+0x110>
	else if (__tmp > 65535)
    26b6:	6f 81       	ldd	r22, Y+7	; 0x07
    26b8:	78 85       	ldd	r23, Y+8	; 0x08
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	4c f5       	brge	.+82     	; 0x2720 <WIFI_CheckRespond+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <WIFI_CheckRespond+0xf2>
    26f8:	88 ec       	ldi	r24, 0xC8	; 200
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9c 83       	std	Y+4, r25	; 0x04
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <WIFI_CheckRespond+0xe0>
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <WIFI_CheckRespond+0xd4>
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <WIFI_CheckRespond+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <WIFI_CheckRespond+0x11c>
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    {
         _delay_ms(500);

        
        // WIFI_BufferClear();
        *WIFI_state =  WIFI_OK ;
    2748:	e9 89       	ldd	r30, Y+17	; 0x11
    274a:	fa 89       	ldd	r31, Y+18	; 0x12
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 83       	st	Z, r24
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <WIFI_CheckRespond+0x134>
        return ;
    }
    *WIFI_state = WIFI_ERROR ;
    2752:	e9 89       	ldd	r30, Y+17	; 0x11
    2754:	fa 89       	ldd	r31, Y+18	; 0x12
    2756:	10 82       	st	Z, r1
}
    2758:	62 96       	adiw	r28, 0x12	; 18
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <WIFI_BufferClear>:


void WIFI_BufferClear(void)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    Counter = 0 ;
    2772:	10 92 89 03 	sts	0x0389, r1
    WIFI_BufferMemoryReset(Rec_Data , 0 , DEFAULT_BUFFER_SIZE);
    2776:	85 e2       	ldi	r24, 0x25	; 37
    2778:	93 e0       	ldi	r25, 0x03	; 3
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	44 e6       	ldi	r20, 0x64	; 100
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	0e 94 c6 13 	call	0x278c	; 0x278c <WIFI_BufferMemoryReset>
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <WIFI_BufferMemoryReset>:

void WIFI_BufferMemoryReset(uint8 * string , uint8 value , uint8 length)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <WIFI_BufferMemoryReset+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <WIFI_BufferMemoryReset+0x8>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	9b 83       	std	Y+3, r25	; 0x03
    279c:	8a 83       	std	Y+2, r24	; 0x02
    279e:	6c 83       	std	Y+4, r22	; 0x04
    27a0:	4d 83       	std	Y+5, r20	; 0x05
    for(uint8 it = 0 ; it < length ;it++)
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	0d c0       	rjmp	.+26     	; 0x27c0 <WIFI_BufferMemoryReset+0x34>
    {
        string[it] = value ;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	fc 01       	movw	r30, r24
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	80 83       	st	Z, r24
    WIFI_BufferMemoryReset(Rec_Data , 0 , DEFAULT_BUFFER_SIZE);
}

void WIFI_BufferMemoryReset(uint8 * string , uint8 value , uint8 length)
{
    for(uint8 it = 0 ; it < length ;it++)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	99 81       	ldd	r25, Y+1	; 0x01
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	98 17       	cp	r25, r24
    27c6:	78 f3       	brcs	.-34     	; 0x27a6 <WIFI_BufferMemoryReset+0x1a>
    {
        string[it] = value ;
    }
}
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <WIFI_SendATCommand>:


void WIFI_SendATCommand(uint8 * command ,uint8 size , uint8 * expected_Respond,WIFI_Result * WIFI_state)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	67 97       	sbiw	r28, 0x17	; 23
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	9a 8b       	std	Y+18, r25	; 0x12
    27ee:	89 8b       	std	Y+17, r24	; 0x11
    27f0:	6b 8b       	std	Y+19, r22	; 0x13
    27f2:	5d 8b       	std	Y+21, r21	; 0x15
    27f4:	4c 8b       	std	Y+20, r20	; 0x14
    27f6:	3f 8b       	std	Y+23, r19	; 0x17
    27f8:	2e 8b       	std	Y+22, r18	; 0x16
    LCD_ClearScreen();
    27fa:	0e 94 33 22 	call	0x4466	; 0x4466 <LCD_ClearScreen>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	aa ef       	ldi	r26, 0xFA	; 250
    2804:	b3 e4       	ldi	r27, 0x43	; 67
    2806:	8b 87       	std	Y+11, r24	; 0x0b
    2808:	9c 87       	std	Y+12, r25	; 0x0c
    280a:	ad 87       	std	Y+13, r26	; 0x0d
    280c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2810:	7c 85       	ldd	r23, Y+12	; 0x0c
    2812:	8d 85       	ldd	r24, Y+13	; 0x0d
    2814:	9e 85       	ldd	r25, Y+14	; 0x0e
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	8f 83       	std	Y+7, r24	; 0x07
    2828:	98 87       	std	Y+8, r25	; 0x08
    282a:	a9 87       	std	Y+9, r26	; 0x09
    282c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	2c f4       	brge	.+10     	; 0x2850 <WIFI_SendATCommand+0x78>
		__ticks = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	3f c0       	rjmp	.+126    	; 0x28ce <WIFI_SendATCommand+0xf6>
	else if (__tmp > 65535)
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	4c f5       	brge	.+82     	; 0x28ba <WIFI_SendATCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <WIFI_SendATCommand+0xd8>
    2892:	88 ec       	ldi	r24, 0xC8	; 200
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <WIFI_SendATCommand+0xc6>
    28a2:	9c 83       	std	Y+4, r25	; 0x04
    28a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	69 f7       	brne	.-38     	; 0x2892 <WIFI_SendATCommand+0xba>
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <WIFI_SendATCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	6f 81       	ldd	r22, Y+7	; 0x07
    28bc:	78 85       	ldd	r23, Y+8	; 0x08
    28be:	89 85       	ldd	r24, Y+9	; 0x09
    28c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c2:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <WIFI_SendATCommand+0x102>
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    operation_Done++;
    28e2:	80 91 24 03 	lds	r24, 0x0324
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	80 93 24 03 	sts	0x0324, r24
    if(size == 0)
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	88 23       	and	r24, r24
    28f0:	31 f4       	brne	.+12     	; 0x28fe <WIFI_SendATCommand+0x126>
    {
        /*  Clear buffer if filled for any reason  */
        WIFI_BufferClear();
    28f2:	0e 94 b5 13 	call	0x276a	; 0x276a <WIFI_BufferClear>
        USART_SendStringPolling(command);
    28f6:	89 89       	ldd	r24, Y+17	; 0x11
    28f8:	9a 89       	ldd	r25, Y+18	; 0x12
    28fa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <USART_SendStringPolling>
    }
    uint16 Timeout = 0 ;
    28fe:	18 8a       	std	Y+16, r1	; 0x10
    2900:	1f 86       	std	Y+15, r1	; 0x0f
    2902:	1e c0       	rjmp	.+60     	; 0x2940 <WIFI_SendATCommand+0x168>
    while((Timeout != Max_TimeOut) && (* WIFI_state != WIFI_OK) )
    {
        WIFI_CheckRespond(expected_Respond,WIFI_state);
    2904:	8c 89       	ldd	r24, Y+20	; 0x14
    2906:	9d 89       	ldd	r25, Y+21	; 0x15
    2908:	2e 89       	ldd	r18, Y+22	; 0x16
    290a:	3f 89       	ldd	r19, Y+23	; 0x17
    290c:	b9 01       	movw	r22, r18
    290e:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
        Timer0_UpdateValue(0);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timer0_UpdateValue>
        Timer0_DelayOVFPolling();
    2918:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Timer0_DelayOVFPolling>
        Timeout++;
    291c:	8f 85       	ldd	r24, Y+15	; 0x0f
    291e:	98 89       	ldd	r25, Y+16	; 0x10
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	98 8b       	std	Y+16, r25	; 0x10
    2924:	8f 87       	std	Y+15, r24	; 0x0f
        LCD_MoveCursor(1,7);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	67 e0       	ldi	r22, 0x07	; 7
    292a:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
        LCD_intToString(Timeout);
    292e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2930:	98 89       	ldd	r25, Y+16	; 0x10
    2932:	cc 01       	movw	r24, r24
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 6f 23 	call	0x46de	; 0x46de <LCD_intToString>
        /*  Clear buffer if filled for any reason  */
        WIFI_BufferClear();
        USART_SendStringPolling(command);
    }
    uint16 Timeout = 0 ;
    while((Timeout != Max_TimeOut) && (* WIFI_state != WIFI_OK) )
    2940:	20 91 ae 02 	lds	r18, 0x02AE
    2944:	30 91 af 02 	lds	r19, 0x02AF
    2948:	8f 85       	ldd	r24, Y+15	; 0x0f
    294a:	98 89       	ldd	r25, Y+16	; 0x10
    294c:	82 17       	cp	r24, r18
    294e:	93 07       	cpc	r25, r19
    2950:	29 f0       	breq	.+10     	; 0x295c <WIFI_SendATCommand+0x184>
    2952:	ee 89       	ldd	r30, Y+22	; 0x16
    2954:	ff 89       	ldd	r31, Y+23	; 0x17
    2956:	80 81       	ld	r24, Z
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	a1 f6       	brne	.-88     	; 0x2904 <WIFI_SendATCommand+0x12c>
        Timer0_DelayOVFPolling();
        Timeout++;
        LCD_MoveCursor(1,7);
        LCD_intToString(Timeout);
    }
    LCD_MoveCursor(1,9);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	69 e0       	ldi	r22, 0x09	; 9
    2960:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    LCD_intToString(operation_Done);
    2964:	80 91 24 03 	lds	r24, 0x0324
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 6f 23 	call	0x46de	; 0x46de <LCD_intToString>
}
    2978:	67 96       	adiw	r28, 0x17	; 23
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <WIFI_Init>:

void WIFI_Init(WIFI_Result * WIFI_state)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	60 97       	sbiw	r28, 0x10	; 16
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	98 8b       	std	Y+16, r25	; 0x10
    29a0:	8f 87       	std	Y+15, r24	; 0x0f
    * no Parity
    * 1 stop bit
    */    

    /*  Initialize UART */ 
    USART_Init();
    29a2:	0e 94 11 09 	call	0x1222	; 0x1222 <USART_Init>

    USART_EnableReceiveInerrupt();
    29a6:	0e 94 4e 0a 	call	0x149c	; 0x149c <USART_EnableReceiveInerrupt>

    USART_receiveByteAsynchCallBack(WIFI_Buffer);
    29aa:	86 e2       	ldi	r24, 0x26	; 38
    29ac:	92 e1       	ldi	r25, 0x12	; 18
    29ae:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <USART_receiveByteAsynchCallBack>
    
    /*  initilaize Timer0 with prescaler 8 normal mode as one time delay = 256 us  */
    Timer0_Init();
    29b2:	0e 94 a7 0a 	call	0x154e	; 0x154e <Timer0_Init>

    * WIFI_state = WIFI_ERROR ;
    29b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    29b8:	f8 89       	ldd	r31, Y+16	; 0x10
    29ba:	10 82       	st	Z, r1

    /*  1st thing   */
    WIFI_SendATCommand("AT\r\n",0,"\r\nOK\r\n",WIFI_state);
    29bc:	80 e6       	ldi	r24, 0x60	; 96
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	25 e6       	ldi	r18, 0x65	; 101
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	ef 85       	ldd	r30, Y+15	; 0x0f
    29c6:	f8 89       	ldd	r31, Y+16	; 0x10
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	a9 01       	movw	r20, r18
    29cc:	9f 01       	movw	r18, r30
    29ce:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    
    /*  2nd disable Echo  */   
    if(*WIFI_state == WIFI_OK) 
    29d2:	ef 85       	ldd	r30, Y+15	; 0x0f
    29d4:	f8 89       	ldd	r31, Y+16	; 0x10
    29d6:	80 81       	ld	r24, Z
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	09 f0       	breq	.+2      	; 0x29de <WIFI_Init+0x54>
    29dc:	80 c0       	rjmp	.+256    	; 0x2ade <WIFI_Init+0x154>
    {
        * WIFI_state = WIFI_ERROR ;
    29de:	ef 85       	ldd	r30, Y+15	; 0x0f
    29e0:	f8 89       	ldd	r31, Y+16	; 0x10
    29e2:	10 82       	st	Z, r1
        WIFI_SendATCommand("ATE0\r\n",0,"\r\nOK\r\n",WIFI_state);
    29e4:	8c e6       	ldi	r24, 0x6C	; 108
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	25 e6       	ldi	r18, 0x65	; 101
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	ef 85       	ldd	r30, Y+15	; 0x0f
    29ee:	f8 89       	ldd	r31, Y+16	; 0x10
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	a9 01       	movw	r20, r18
    29f4:	9f 01       	movw	r18, r30
    29f6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	aa ef       	ldi	r26, 0xFA	; 250
    2a00:	b3 e4       	ldi	r27, 0x43	; 67
    2a02:	8b 87       	std	Y+11, r24	; 0x0b
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	ad 87       	std	Y+13, r26	; 0x0d
    2a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a ef       	ldi	r20, 0xFA	; 250
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <WIFI_Init+0xc2>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <WIFI_Init+0x140>
	else if (__tmp > 65535)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <WIFI_Init+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <WIFI_Init+0x122>
    2a8e:	88 ec       	ldi	r24, 0xC8	; 200
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <WIFI_Init+0x110>
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <WIFI_Init+0x104>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <WIFI_Init+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <WIFI_Init+0x14c>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
    }

    /*  Set Wifi mode */
    if(*WIFI_state == WIFI_OK)
    2ade:	ef 85       	ldd	r30, Y+15	; 0x0f
    2ae0:	f8 89       	ldd	r31, Y+16	; 0x10
    2ae2:	80 81       	ld	r24, Z
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	71 f4       	brne	.+28     	; 0x2b04 <WIFI_Init+0x17a>
    {
        * WIFI_state = WIFI_ERROR ;
    2ae8:	ef 85       	ldd	r30, Y+15	; 0x0f
    2aea:	f8 89       	ldd	r31, Y+16	; 0x10
    2aec:	10 82       	st	Z, r1
        WIFI_SendATCommand(WIFI_Current_Mode,0,"\r\nOK\r\n",WIFI_state);
    2aee:	83 e7       	ldi	r24, 0x73	; 115
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	25 e6       	ldi	r18, 0x65	; 101
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	ef 85       	ldd	r30, Y+15	; 0x0f
    2af8:	f8 89       	ldd	r31, Y+16	; 0x10
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	a9 01       	movw	r20, r18
    2afe:	9f 01       	movw	r18, r30
    2b00:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    }

    /*  Set Wifi channel number */
    if(*WIFI_state == WIFI_OK)
    2b04:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b06:	f8 89       	ldd	r31, Y+16	; 0x10
    2b08:	80 81       	ld	r24, Z
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	71 f4       	brne	.+28     	; 0x2b2a <WIFI_Init+0x1a0>
    {
        * WIFI_state = WIFI_ERROR ;
    2b0e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b10:	f8 89       	ldd	r31, Y+16	; 0x10
    2b12:	10 82       	st	Z, r1
        WIFI_SendATCommand(WIFI_Current_Channel_mode,0,"\r\nOK\r\n",WIFI_state);
    2b14:	85 e8       	ldi	r24, 0x85	; 133
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	25 e6       	ldi	r18, 0x65	; 101
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b1e:	f8 89       	ldd	r31, Y+16	; 0x10
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	a9 01       	movw	r20, r18
    2b24:	9f 01       	movw	r18, r30
    2b26:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    }


    /*  Set Wifi Transfer mode */
    if(*WIFI_state == WIFI_OK)
    2b2a:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b2c:	f8 89       	ldd	r31, Y+16	; 0x10
    2b2e:	80 81       	ld	r24, Z
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	71 f4       	brne	.+28     	; 0x2b50 <WIFI_Init+0x1c6>
    {
        * WIFI_state = WIFI_ERROR ;
    2b34:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b36:	f8 89       	ldd	r31, Y+16	; 0x10
    2b38:	10 82       	st	Z, r1
        WIFI_SendATCommand(WIFI_Current_Transfer_Mode,0,"\r\nOK\r\n",WIFI_state);
    2b3a:	83 e9       	ldi	r24, 0x93	; 147
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	25 e6       	ldi	r18, 0x65	; 101
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b44:	f8 89       	ldd	r31, Y+16	; 0x10
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	9f 01       	movw	r18, r30
    2b4c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    }

}
    2b50:	60 96       	adiw	r28, 0x10	; 16
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <WiFi_joinAccessPoint>:



void WiFi_joinAccessPoint(uint8* SSID, uint8* pass, WIFI_SSD_Connection_Type * pRresult)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	c4 54       	subi	r28, 0x44	; 68
    2b6c:	d0 40       	sbci	r29, 0x00	; 0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ff 96       	adiw	r30, 0x3f	; 63
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
    2b80:	fe 01       	movw	r30, r28
    2b82:	ef 5b       	subi	r30, 0xBF	; 191
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	71 83       	std	Z+1, r23	; 0x01
    2b88:	60 83       	st	Z, r22
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ed 5b       	subi	r30, 0xBD	; 189
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	51 83       	std	Z+1, r21	; 0x01
    2b92:	40 83       	st	Z, r20
    uint8 ATCommand[60];
    WIFI_BufferMemoryReset(ATCommand,0,60);
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	4c e3       	ldi	r20, 0x3C	; 60
    2b9c:	0e 94 c6 13 	call	0x278c	; 0x278c <WIFI_BufferMemoryReset>
    sprintf(ATCommand, "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", SSID, pass);
    2ba0:	8d b7       	in	r24, 0x3d	; 61
    2ba2:	9e b7       	in	r25, 0x3e	; 62
    2ba4:	08 97       	sbiw	r24, 0x08	; 8
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	9e bf       	out	0x3e, r25	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	8d bf       	out	0x3d, r24	; 61
    2bb0:	ad b7       	in	r26, 0x3d	; 61
    2bb2:	be b7       	in	r27, 0x3e	; 62
    2bb4:	11 96       	adiw	r26, 0x01	; 1
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	11 96       	adiw	r26, 0x01	; 1
    2bbc:	9c 93       	st	X, r25
    2bbe:	8e 93       	st	-X, r24
    2bc0:	82 ea       	ldi	r24, 0xA2	; 162
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	13 96       	adiw	r26, 0x03	; 3
    2bc6:	9c 93       	st	X, r25
    2bc8:	8e 93       	st	-X, r24
    2bca:	12 97       	sbiw	r26, 0x02	; 2
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ff 96       	adiw	r30, 0x3f	; 63
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	15 96       	adiw	r26, 0x05	; 5
    2bd6:	9c 93       	st	X, r25
    2bd8:	8e 93       	st	-X, r24
    2bda:	14 97       	sbiw	r26, 0x04	; 4
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ef 5b       	subi	r30, 0xBF	; 191
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	17 96       	adiw	r26, 0x07	; 7
    2be8:	9c 93       	st	X, r25
    2bea:	8e 93       	st	-X, r24
    2bec:	16 97       	sbiw	r26, 0x06	; 6
    2bee:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <sprintf>
    2bf2:	8d b7       	in	r24, 0x3d	; 61
    2bf4:	9e b7       	in	r25, 0x3e	; 62
    2bf6:	08 96       	adiw	r24, 0x08	; 8
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	9e bf       	out	0x3e, r25	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	8d bf       	out	0x3d, r24	; 61
    ATCommand[59] = 0;
    2c02:	1c ae       	std	Y+60, r1	; 0x3c
    *pRresult =WIFI_Connection_FAil;
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 5b       	subi	r30, 0xBD	; 189
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	01 90       	ld	r0, Z+
    2c0c:	f0 81       	ld	r31, Z
    2c0e:	e0 2d       	mov	r30, r0
    2c10:	85 e0       	ldi	r24, 0x05	; 5
    2c12:	80 83       	st	Z, r24
    WIFI_SendATCommand(ATCommand,0,"\r\nWIFI CONNECTED\r\n",pRresult);
    2c14:	4b eb       	ldi	r20, 0xBB	; 187
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	fe 01       	movw	r30, r28
    2c1a:	ed 5b       	subi	r30, 0xBD	; 189
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	20 81       	ld	r18, Z
    2c20:	31 81       	ldd	r19, Z+1	; 0x01
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    if(*pRresult == WIFI_OK)
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 5b       	subi	r30, 0xBD	; 189
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	01 90       	ld	r0, Z+
    2c34:	f0 81       	ld	r31, Z
    2c36:	e0 2d       	mov	r30, r0
    2c38:	80 81       	ld	r24, Z
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	b1 f4       	brne	.+44     	; 0x2c6a <WiFi_joinAccessPoint+0x108>
    {
        *pRresult = WIFI_Connection_OK;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ed 5b       	subi	r30, 0xBD	; 189
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	01 90       	ld	r0, Z+
    2c46:	f0 81       	ld	r31, Z
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	80 83       	st	Z, r24
         ⚠️⚠️⚠️Sooo any command will send during this process ESP will tell you "Busy..."  and ignore this command  */


         /* So I will wait \r\nOK\r\n  respond and Go ahead in my code  */
         /* Initialize status will false*/
         WIFI_Result WIFI_connection_catch_ok = WIFI_InProgress;
    2c4e:	84 e1       	ldi	r24, 0x14	; 20
    2c50:	8d af       	std	Y+61, r24	; 0x3d
         do
         {
            WIFI_CheckRespond("\r\nOK\r\n",&WIFI_connection_catch_ok);
    2c52:	85 e6       	ldi	r24, 0x65	; 101
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9e 01       	movw	r18, r28
    2c58:	23 5c       	subi	r18, 0xC3	; 195
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
         } while (WIFI_connection_catch_ok != WIFI_OK);
    2c62:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	a9 f7       	brne	.-22     	; 0x2c52 <WiFi_joinAccessPoint+0xf0>
    2c68:	5d c0       	rjmp	.+186    	; 0x2d24 <WiFi_joinAccessPoint+0x1c2>
         
        return ;
    }
    else
    {
        if(is_subset(Rec_Data, "+CWJAP:1"))
    2c6a:	85 e2       	ldi	r24, 0x25	; 37
    2c6c:	93 e0       	ldi	r25, 0x03	; 3
    2c6e:	2e ec       	ldi	r18, 0xCE	; 206
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	b9 01       	movw	r22, r18
    2c74:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2c78:	88 23       	and	r24, r24
    2c7a:	49 f0       	breq	.+18     	; 0x2c8e <WiFi_joinAccessPoint+0x12c>
		 *pRresult = WIFI_Connection_TimeOut;
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ed 5b       	subi	r30, 0xBD	; 189
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	01 90       	ld	r0, Z+
    2c84:	f0 81       	ld	r31, Z
    2c86:	e0 2d       	mov	r30, r0
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	80 83       	st	Z, r24
    2c8c:	3e c0       	rjmp	.+124    	; 0x2d0a <WiFi_joinAccessPoint+0x1a8>
		else if(is_subset(Rec_Data,  "+CWJAP:2"))
    2c8e:	85 e2       	ldi	r24, 0x25	; 37
    2c90:	93 e0       	ldi	r25, 0x03	; 3
    2c92:	27 ed       	ldi	r18, 0xD7	; 215
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	b9 01       	movw	r22, r18
    2c98:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2c9c:	88 23       	and	r24, r24
    2c9e:	49 f0       	breq	.+18     	; 0x2cb2 <WiFi_joinAccessPoint+0x150>
		 *pRresult = WIFI_Connection_WrongPassword;
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 5b       	subi	r30, 0xBD	; 189
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	01 90       	ld	r0, Z+
    2ca8:	f0 81       	ld	r31, Z
    2caa:	e0 2d       	mov	r30, r0
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	80 83       	st	Z, r24
    2cb0:	2c c0       	rjmp	.+88     	; 0x2d0a <WiFi_joinAccessPoint+0x1a8>
		else if(is_subset(Rec_Data,  "+CWJAP:3"))
    2cb2:	85 e2       	ldi	r24, 0x25	; 37
    2cb4:	93 e0       	ldi	r25, 0x03	; 3
    2cb6:	20 ee       	ldi	r18, 0xE0	; 224
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	b9 01       	movw	r22, r18
    2cbc:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2cc0:	88 23       	and	r24, r24
    2cc2:	49 f0       	breq	.+18     	; 0x2cd6 <WiFi_joinAccessPoint+0x174>
		 *pRresult = WIFI_COnnection_CanNotFindAP;
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ed 5b       	subi	r30, 0xBD	; 189
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	01 90       	ld	r0, Z+
    2ccc:	f0 81       	ld	r31, Z
    2cce:	e0 2d       	mov	r30, r0
    2cd0:	84 e0       	ldi	r24, 0x04	; 4
    2cd2:	80 83       	st	Z, r24
    2cd4:	1a c0       	rjmp	.+52     	; 0x2d0a <WiFi_joinAccessPoint+0x1a8>
		else if(is_subset(Rec_Data,  "+CWJAP:4"))
    2cd6:	85 e2       	ldi	r24, 0x25	; 37
    2cd8:	93 e0       	ldi	r25, 0x03	; 3
    2cda:	29 ee       	ldi	r18, 0xE9	; 233
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	b9 01       	movw	r22, r18
    2ce0:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2ce4:	88 23       	and	r24, r24
    2ce6:	49 f0       	breq	.+18     	; 0x2cfa <WiFi_joinAccessPoint+0x198>
		 *pRresult = WIFI_Connection_FAil;
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ed 5b       	subi	r30, 0xBD	; 189
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	01 90       	ld	r0, Z+
    2cf0:	f0 81       	ld	r31, Z
    2cf2:	e0 2d       	mov	r30, r0
    2cf4:	85 e0       	ldi	r24, 0x05	; 5
    2cf6:	80 83       	st	Z, r24
    2cf8:	08 c0       	rjmp	.+16     	; 0x2d0a <WiFi_joinAccessPoint+0x1a8>
		else /* For any unexpected result   */
         *pRresult = WIFI_Connection_FAil;
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 5b       	subi	r30, 0xBD	; 189
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	01 90       	ld	r0, Z+
    2d02:	f0 81       	ld	r31, Z
    2d04:	e0 2d       	mov	r30, r0
    2d06:	85 e0       	ldi	r24, 0x05	; 5
    2d08:	80 83       	st	Z, r24
        /*  When Connection fail for any reasons You need to catch "Fail" respond as any command before this respond will ignores and ESP resond Busy... */
        WIFI_Result WIFI_connection_catch_ok = WIFI_InProgress;
    2d0a:	84 e1       	ldi	r24, 0x14	; 20
    2d0c:	8e af       	std	Y+62, r24	; 0x3e
        do
        {
        WIFI_CheckRespond("\r\nFAIL\r\n",&WIFI_connection_catch_ok);
    2d0e:	82 ef       	ldi	r24, 0xF2	; 242
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9e 01       	movw	r18, r28
    2d14:	22 5c       	subi	r18, 0xC2	; 194
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	b9 01       	movw	r22, r18
    2d1a:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
        } while (WIFI_connection_catch_ok != WIFI_OK);
    2d1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	a9 f7       	brne	.-22     	; 0x2d0e <WiFi_joinAccessPoint+0x1ac>
        return ;
    }
}
    2d24:	cc 5b       	subi	r28, 0xBC	; 188
    2d26:	df 4f       	sbci	r29, 0xFF	; 255
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <WiFi_checkConnection>:


void WiFi_checkConnection(WIFI_AP_Status_Type * pStatus)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <WiFi_checkConnection+0x6>
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
    WIFI_SendATCommand("AT+CIPSTATUS\r\n",0,"STATUS:2",pStatus);
    2d46:	8b ef       	ldi	r24, 0xFB	; 251
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	2a e0       	ldi	r18, 0x0A	; 10
    2d4c:	31 e0       	ldi	r19, 0x01	; 1
    2d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d50:	fa 81       	ldd	r31, Y+2	; 0x02
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	a9 01       	movw	r20, r18
    2d56:	9f 01       	movw	r18, r30
    2d58:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    if(*pStatus == WIFI_OK)
    2d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d60:	80 81       	ld	r24, Z
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	29 f4       	brne	.+10     	; 0x2d70 <WiFi_checkConnection+0x38>
    {
        *pStatus = WIFI_AP_GotIP ;
    2d66:	e9 81       	ldd	r30, Y+1	; 0x01
    2d68:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	80 83       	st	Z, r24
    2d6e:	2e c0       	rjmp	.+92     	; 0x2dcc <WiFi_checkConnection+0x94>
        return ;
    }
    else
    {
        if(is_subset(Rec_Data, "STATUS:3"))
    2d70:	85 e2       	ldi	r24, 0x25	; 37
    2d72:	93 e0       	ldi	r25, 0x03	; 3
    2d74:	23 e1       	ldi	r18, 0x13	; 19
    2d76:	31 e0       	ldi	r19, 0x01	; 1
    2d78:	b9 01       	movw	r22, r18
    2d7a:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2d7e:	88 23       	and	r24, r24
    2d80:	29 f0       	breq	.+10     	; 0x2d8c <WiFi_checkConnection+0x54>
		 *pStatus = WIFI_AP_Connected;
    2d82:	e9 81       	ldd	r30, Y+1	; 0x01
    2d84:	fa 81       	ldd	r31, Y+2	; 0x02
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	80 83       	st	Z, r24
    2d8a:	20 c0       	rjmp	.+64     	; 0x2dcc <WiFi_checkConnection+0x94>
		else if(is_subset(Rec_Data,  "STATUS:4"))
    2d8c:	85 e2       	ldi	r24, 0x25	; 37
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	2c e1       	ldi	r18, 0x1C	; 28
    2d92:	31 e0       	ldi	r19, 0x01	; 1
    2d94:	b9 01       	movw	r22, r18
    2d96:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2d9a:	88 23       	and	r24, r24
    2d9c:	29 f0       	breq	.+10     	; 0x2da8 <WiFi_checkConnection+0x70>
		 *pStatus = WIFI_AP_Disconnected;
    2d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2da0:	fa 81       	ldd	r31, Y+2	; 0x02
    2da2:	84 e0       	ldi	r24, 0x04	; 4
    2da4:	80 83       	st	Z, r24
    2da6:	12 c0       	rjmp	.+36     	; 0x2dcc <WiFi_checkConnection+0x94>
		else if(is_subset(Rec_Data,  "STATUS:5"))
    2da8:	85 e2       	ldi	r24, 0x25	; 37
    2daa:	93 e0       	ldi	r25, 0x03	; 3
    2dac:	25 e2       	ldi	r18, 0x25	; 37
    2dae:	31 e0       	ldi	r19, 0x01	; 1
    2db0:	b9 01       	movw	r22, r18
    2db2:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2db6:	88 23       	and	r24, r24
    2db8:	29 f0       	breq	.+10     	; 0x2dc4 <WiFi_checkConnection+0x8c>
		 *pStatus = WIFI_AP_Connection_Fail;
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	85 e0       	ldi	r24, 0x05	; 5
    2dc0:	80 83       	st	Z, r24
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <WiFi_checkConnection+0x94>
		else /* For any unexpected result   */
         *pStatus = WIFI_AP_Connection_Fail;
    2dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc8:	85 e0       	ldi	r24, 0x05	; 5
    2dca:	80 83       	st	Z, r24
        return ;
    }
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <WiFi_start>:

void WiFi_start(uint8* Domain, uint8* Port, WIFI_Socket_Result_Type * pRresult )
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	c5 54       	subi	r28, 0x45	; 69
    2de0:	d0 40       	sbci	r29, 0x00	; 0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	fe 01       	movw	r30, r28
    2dee:	e0 5c       	subi	r30, 0xC0	; 192
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    2df6:	fe 01       	movw	r30, r28
    2df8:	ee 5b       	subi	r30, 0xBE	; 190
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	71 83       	std	Z+1, r23	; 0x01
    2dfe:	60 83       	st	Z, r22
    2e00:	fe 01       	movw	r30, r28
    2e02:	ec 5b       	subi	r30, 0xBC	; 188
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	51 83       	std	Z+1, r21	; 0x01
    2e08:	40 83       	st	Z, r20
    uint8 ATCommand[60];
    WIFI_BufferMemoryReset(ATCommand,0,60);
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	4c e3       	ldi	r20, 0x3C	; 60
    2e12:	0e 94 c6 13 	call	0x278c	; 0x278c <WIFI_BufferMemoryReset>
    sprintf(ATCommand, "AT+CIPSTART=\"%s\",\"%s\",%s\r\n", "TCP", Domain,Port);
    2e16:	8d b7       	in	r24, 0x3d	; 61
    2e18:	9e b7       	in	r25, 0x3e	; 62
    2e1a:	0a 97       	sbiw	r24, 0x0a	; 10
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	9e bf       	out	0x3e, r25	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	8d bf       	out	0x3d, r24	; 61
    2e26:	ad b7       	in	r26, 0x3d	; 61
    2e28:	be b7       	in	r27, 0x3e	; 62
    2e2a:	11 96       	adiw	r26, 0x01	; 1
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	11 96       	adiw	r26, 0x01	; 1
    2e32:	9c 93       	st	X, r25
    2e34:	8e 93       	st	-X, r24
    2e36:	8e e2       	ldi	r24, 0x2E	; 46
    2e38:	91 e0       	ldi	r25, 0x01	; 1
    2e3a:	13 96       	adiw	r26, 0x03	; 3
    2e3c:	9c 93       	st	X, r25
    2e3e:	8e 93       	st	-X, r24
    2e40:	12 97       	sbiw	r26, 0x02	; 2
    2e42:	89 e4       	ldi	r24, 0x49	; 73
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	15 96       	adiw	r26, 0x05	; 5
    2e48:	9c 93       	st	X, r25
    2e4a:	8e 93       	st	-X, r24
    2e4c:	14 97       	sbiw	r26, 0x04	; 4
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e0 5c       	subi	r30, 0xC0	; 192
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	17 96       	adiw	r26, 0x07	; 7
    2e5a:	9c 93       	st	X, r25
    2e5c:	8e 93       	st	-X, r24
    2e5e:	16 97       	sbiw	r26, 0x06	; 6
    2e60:	fe 01       	movw	r30, r28
    2e62:	ee 5b       	subi	r30, 0xBE	; 190
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	19 96       	adiw	r26, 0x09	; 9
    2e6c:	9c 93       	st	X, r25
    2e6e:	8e 93       	st	-X, r24
    2e70:	18 97       	sbiw	r26, 0x08	; 8
    2e72:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <sprintf>
    2e76:	8d b7       	in	r24, 0x3d	; 61
    2e78:	9e b7       	in	r25, 0x3e	; 62
    2e7a:	0a 96       	adiw	r24, 0x0a	; 10
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	9e bf       	out	0x3e, r25	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	8d bf       	out	0x3d, r24	; 61
    ATCommand[59] = 0;
    2e86:	1c ae       	std	Y+60, r1	; 0x3c
    *pRresult = WIFI_Socket_ERROR;
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ec 5b       	subi	r30, 0xBC	; 188
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	01 90       	ld	r0, Z+
    2e90:	f0 81       	ld	r31, Z
    2e92:	e0 2d       	mov	r30, r0
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	80 83       	st	Z, r24
    WIFI_SendATCommand(ATCommand,0,"CONNECT\r\n",pRresult);
    2e98:	4d e4       	ldi	r20, 0x4D	; 77
    2e9a:	51 e0       	ldi	r21, 0x01	; 1
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ec 5b       	subi	r30, 0xBC	; 188
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	20 81       	ld	r18, Z
    2ea4:	31 81       	ldd	r19, Z+1	; 0x01
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    if(*pRresult == WIFI_OK)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ec 5b       	subi	r30, 0xBC	; 188
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	01 90       	ld	r0, Z+
    2eb8:	f0 81       	ld	r31, Z
    2eba:	e0 2d       	mov	r30, r0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	b1 f4       	brne	.+44     	; 0x2eee <WiFi_start+0x118>
    {
        *pRresult = WIFI_Socket_OK ;
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ec 5b       	subi	r30, 0xBC	; 188
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	01 90       	ld	r0, Z+
    2eca:	f0 81       	ld	r31, Z
    2ecc:	e0 2d       	mov	r30, r0
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 83       	st	Z, r24
        1."CONNECT\r\n"   then
        2."\r\nOK\r\n"
        */

       /*   So I need to catch "OK" then go ahead*/
       WIFI_Result WIFI_connection_catch_ok = WIFI_InProgress;
    2ed2:	84 e1       	ldi	r24, 0x14	; 20
    2ed4:	8d af       	std	Y+61, r24	; 0x3d
        do
        {
        WIFI_CheckRespond("\r\nOK\r\n",&WIFI_connection_catch_ok);
    2ed6:	85 e6       	ldi	r24, 0x65	; 101
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9e 01       	movw	r18, r28
    2edc:	23 5c       	subi	r18, 0xC3	; 195
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	b9 01       	movw	r22, r18
    2ee2:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
        } while (WIFI_connection_catch_ok != WIFI_OK);
    2ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <WiFi_start+0x100>
    2eec:	3d c0       	rjmp	.+122    	; 0x2f68 <WiFi_start+0x192>
    {   /*  Here case that Socket openned and I still connected*/
        /*  Wifi respond with specific respond  consist of
            1."ALREADY CONNECTED\r\n"   then
            2."\r\nERROR\r\n"
            */
        if(is_subset(Rec_Data, "ALREADY CONNECTED\r\n"))
    2eee:	85 e2       	ldi	r24, 0x25	; 37
    2ef0:	93 e0       	ldi	r25, 0x03	; 3
    2ef2:	27 e5       	ldi	r18, 0x57	; 87
    2ef4:	31 e0       	ldi	r19, 0x01	; 1
    2ef6:	b9 01       	movw	r22, r18
    2ef8:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2efc:	88 23       	and	r24, r24
    2efe:	b1 f0       	breq	.+44     	; 0x2f2c <WiFi_start+0x156>
        {
            *pRresult = WIFI_Socket_AlreadyConnected ;
    2f00:	fe 01       	movw	r30, r28
    2f02:	ec 5b       	subi	r30, 0xBC	; 188
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	01 90       	ld	r0, Z+
    2f08:	f0 81       	ld	r31, Z
    2f0a:	e0 2d       	mov	r30, r0
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	80 83       	st	Z, r24

            /*   So I need to catch "ERROR" then go ahead*/
            WIFI_Result WIFI_connection_catch_ok = WIFI_InProgress;
    2f10:	84 e1       	ldi	r24, 0x14	; 20
    2f12:	8e af       	std	Y+62, r24	; 0x3e
            do
            {
            WIFI_CheckRespond("\r\nERROR\r\n",&WIFI_connection_catch_ok);
    2f14:	8b e6       	ldi	r24, 0x6B	; 107
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	9e 01       	movw	r18, r28
    2f1a:	22 5c       	subi	r18, 0xC2	; 194
    2f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1e:	b9 01       	movw	r22, r18
    2f20:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
            } while (WIFI_connection_catch_ok != WIFI_OK);
    2f24:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f26:	81 30       	cpi	r24, 0x01	; 1
    2f28:	a9 f7       	brne	.-22     	; 0x2f14 <WiFi_start+0x13e>
    2f2a:	1e c0       	rjmp	.+60     	; 0x2f68 <WiFi_start+0x192>
        /*  Here case that Socket closed*/
        /*  Wifi respond with specific respond  consist of
            1."\r\nERROR\r\n"   then
            2."CLOSED\r\n"
            */
        else if(is_subset(Rec_Data, "\r\nERROR\r\n"))
    2f2c:	85 e2       	ldi	r24, 0x25	; 37
    2f2e:	93 e0       	ldi	r25, 0x03	; 3
    2f30:	2b e6       	ldi	r18, 0x6B	; 107
    2f32:	31 e0       	ldi	r19, 0x01	; 1
    2f34:	b9 01       	movw	r22, r18
    2f36:	0e 94 bf 12 	call	0x257e	; 0x257e <is_subset>
    2f3a:	88 23       	and	r24, r24
    2f3c:	a9 f0       	breq	.+42     	; 0x2f68 <WiFi_start+0x192>
        {
            *pRresult = WIFI_Socket_ERROR ;
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ec 5b       	subi	r30, 0xBC	; 188
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	01 90       	ld	r0, Z+
    2f46:	f0 81       	ld	r31, Z
    2f48:	e0 2d       	mov	r30, r0
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	80 83       	st	Z, r24

            /*   So I need to catch "ERROR" then go ahead*/
            WIFI_Result WIFI_connection_catch_ok = WIFI_InProgress;
    2f4e:	84 e1       	ldi	r24, 0x14	; 20
    2f50:	8f af       	std	Y+63, r24	; 0x3f
            do
            {
            WIFI_CheckRespond("CLOSED\r\n",&WIFI_connection_catch_ok);
    2f52:	85 e7       	ldi	r24, 0x75	; 117
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	9e 01       	movw	r18, r28
    2f58:	21 5c       	subi	r18, 0xC1	; 193
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	0e 94 12 13 	call	0x2624	; 0x2624 <WIFI_CheckRespond>
            } while (WIFI_connection_catch_ok != WIFI_OK);
    2f62:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	a9 f7       	brne	.-22     	; 0x2f52 <WiFi_start+0x17c>
        }

        return ;
    }

}
    2f68:	cb 5b       	subi	r28, 0xBB	; 187
    2f6a:	df 4f       	sbci	r29, 0xFF	; 255
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <WiFi_send>:


void WiFi_send(uint8* data,WIFI_SEND_Result_Type *pRresult)
{
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	cf 55       	subi	r28, 0x5F	; 95
    2f86:	d0 40       	sbci	r29, 0x00	; 0
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	fe 01       	movw	r30, r28
    2f94:	e4 5a       	subi	r30, 0xA4	; 164
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e2 5a       	subi	r30, 0xA2	; 162
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	71 83       	std	Z+1, r23	; 0x01
    2fa4:	60 83       	st	Z, r22
    uint8 Buffer_Length = 0 ;
    2fa6:	19 82       	std	Y+1, r1	; 0x01
    /*  Detect data length to send data to make WIFI know size of data will send    */
    Buffer_Length =Str_GetLength(data);
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e4 5a       	subi	r30, 0xA4	; 164
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <Str_GetLength>
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    Buffer_Length +=2 ; /*  Add 2 for "\r\n"*/
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	8e 5f       	subi	r24, 0xFE	; 254
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    uint8 ATCommand[90] = { };
    2fbe:	8a e5       	ldi	r24, 0x5A	; 90
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	32 96       	adiw	r30, 0x02	; 2
    2fc4:	df 01       	movw	r26, r30
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	1d 92       	st	X+, r1
    2fca:	9a 95       	dec	r25
    2fcc:	e9 f7       	brne	.-6      	; 0x2fc8 <WiFi_send+0x4c>
    sprintf(ATCommand, "AT+CIPSEND=%d\r\n",Buffer_Length);
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <WiFi_send+0x5a>
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <WiFi_send+0x5c>
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <WiFi_send+0x5e>
    2fda:	ed b7       	in	r30, 0x3d	; 61
    2fdc:	fe b7       	in	r31, 0x3e	; 62
    2fde:	31 96       	adiw	r30, 0x01	; 1
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	02 96       	adiw	r24, 0x02	; 2
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	8e e7       	ldi	r24, 0x7E	; 126
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	93 83       	std	Z+3, r25	; 0x03
    2fee:	82 83       	std	Z+2, r24	; 0x02
    2ff0:	35 83       	std	Z+5, r19	; 0x05
    2ff2:	24 83       	std	Z+4, r18	; 0x04
    2ff4:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <sprintf>
    2ff8:	ad b7       	in	r26, 0x3d	; 61
    2ffa:	be b7       	in	r27, 0x3e	; 62
    2ffc:	16 96       	adiw	r26, 0x06	; 6
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	be bf       	out	0x3e, r27	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	ad bf       	out	0x3d, r26	; 61
    ATCommand[89] = 0;
    3008:	fe 01       	movw	r30, r28
    300a:	e5 5a       	subi	r30, 0xA5	; 165
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	10 82       	st	Z, r1
    *pRresult = WIFI_ERROR ;
    3010:	fe 01       	movw	r30, r28
    3012:	e2 5a       	subi	r30, 0xA2	; 162
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	01 90       	ld	r0, Z+
    3018:	f0 81       	ld	r31, Z
    301a:	e0 2d       	mov	r30, r0
    301c:	10 82       	st	Z, r1
    WIFI_SendATCommand(ATCommand,0,"\r\nOK\r\n",pRresult);
    301e:	ce 01       	movw	r24, r28
    3020:	02 96       	adiw	r24, 0x02	; 2
    3022:	45 e6       	ldi	r20, 0x65	; 101
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	fe 01       	movw	r30, r28
    3028:	e2 5a       	subi	r30, 0xA2	; 162
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	20 81       	ld	r18, Z
    302e:	31 81       	ldd	r19, Z+1	; 0x01
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
    if(*pRresult == WIFI_OK)
    3036:	fe 01       	movw	r30, r28
    3038:	e2 5a       	subi	r30, 0xA2	; 162
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	01 90       	ld	r0, Z+
    303e:	f0 81       	ld	r31, Z
    3040:	e0 2d       	mov	r30, r0
    3042:	80 81       	ld	r24, Z
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	09 f0       	breq	.+2      	; 0x304a <WiFi_send+0xce>
    3048:	5b c0       	rjmp	.+182    	; 0x3100 <WiFi_send+0x184>
    {
        WIFI_BufferMemoryReset(ATCommand,0,90);
    304a:	ce 01       	movw	r24, r28
    304c:	02 96       	adiw	r24, 0x02	; 2
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	4a e5       	ldi	r20, 0x5A	; 90
    3052:	0e 94 c6 13 	call	0x278c	; 0x278c <WIFI_BufferMemoryReset>
        sprintf(ATCommand, "%s\r\n",data);
    3056:	00 d0       	rcall	.+0      	; 0x3058 <WiFi_send+0xdc>
    3058:	00 d0       	rcall	.+0      	; 0x305a <WiFi_send+0xde>
    305a:	00 d0       	rcall	.+0      	; 0x305c <WiFi_send+0xe0>
    305c:	ad b7       	in	r26, 0x3d	; 61
    305e:	be b7       	in	r27, 0x3e	; 62
    3060:	11 96       	adiw	r26, 0x01	; 1
    3062:	ce 01       	movw	r24, r28
    3064:	02 96       	adiw	r24, 0x02	; 2
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
    306c:	8e e8       	ldi	r24, 0x8E	; 142
    306e:	91 e0       	ldi	r25, 0x01	; 1
    3070:	13 96       	adiw	r26, 0x03	; 3
    3072:	9c 93       	st	X, r25
    3074:	8e 93       	st	-X, r24
    3076:	12 97       	sbiw	r26, 0x02	; 2
    3078:	fe 01       	movw	r30, r28
    307a:	e4 5a       	subi	r30, 0xA4	; 164
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	15 96       	adiw	r26, 0x05	; 5
    3084:	9c 93       	st	X, r25
    3086:	8e 93       	st	-X, r24
    3088:	14 97       	sbiw	r26, 0x04	; 4
    308a:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <sprintf>
    308e:	8d b7       	in	r24, 0x3d	; 61
    3090:	9e b7       	in	r25, 0x3e	; 62
    3092:	06 96       	adiw	r24, 0x06	; 6
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	9e bf       	out	0x3e, r25	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	8d bf       	out	0x3d, r24	; 61
        ATCommand[89] = 0;
    309e:	fe 01       	movw	r30, r28
    30a0:	e5 5a       	subi	r30, 0xA5	; 165
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	10 82       	st	Z, r1
        *pRresult = WIFI_ERROR ;
    30a6:	fe 01       	movw	r30, r28
    30a8:	e2 5a       	subi	r30, 0xA2	; 162
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	01 90       	ld	r0, Z+
    30ae:	f0 81       	ld	r31, Z
    30b0:	e0 2d       	mov	r30, r0
    30b2:	10 82       	st	Z, r1
        WIFI_SendATCommand(ATCommand,0,"\r\nSEND OK\r\n",pRresult);
    30b4:	ce 01       	movw	r24, r28
    30b6:	02 96       	adiw	r24, 0x02	; 2
    30b8:	43 e9       	ldi	r20, 0x93	; 147
    30ba:	51 e0       	ldi	r21, 0x01	; 1
    30bc:	fe 01       	movw	r30, r28
    30be:	e2 5a       	subi	r30, 0xA2	; 162
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	20 81       	ld	r18, Z
    30c4:	31 81       	ldd	r19, Z+1	; 0x01
    30c6:	60 e0       	ldi	r22, 0x00	; 0
    30c8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <WIFI_SendATCommand>
        if(*pRresult == WIFI_OK)
    30cc:	fe 01       	movw	r30, r28
    30ce:	e2 5a       	subi	r30, 0xA2	; 162
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	01 90       	ld	r0, Z+
    30d4:	f0 81       	ld	r31, Z
    30d6:	e0 2d       	mov	r30, r0
    30d8:	80 81       	ld	r24, Z
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	49 f4       	brne	.+18     	; 0x30f0 <WiFi_send+0x174>
        {
            *pRresult = WIFI_SEND_OK;
    30de:	fe 01       	movw	r30, r28
    30e0:	e2 5a       	subi	r30, 0xA2	; 162
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	01 90       	ld	r0, Z+
    30e6:	f0 81       	ld	r31, Z
    30e8:	e0 2d       	mov	r30, r0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	80 83       	st	Z, r24
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <WiFi_send+0x192>
        }
        else 
        {
            *pRresult = WIFI_SEND_ERROR;
    30f0:	fe 01       	movw	r30, r28
    30f2:	e2 5a       	subi	r30, 0xA2	; 162
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	01 90       	ld	r0, Z+
    30f8:	f0 81       	ld	r31, Z
    30fa:	e0 2d       	mov	r30, r0
    30fc:	10 82       	st	Z, r1
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <WiFi_send+0x192>
        }
    }
    else 
    {
        *pRresult = WIFI_SEND_ERROR ;
    3100:	fe 01       	movw	r30, r28
    3102:	e2 5a       	subi	r30, 0xA2	; 162
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	01 90       	ld	r0, Z+
    3108:	f0 81       	ld	r31, Z
    310a:	e0 2d       	mov	r30, r0
    310c:	10 82       	st	Z, r1
    }
    
}
    310e:	c1 5a       	subi	r28, 0xA1	; 161
    3110:	df 4f       	sbci	r29, 0xFF	; 255
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	63 e0       	ldi	r22, 0x03	; 3
    312e:	42 e0       	ldi	r20, 0x02	; 2
    3130:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	42 e0       	ldi	r20, 0x02	; 2
    313a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	42 e0       	ldi	r20, 0x02	; 2
    3144:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	61 e0       	ldi	r22, 0x01	; 1
    314c:	42 e0       	ldi	r20, 0x02	; 2
    314e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	62 e0       	ldi	r22, 0x02	; 2
    3156:	42 e0       	ldi	r20, 0x02	; 2
    3158:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	64 e0       	ldi	r22, 0x04	; 4
    3160:	42 e0       	ldi	r20, 0x02	; 2
    3162:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    316c:	88 e2       	ldi	r24, 0x28	; 40
    316e:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    #elif(CURSOR_STATE == CURSOR_ON_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_ON);
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    3172:	8e e0       	ldi	r24, 0x0E	; 14
    3174:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
}
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	c4 56       	subi	r28, 0x64	; 100
    3192:	d0 40       	sbci	r29, 0x00	; 0
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	fe 01       	movw	r30, r28
    31a0:	ec 59       	subi	r30, 0x9C	; 156
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	63 e0       	ldi	r22, 0x03	; 3
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e1 5a       	subi	r30, 0xA1	; 161
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 e8       	ldi	r26, 0x80	; 128
    31bc:	bf e3       	ldi	r27, 0x3F	; 63
    31be:	80 83       	st	Z, r24
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	a2 83       	std	Z+2, r26	; 0x02
    31c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	8e 01       	movw	r16, r28
    31c8:	05 5a       	subi	r16, 0xA5	; 165
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	fe 01       	movw	r30, r28
    31ce:	e1 5a       	subi	r30, 0xA1	; 161
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a e7       	ldi	r20, 0x7A	; 122
    31e0:	55 e4       	ldi	r21, 0x45	; 69
    31e2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 83       	st	Z, r24
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	a2 83       	std	Z+2, r26	; 0x02
    31f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31f4:	fe 01       	movw	r30, r28
    31f6:	e5 5a       	subi	r30, 0xA5	; 165
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	44 f4       	brge	.+16     	; 0x3222 <LCD_SendCommand+0x9e>
		__ticks = 1;
    3212:	fe 01       	movw	r30, r28
    3214:	e7 5a       	subi	r30, 0xA7	; 167
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	64 c0       	rjmp	.+200    	; 0x32ea <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    3222:	fe 01       	movw	r30, r28
    3224:	e5 5a       	subi	r30, 0xA5	; 165
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	0c f0       	brlt	.+2      	; 0x3242 <LCD_SendCommand+0xbe>
    3240:	43 c0       	rjmp	.+134    	; 0x32c8 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3242:	fe 01       	movw	r30, r28
    3244:	e1 5a       	subi	r30, 0xA1	; 161
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e2       	ldi	r20, 0x20	; 32
    3256:	51 e4       	ldi	r21, 0x41	; 65
    3258:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8e 01       	movw	r16, r28
    3262:	07 5a       	subi	r16, 0xA7	; 167
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	f8 01       	movw	r30, r16
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
    3278:	1f c0       	rjmp	.+62     	; 0x32b8 <LCD_SendCommand+0x134>
    327a:	fe 01       	movw	r30, r28
    327c:	e9 5a       	subi	r30, 0xA9	; 169
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 e9       	ldi	r24, 0x90	; 144
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
    3288:	fe 01       	movw	r30, r28
    328a:	e9 5a       	subi	r30, 0xA9	; 169
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_SendCommand+0x10e>
    3296:	fe 01       	movw	r30, r28
    3298:	e9 5a       	subi	r30, 0xA9	; 169
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a0:	de 01       	movw	r26, r28
    32a2:	a7 5a       	subi	r26, 0xA7	; 167
    32a4:	bf 4f       	sbci	r27, 0xFF	; 255
    32a6:	fe 01       	movw	r30, r28
    32a8:	e7 5a       	subi	r30, 0xA7	; 167
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 81       	ld	r24, Z
    32ae:	91 81       	ldd	r25, Z+1	; 0x01
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	11 96       	adiw	r26, 0x01	; 1
    32b4:	9c 93       	st	X, r25
    32b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	fe 01       	movw	r30, r28
    32ba:	e7 5a       	subi	r30, 0xA7	; 167
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	d1 f6       	brne	.-76     	; 0x327a <LCD_SendCommand+0xf6>
    32c6:	27 c0       	rjmp	.+78     	; 0x3316 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	8e 01       	movw	r16, r28
    32ca:	07 5a       	subi	r16, 0xA7	; 167
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	fe 01       	movw	r30, r28
    32d0:	e5 5a       	subi	r30, 0xA5	; 165
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	f8 01       	movw	r30, r16
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	de 01       	movw	r26, r28
    32ec:	ab 5a       	subi	r26, 0xAB	; 171
    32ee:	bf 4f       	sbci	r27, 0xFF	; 255
    32f0:	fe 01       	movw	r30, r28
    32f2:	e7 5a       	subi	r30, 0xA7	; 167
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	8d 93       	st	X+, r24
    32fc:	9c 93       	st	X, r25
    32fe:	fe 01       	movw	r30, r28
    3300:	eb 5a       	subi	r30, 0xAB	; 171
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <LCD_SendCommand+0x184>
    330c:	fe 01       	movw	r30, r28
    330e:	eb 5a       	subi	r30, 0xAB	; 171
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	62 e0       	ldi	r22, 0x02	; 2
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3320:	fe 01       	movw	r30, r28
    3322:	ef 5a       	subi	r30, 0xAF	; 175
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e8       	ldi	r26, 0x80	; 128
    332c:	bf e3       	ldi	r27, 0x3F	; 63
    332e:	80 83       	st	Z, r24
    3330:	91 83       	std	Z+1, r25	; 0x01
    3332:	a2 83       	std	Z+2, r26	; 0x02
    3334:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3336:	8e 01       	movw	r16, r28
    3338:	03 5b       	subi	r16, 0xB3	; 179
    333a:	1f 4f       	sbci	r17, 0xFF	; 255
    333c:	fe 01       	movw	r30, r28
    333e:	ef 5a       	subi	r30, 0xAF	; 175
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a e7       	ldi	r20, 0x7A	; 122
    3350:	55 e4       	ldi	r21, 0x45	; 69
    3352:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	f8 01       	movw	r30, r16
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3364:	fe 01       	movw	r30, r28
    3366:	e3 5b       	subi	r30, 0xB3	; 179
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e8       	ldi	r20, 0x80	; 128
    3378:	5f e3       	ldi	r21, 0x3F	; 63
    337a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    337e:	88 23       	and	r24, r24
    3380:	44 f4       	brge	.+16     	; 0x3392 <LCD_SendCommand+0x20e>
		__ticks = 1;
    3382:	fe 01       	movw	r30, r28
    3384:	e5 5b       	subi	r30, 0xB5	; 181
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
    3390:	64 c0       	rjmp	.+200    	; 0x345a <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    3392:	fe 01       	movw	r30, r28
    3394:	e3 5b       	subi	r30, 0xB3	; 179
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	3f ef       	ldi	r19, 0xFF	; 255
    33a4:	4f e7       	ldi	r20, 0x7F	; 127
    33a6:	57 e4       	ldi	r21, 0x47	; 71
    33a8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    33ac:	18 16       	cp	r1, r24
    33ae:	0c f0       	brlt	.+2      	; 0x33b2 <LCD_SendCommand+0x22e>
    33b0:	43 c0       	rjmp	.+134    	; 0x3438 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b2:	fe 01       	movw	r30, r28
    33b4:	ef 5a       	subi	r30, 0xAF	; 175
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	60 81       	ld	r22, Z
    33ba:	71 81       	ldd	r23, Z+1	; 0x01
    33bc:	82 81       	ldd	r24, Z+2	; 0x02
    33be:	93 81       	ldd	r25, Z+3	; 0x03
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e2       	ldi	r20, 0x20	; 32
    33c6:	51 e4       	ldi	r21, 0x41	; 65
    33c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	8e 01       	movw	r16, r28
    33d2:	05 5b       	subi	r16, 0xB5	; 181
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	1f c0       	rjmp	.+62     	; 0x3428 <LCD_SendCommand+0x2a4>
    33ea:	fe 01       	movw	r30, r28
    33ec:	e7 5b       	subi	r30, 0xB7	; 183
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 e9       	ldi	r24, 0x90	; 144
    33f2:	91 e0       	ldi	r25, 0x01	; 1
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
    33f8:	fe 01       	movw	r30, r28
    33fa:	e7 5b       	subi	r30, 0xB7	; 183
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	80 81       	ld	r24, Z
    3400:	91 81       	ldd	r25, Z+1	; 0x01
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	f1 f7       	brne	.-4      	; 0x3402 <LCD_SendCommand+0x27e>
    3406:	fe 01       	movw	r30, r28
    3408:	e7 5b       	subi	r30, 0xB7	; 183
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	de 01       	movw	r26, r28
    3412:	a5 5b       	subi	r26, 0xB5	; 181
    3414:	bf 4f       	sbci	r27, 0xFF	; 255
    3416:	fe 01       	movw	r30, r28
    3418:	e5 5b       	subi	r30, 0xB5	; 181
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	9c 93       	st	X, r25
    3426:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3428:	fe 01       	movw	r30, r28
    342a:	e5 5b       	subi	r30, 0xB5	; 181
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	d1 f6       	brne	.-76     	; 0x33ea <LCD_SendCommand+0x266>
    3436:	27 c0       	rjmp	.+78     	; 0x3486 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	8e 01       	movw	r16, r28
    343a:	05 5b       	subi	r16, 0xB5	; 181
    343c:	1f 4f       	sbci	r17, 0xFF	; 255
    343e:	fe 01       	movw	r30, r28
    3440:	e3 5b       	subi	r30, 0xB3	; 179
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	60 81       	ld	r22, Z
    3446:	71 81       	ldd	r23, Z+1	; 0x01
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	93 81       	ldd	r25, Z+3	; 0x03
    344c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	f8 01       	movw	r30, r16
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	de 01       	movw	r26, r28
    345c:	a9 5b       	subi	r26, 0xB9	; 185
    345e:	bf 4f       	sbci	r27, 0xFF	; 255
    3460:	fe 01       	movw	r30, r28
    3462:	e5 5b       	subi	r30, 0xB5	; 181
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	8d 93       	st	X+, r24
    346c:	9c 93       	st	X, r25
    346e:	fe 01       	movw	r30, r28
    3470:	e9 5b       	subi	r30, 0xB9	; 185
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <LCD_SendCommand+0x2f4>
    347c:	fe 01       	movw	r30, r28
    347e:	e9 5b       	subi	r30, 0xB9	; 185
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    3486:	de 01       	movw	r26, r28
    3488:	ad 59       	subi	r26, 0x9D	; 157
    348a:	bf 4f       	sbci	r27, 0xFF	; 255
    348c:	fe 01       	movw	r30, r28
    348e:	ec 59       	subi	r30, 0x9C	; 156
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	82 95       	swap	r24
    3496:	8f 70       	andi	r24, 0x0F	; 15
    3498:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    349a:	fe 01       	movw	r30, r28
    349c:	ed 59       	subi	r30, 0x9D	; 157
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	98 2f       	mov	r25, r24
    34a4:	91 70       	andi	r25, 0x01	; 1
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	49 2f       	mov	r20, r25
    34ac:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    34b0:	fe 01       	movw	r30, r28
    34b2:	ed 59       	subi	r30, 0x9D	; 157
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	86 95       	lsr	r24
    34ba:	98 2f       	mov	r25, r24
    34bc:	91 70       	andi	r25, 0x01	; 1
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	61 e0       	ldi	r22, 0x01	; 1
    34c2:	49 2f       	mov	r20, r25
    34c4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    34c8:	fe 01       	movw	r30, r28
    34ca:	ed 59       	subi	r30, 0x9D	; 157
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	80 81       	ld	r24, Z
    34d0:	86 95       	lsr	r24
    34d2:	86 95       	lsr	r24
    34d4:	98 2f       	mov	r25, r24
    34d6:	91 70       	andi	r25, 0x01	; 1
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	49 2f       	mov	r20, r25
    34de:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    34e2:	fe 01       	movw	r30, r28
    34e4:	ed 59       	subi	r30, 0x9D	; 157
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	86 95       	lsr	r24
    34ec:	86 95       	lsr	r24
    34ee:	86 95       	lsr	r24
    34f0:	98 2f       	mov	r25, r24
    34f2:	91 70       	andi	r25, 0x01	; 1
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	64 e0       	ldi	r22, 0x04	; 4
    34f8:	49 2f       	mov	r20, r25
    34fa:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    34fe:	fe 01       	movw	r30, r28
    3500:	ed 5b       	subi	r30, 0xBD	; 189
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	a0 e8       	ldi	r26, 0x80	; 128
    350a:	bf e3       	ldi	r27, 0x3F	; 63
    350c:	80 83       	st	Z, r24
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	a2 83       	std	Z+2, r26	; 0x02
    3512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3514:	8e 01       	movw	r16, r28
    3516:	01 5c       	subi	r16, 0xC1	; 193
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	fe 01       	movw	r30, r28
    351c:	ed 5b       	subi	r30, 0xBD	; 189
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	60 81       	ld	r22, Z
    3522:	71 81       	ldd	r23, Z+1	; 0x01
    3524:	82 81       	ldd	r24, Z+2	; 0x02
    3526:	93 81       	ldd	r25, Z+3	; 0x03
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a e7       	ldi	r20, 0x7A	; 122
    352e:	55 e4       	ldi	r21, 0x45	; 69
    3530:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	f8 01       	movw	r30, r16
    353a:	80 83       	st	Z, r24
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	a2 83       	std	Z+2, r26	; 0x02
    3540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3542:	fe 01       	movw	r30, r28
    3544:	ff 96       	adiw	r30, 0x3f	; 63
    3546:	60 81       	ld	r22, Z
    3548:	71 81       	ldd	r23, Z+1	; 0x01
    354a:	82 81       	ldd	r24, Z+2	; 0x02
    354c:	93 81       	ldd	r25, Z+3	; 0x03
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <LCD_SendCommand+0x3e4>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9e af       	std	Y+62, r25	; 0x3e
    3564:	8d af       	std	Y+61, r24	; 0x3d
    3566:	46 c0       	rjmp	.+140    	; 0x35f4 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    3568:	fe 01       	movw	r30, r28
    356a:	ff 96       	adiw	r30, 0x3f	; 63
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	64 f5       	brge	.+88     	; 0x35dc <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	fe 01       	movw	r30, r28
    3586:	ed 5b       	subi	r30, 0xBD	; 189
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e2       	ldi	r20, 0x20	; 32
    3598:	51 e4       	ldi	r21, 0x41	; 65
    359a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9e af       	std	Y+62, r25	; 0x3e
    35b0:	8d af       	std	Y+61, r24	; 0x3d
    35b2:	0f c0       	rjmp	.+30     	; 0x35d2 <LCD_SendCommand+0x44e>
    35b4:	80 e9       	ldi	r24, 0x90	; 144
    35b6:	91 e0       	ldi	r25, 0x01	; 1
    35b8:	9c af       	std	Y+60, r25	; 0x3c
    35ba:	8b af       	std	Y+59, r24	; 0x3b
    35bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    35be:	9c ad       	ldd	r25, Y+60	; 0x3c
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <LCD_SendCommand+0x43c>
    35c4:	9c af       	std	Y+60, r25	; 0x3c
    35c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	9e af       	std	Y+62, r25	; 0x3e
    35d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    35d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	69 f7       	brne	.-38     	; 0x35b4 <LCD_SendCommand+0x430>
    35da:	16 c0       	rjmp	.+44     	; 0x3608 <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35dc:	fe 01       	movw	r30, r28
    35de:	ff 96       	adiw	r30, 0x3f	; 63
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9e af       	std	Y+62, r25	; 0x3e
    35f2:	8d af       	std	Y+61, r24	; 0x3d
    35f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35f8:	9a af       	std	Y+58, r25	; 0x3a
    35fa:	89 af       	std	Y+57, r24	; 0x39
    35fc:	89 ad       	ldd	r24, Y+57	; 0x39
    35fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	f1 f7       	brne	.-4      	; 0x3600 <LCD_SendCommand+0x47c>
    3604:	9a af       	std	Y+58, r25	; 0x3a
    3606:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	62 e0       	ldi	r22, 0x02	; 2
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	a0 e8       	ldi	r26, 0x80	; 128
    3618:	bf e3       	ldi	r27, 0x3F	; 63
    361a:	8d ab       	std	Y+53, r24	; 0x35
    361c:	9e ab       	std	Y+54, r25	; 0x36
    361e:	af ab       	std	Y+55, r26	; 0x37
    3620:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3622:	6d a9       	ldd	r22, Y+53	; 0x35
    3624:	7e a9       	ldd	r23, Y+54	; 0x36
    3626:	8f a9       	ldd	r24, Y+55	; 0x37
    3628:	98 ad       	ldd	r25, Y+56	; 0x38
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4a e7       	ldi	r20, 0x7A	; 122
    3630:	55 e4       	ldi	r21, 0x45	; 69
    3632:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	89 ab       	std	Y+49, r24	; 0x31
    363c:	9a ab       	std	Y+50, r25	; 0x32
    363e:	ab ab       	std	Y+51, r26	; 0x33
    3640:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3642:	69 a9       	ldd	r22, Y+49	; 0x31
    3644:	7a a9       	ldd	r23, Y+50	; 0x32
    3646:	8b a9       	ldd	r24, Y+51	; 0x33
    3648:	9c a9       	ldd	r25, Y+52	; 0x34
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	2c f4       	brge	.+10     	; 0x3664 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	98 ab       	std	Y+48, r25	; 0x30
    3660:	8f a7       	std	Y+47, r24	; 0x2f
    3662:	3f c0       	rjmp	.+126    	; 0x36e2 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    3664:	69 a9       	ldd	r22, Y+49	; 0x31
    3666:	7a a9       	ldd	r23, Y+50	; 0x32
    3668:	8b a9       	ldd	r24, Y+51	; 0x33
    366a:	9c a9       	ldd	r25, Y+52	; 0x34
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	3f ef       	ldi	r19, 0xFF	; 255
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	57 e4       	ldi	r21, 0x47	; 71
    3674:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	4c f5       	brge	.+82     	; 0x36ce <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367c:	6d a9       	ldd	r22, Y+53	; 0x35
    367e:	7e a9       	ldd	r23, Y+54	; 0x36
    3680:	8f a9       	ldd	r24, Y+55	; 0x37
    3682:	98 ad       	ldd	r25, Y+56	; 0x38
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e2       	ldi	r20, 0x20	; 32
    368a:	51 e4       	ldi	r21, 0x41	; 65
    368c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	98 ab       	std	Y+48, r25	; 0x30
    36a2:	8f a7       	std	Y+47, r24	; 0x2f
    36a4:	0f c0       	rjmp	.+30     	; 0x36c4 <LCD_SendCommand+0x540>
    36a6:	80 e9       	ldi	r24, 0x90	; 144
    36a8:	91 e0       	ldi	r25, 0x01	; 1
    36aa:	9e a7       	std	Y+46, r25	; 0x2e
    36ac:	8d a7       	std	Y+45, r24	; 0x2d
    36ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    36b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <LCD_SendCommand+0x52e>
    36b6:	9e a7       	std	Y+46, r25	; 0x2e
    36b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    36bc:	98 a9       	ldd	r25, Y+48	; 0x30
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	98 ab       	std	Y+48, r25	; 0x30
    36c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c6:	98 a9       	ldd	r25, Y+48	; 0x30
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <LCD_SendCommand+0x522>
    36cc:	14 c0       	rjmp	.+40     	; 0x36f6 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	69 a9       	ldd	r22, Y+49	; 0x31
    36d0:	7a a9       	ldd	r23, Y+50	; 0x32
    36d2:	8b a9       	ldd	r24, Y+51	; 0x33
    36d4:	9c a9       	ldd	r25, Y+52	; 0x34
    36d6:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	98 ab       	std	Y+48, r25	; 0x30
    36e0:	8f a7       	std	Y+47, r24	; 0x2f
    36e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e4:	98 a9       	ldd	r25, Y+48	; 0x30
    36e6:	9c a7       	std	Y+44, r25	; 0x2c
    36e8:	8b a7       	std	Y+43, r24	; 0x2b
    36ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <LCD_SendCommand+0x56a>
    36f2:	9c a7       	std	Y+44, r25	; 0x2c
    36f4:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	62 e0       	ldi	r22, 0x02	; 2
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a0 e8       	ldi	r26, 0x80	; 128
    3706:	bf e3       	ldi	r27, 0x3F	; 63
    3708:	8f a3       	std	Y+39, r24	; 0x27
    370a:	98 a7       	std	Y+40, r25	; 0x28
    370c:	a9 a7       	std	Y+41, r26	; 0x29
    370e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3710:	6f a1       	ldd	r22, Y+39	; 0x27
    3712:	78 a5       	ldd	r23, Y+40	; 0x28
    3714:	89 a5       	ldd	r24, Y+41	; 0x29
    3716:	9a a5       	ldd	r25, Y+42	; 0x2a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	4a e7       	ldi	r20, 0x7A	; 122
    371e:	55 e4       	ldi	r21, 0x45	; 69
    3720:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8b a3       	std	Y+35, r24	; 0x23
    372a:	9c a3       	std	Y+36, r25	; 0x24
    372c:	ad a3       	std	Y+37, r26	; 0x25
    372e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3730:	6b a1       	ldd	r22, Y+35	; 0x23
    3732:	7c a1       	ldd	r23, Y+36	; 0x24
    3734:	8d a1       	ldd	r24, Y+37	; 0x25
    3736:	9e a1       	ldd	r25, Y+38	; 0x26
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e8       	ldi	r20, 0x80	; 128
    373e:	5f e3       	ldi	r21, 0x3F	; 63
    3740:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3744:	88 23       	and	r24, r24
    3746:	2c f4       	brge	.+10     	; 0x3752 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9a a3       	std	Y+34, r25	; 0x22
    374e:	89 a3       	std	Y+33, r24	; 0x21
    3750:	3f c0       	rjmp	.+126    	; 0x37d0 <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    3752:	6b a1       	ldd	r22, Y+35	; 0x23
    3754:	7c a1       	ldd	r23, Y+36	; 0x24
    3756:	8d a1       	ldd	r24, Y+37	; 0x25
    3758:	9e a1       	ldd	r25, Y+38	; 0x26
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	3f ef       	ldi	r19, 0xFF	; 255
    375e:	4f e7       	ldi	r20, 0x7F	; 127
    3760:	57 e4       	ldi	r21, 0x47	; 71
    3762:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3766:	18 16       	cp	r1, r24
    3768:	4c f5       	brge	.+82     	; 0x37bc <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376a:	6f a1       	ldd	r22, Y+39	; 0x27
    376c:	78 a5       	ldd	r23, Y+40	; 0x28
    376e:	89 a5       	ldd	r24, Y+41	; 0x29
    3770:	9a a5       	ldd	r25, Y+42	; 0x2a
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e2       	ldi	r20, 0x20	; 32
    3778:	51 e4       	ldi	r21, 0x41	; 65
    377a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	9a a3       	std	Y+34, r25	; 0x22
    3790:	89 a3       	std	Y+33, r24	; 0x21
    3792:	0f c0       	rjmp	.+30     	; 0x37b2 <LCD_SendCommand+0x62e>
    3794:	80 e9       	ldi	r24, 0x90	; 144
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	98 a3       	std	Y+32, r25	; 0x20
    379a:	8f 8f       	std	Y+31, r24	; 0x1f
    379c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    379e:	98 a1       	ldd	r25, Y+32	; 0x20
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <LCD_SendCommand+0x61c>
    37a4:	98 a3       	std	Y+32, r25	; 0x20
    37a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a8:	89 a1       	ldd	r24, Y+33	; 0x21
    37aa:	9a a1       	ldd	r25, Y+34	; 0x22
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	9a a3       	std	Y+34, r25	; 0x22
    37b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b2:	89 a1       	ldd	r24, Y+33	; 0x21
    37b4:	9a a1       	ldd	r25, Y+34	; 0x22
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	69 f7       	brne	.-38     	; 0x3794 <LCD_SendCommand+0x610>
    37ba:	14 c0       	rjmp	.+40     	; 0x37e4 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37bc:	6b a1       	ldd	r22, Y+35	; 0x23
    37be:	7c a1       	ldd	r23, Y+36	; 0x24
    37c0:	8d a1       	ldd	r24, Y+37	; 0x25
    37c2:	9e a1       	ldd	r25, Y+38	; 0x26
    37c4:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	9a a3       	std	Y+34, r25	; 0x22
    37ce:	89 a3       	std	Y+33, r24	; 0x21
    37d0:	89 a1       	ldd	r24, Y+33	; 0x21
    37d2:	9a a1       	ldd	r25, Y+34	; 0x22
    37d4:	9e 8f       	std	Y+30, r25	; 0x1e
    37d6:	8d 8f       	std	Y+29, r24	; 0x1d
    37d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <LCD_SendCommand+0x658>
    37e0:	9e 8f       	std	Y+30, r25	; 0x1e
    37e2:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    37e4:	de 01       	movw	r26, r28
    37e6:	ad 59       	subi	r26, 0x9D	; 157
    37e8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ea:	fe 01       	movw	r30, r28
    37ec:	ec 59       	subi	r30, 0x9C	; 156
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	8f 70       	andi	r24, 0x0F	; 15
    37f4:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    37f6:	fe 01       	movw	r30, r28
    37f8:	ed 59       	subi	r30, 0x9D	; 157
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	98 2f       	mov	r25, r24
    3800:	91 70       	andi	r25, 0x01	; 1
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	49 2f       	mov	r20, r25
    3808:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    380c:	fe 01       	movw	r30, r28
    380e:	ed 59       	subi	r30, 0x9D	; 157
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	86 95       	lsr	r24
    3816:	98 2f       	mov	r25, r24
    3818:	91 70       	andi	r25, 0x01	; 1
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	49 2f       	mov	r20, r25
    3820:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3824:	fe 01       	movw	r30, r28
    3826:	ed 59       	subi	r30, 0x9D	; 157
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 81       	ld	r24, Z
    382c:	86 95       	lsr	r24
    382e:	86 95       	lsr	r24
    3830:	98 2f       	mov	r25, r24
    3832:	91 70       	andi	r25, 0x01	; 1
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	62 e0       	ldi	r22, 0x02	; 2
    3838:	49 2f       	mov	r20, r25
    383a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    383e:	fe 01       	movw	r30, r28
    3840:	ed 59       	subi	r30, 0x9D	; 157
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	86 95       	lsr	r24
    3848:	86 95       	lsr	r24
    384a:	86 95       	lsr	r24
    384c:	98 2f       	mov	r25, r24
    384e:	91 70       	andi	r25, 0x01	; 1
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	64 e0       	ldi	r22, 0x04	; 4
    3854:	49 2f       	mov	r20, r25
    3856:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e8       	ldi	r26, 0x80	; 128
    3860:	bf e3       	ldi	r27, 0x3F	; 63
    3862:	89 8f       	std	Y+25, r24	; 0x19
    3864:	9a 8f       	std	Y+26, r25	; 0x1a
    3866:	ab 8f       	std	Y+27, r26	; 0x1b
    3868:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	69 8d       	ldd	r22, Y+25	; 0x19
    386c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    386e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a e7       	ldi	r20, 0x7A	; 122
    3878:	55 e4       	ldi	r21, 0x45	; 69
    387a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8d 8b       	std	Y+21, r24	; 0x15
    3884:	9e 8b       	std	Y+22, r25	; 0x16
    3886:	af 8b       	std	Y+23, r26	; 0x17
    3888:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    388a:	6d 89       	ldd	r22, Y+21	; 0x15
    388c:	7e 89       	ldd	r23, Y+22	; 0x16
    388e:	8f 89       	ldd	r24, Y+23	; 0x17
    3890:	98 8d       	ldd	r25, Y+24	; 0x18
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <LCD_SendCommand+0x728>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9c 8b       	std	Y+20, r25	; 0x14
    38a8:	8b 8b       	std	Y+19, r24	; 0x13
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    38ac:	6d 89       	ldd	r22, Y+21	; 0x15
    38ae:	7e 89       	ldd	r23, Y+22	; 0x16
    38b0:	8f 89       	ldd	r24, Y+23	; 0x17
    38b2:	98 8d       	ldd	r25, Y+24	; 0x18
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	69 8d       	ldd	r22, Y+25	; 0x19
    38c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9c 8b       	std	Y+20, r25	; 0x14
    38ea:	8b 8b       	std	Y+19, r24	; 0x13
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <LCD_SendCommand+0x788>
    38ee:	80 e9       	ldi	r24, 0x90	; 144
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	9a 8b       	std	Y+18, r25	; 0x12
    38f4:	89 8b       	std	Y+17, r24	; 0x11
    38f6:	89 89       	ldd	r24, Y+17	; 0x11
    38f8:	9a 89       	ldd	r25, Y+18	; 0x12
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <LCD_SendCommand+0x776>
    38fe:	9a 8b       	std	Y+18, r25	; 0x12
    3900:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	8b 89       	ldd	r24, Y+19	; 0x13
    3904:	9c 89       	ldd	r25, Y+20	; 0x14
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9c 8b       	std	Y+20, r25	; 0x14
    390a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	8b 89       	ldd	r24, Y+19	; 0x13
    390e:	9c 89       	ldd	r25, Y+20	; 0x14
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <LCD_SendCommand+0x76a>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	6d 89       	ldd	r22, Y+21	; 0x15
    3918:	7e 89       	ldd	r23, Y+22	; 0x16
    391a:	8f 89       	ldd	r24, Y+23	; 0x17
    391c:	98 8d       	ldd	r25, Y+24	; 0x18
    391e:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9c 8b       	std	Y+20, r25	; 0x14
    3928:	8b 8b       	std	Y+19, r24	; 0x13
    392a:	8b 89       	ldd	r24, Y+19	; 0x13
    392c:	9c 89       	ldd	r25, Y+20	; 0x14
    392e:	98 8b       	std	Y+16, r25	; 0x10
    3930:	8f 87       	std	Y+15, r24	; 0x0f
    3932:	8f 85       	ldd	r24, Y+15	; 0x0f
    3934:	98 89       	ldd	r25, Y+16	; 0x10
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <LCD_SendCommand+0x7b2>
    393a:	98 8b       	std	Y+16, r25	; 0x10
    393c:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	62 e0       	ldi	r22, 0x02	; 2
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a0 e8       	ldi	r26, 0x80	; 128
    394e:	bf e3       	ldi	r27, 0x3F	; 63
    3950:	8b 87       	std	Y+11, r24	; 0x0b
    3952:	9c 87       	std	Y+12, r25	; 0x0c
    3954:	ad 87       	std	Y+13, r26	; 0x0d
    3956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3958:	6b 85       	ldd	r22, Y+11	; 0x0b
    395a:	7c 85       	ldd	r23, Y+12	; 0x0c
    395c:	8d 85       	ldd	r24, Y+13	; 0x0d
    395e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a e7       	ldi	r20, 0x7A	; 122
    3966:	55 e4       	ldi	r21, 0x45	; 69
    3968:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	8f 83       	std	Y+7, r24	; 0x07
    3972:	98 87       	std	Y+8, r25	; 0x08
    3974:	a9 87       	std	Y+9, r26	; 0x09
    3976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3978:	6f 81       	ldd	r22, Y+7	; 0x07
    397a:	78 85       	ldd	r23, Y+8	; 0x08
    397c:	89 85       	ldd	r24, Y+9	; 0x09
    397e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	2c f4       	brge	.+10     	; 0x399a <LCD_SendCommand+0x816>
		__ticks = 1;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9e 83       	std	Y+6, r25	; 0x06
    3996:	8d 83       	std	Y+5, r24	; 0x05
    3998:	3f c0       	rjmp	.+126    	; 0x3a18 <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    399a:	6f 81       	ldd	r22, Y+7	; 0x07
    399c:	78 85       	ldd	r23, Y+8	; 0x08
    399e:	89 85       	ldd	r24, Y+9	; 0x09
    39a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	3f ef       	ldi	r19, 0xFF	; 255
    39a6:	4f e7       	ldi	r20, 0x7F	; 127
    39a8:	57 e4       	ldi	r21, 0x47	; 71
    39aa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    39ae:	18 16       	cp	r1, r24
    39b0:	4c f5       	brge	.+82     	; 0x3a04 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e2       	ldi	r20, 0x20	; 32
    39c0:	51 e4       	ldi	r21, 0x41	; 65
    39c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <LCD_SendCommand+0x876>
    39dc:	80 e9       	ldi	r24, 0x90	; 144
    39de:	91 e0       	ldi	r25, 0x01	; 1
    39e0:	9c 83       	std	Y+4, r25	; 0x04
    39e2:	8b 83       	std	Y+3, r24	; 0x03
    39e4:	8b 81       	ldd	r24, Y+3	; 0x03
    39e6:	9c 81       	ldd	r25, Y+4	; 0x04
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <LCD_SendCommand+0x864>
    39ec:	9c 83       	std	Y+4, r25	; 0x04
    39ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f0:	8d 81       	ldd	r24, Y+5	; 0x05
    39f2:	9e 81       	ldd	r25, Y+6	; 0x06
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9e 83       	std	Y+6, r25	; 0x06
    39f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fa:	8d 81       	ldd	r24, Y+5	; 0x05
    39fc:	9e 81       	ldd	r25, Y+6	; 0x06
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	69 f7       	brne	.-38     	; 0x39dc <LCD_SendCommand+0x858>
    3a02:	14 c0       	rjmp	.+40     	; 0x3a2c <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a04:	6f 81       	ldd	r22, Y+7	; 0x07
    3a06:	78 85       	ldd	r23, Y+8	; 0x08
    3a08:	89 85       	ldd	r24, Y+9	; 0x09
    3a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1c:	9a 83       	std	Y+2, r25	; 0x02
    3a1e:	89 83       	std	Y+1, r24	; 0x01
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <LCD_SendCommand+0x8a0>
    3a28:	9a 83       	std	Y+2, r25	; 0x02
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    3a2c:	cc 59       	subi	r28, 0x9C	; 156
    3a2e:	df 4f       	sbci	r29, 0xFF	; 255
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	08 95       	ret

00003a44 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	c4 56       	subi	r28, 0x64	; 100
    3a52:	d0 40       	sbci	r29, 0x00	; 0
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ec 59       	subi	r30, 0x9C	; 156
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	63 e0       	ldi	r22, 0x03	; 3
    3a6a:	41 e0       	ldi	r20, 0x01	; 1
    3a6c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3a70:	fe 01       	movw	r30, r28
    3a72:	e1 5a       	subi	r30, 0xA1	; 161
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a0 e8       	ldi	r26, 0x80	; 128
    3a7c:	bf e3       	ldi	r27, 0x3F	; 63
    3a7e:	80 83       	st	Z, r24
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	a2 83       	std	Z+2, r26	; 0x02
    3a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a86:	8e 01       	movw	r16, r28
    3a88:	05 5a       	subi	r16, 0xA5	; 165
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e1 5a       	subi	r30, 0xA1	; 161
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	4a e7       	ldi	r20, 0x7A	; 122
    3aa0:	55 e4       	ldi	r21, 0x45	; 69
    3aa2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	f8 01       	movw	r30, r16
    3aac:	80 83       	st	Z, r24
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	a2 83       	std	Z+2, r26	; 0x02
    3ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e5 5a       	subi	r30, 0xA5	; 165
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e8       	ldi	r20, 0x80	; 128
    3ac8:	5f e3       	ldi	r21, 0x3F	; 63
    3aca:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3ace:	88 23       	and	r24, r24
    3ad0:	44 f4       	brge	.+16     	; 0x3ae2 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e7 5a       	subi	r30, 0xA7	; 167
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	64 c0       	rjmp	.+200    	; 0x3baa <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e5 5a       	subi	r30, 0xA5	; 165
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	3f ef       	ldi	r19, 0xFF	; 255
    3af4:	4f e7       	ldi	r20, 0x7F	; 127
    3af6:	57 e4       	ldi	r21, 0x47	; 71
    3af8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3afc:	18 16       	cp	r1, r24
    3afe:	0c f0       	brlt	.+2      	; 0x3b02 <LCD_DisplayCharacter+0xbe>
    3b00:	43 c0       	rjmp	.+134    	; 0x3b88 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	fe 01       	movw	r30, r28
    3b04:	e1 5a       	subi	r30, 0xA1	; 161
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e2       	ldi	r20, 0x20	; 32
    3b16:	51 e4       	ldi	r21, 0x41	; 65
    3b18:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	8e 01       	movw	r16, r28
    3b22:	07 5a       	subi	r16, 0xA7	; 167
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	f8 01       	movw	r30, r16
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	80 83       	st	Z, r24
    3b38:	1f c0       	rjmp	.+62     	; 0x3b78 <LCD_DisplayCharacter+0x134>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e9 5a       	subi	r30, 0xA9	; 169
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e9       	ldi	r24, 0x90	; 144
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	80 83       	st	Z, r24
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e9 5a       	subi	r30, 0xA9	; 169
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	91 81       	ldd	r25, Z+1	; 0x01
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <LCD_DisplayCharacter+0x10e>
    3b56:	fe 01       	movw	r30, r28
    3b58:	e9 5a       	subi	r30, 0xA9	; 169
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b60:	de 01       	movw	r26, r28
    3b62:	a7 5a       	subi	r26, 0xA7	; 167
    3b64:	bf 4f       	sbci	r27, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	e7 5a       	subi	r30, 0xA7	; 167
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	11 96       	adiw	r26, 0x01	; 1
    3b74:	9c 93       	st	X, r25
    3b76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e7 5a       	subi	r30, 0xA7	; 167
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	d1 f6       	brne	.-76     	; 0x3b3a <LCD_DisplayCharacter+0xf6>
    3b86:	27 c0       	rjmp	.+78     	; 0x3bd6 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b88:	8e 01       	movw	r16, r28
    3b8a:	07 5a       	subi	r16, 0xA7	; 167
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e5 5a       	subi	r30, 0xA5	; 165
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	60 81       	ld	r22, Z
    3b96:	71 81       	ldd	r23, Z+1	; 0x01
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	de 01       	movw	r26, r28
    3bac:	ab 5a       	subi	r26, 0xAB	; 171
    3bae:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e7 5a       	subi	r30, 0xA7	; 167
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	8d 93       	st	X+, r24
    3bbc:	9c 93       	st	X, r25
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	eb 5a       	subi	r30, 0xAB	; 171
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <LCD_DisplayCharacter+0x184>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	eb 5a       	subi	r30, 0xAB	; 171
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	62 e0       	ldi	r22, 0x02	; 2
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3be0:	fe 01       	movw	r30, r28
    3be2:	ef 5a       	subi	r30, 0xAF	; 175
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 e8       	ldi	r26, 0x80	; 128
    3bec:	bf e3       	ldi	r27, 0x3F	; 63
    3bee:	80 83       	st	Z, r24
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	a2 83       	std	Z+2, r26	; 0x02
    3bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	8e 01       	movw	r16, r28
    3bf8:	03 5b       	subi	r16, 0xB3	; 179
    3bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	ef 5a       	subi	r30, 0xAF	; 175
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	4a e7       	ldi	r20, 0x7A	; 122
    3c10:	55 e4       	ldi	r21, 0x45	; 69
    3c12:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	80 83       	st	Z, r24
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	a2 83       	std	Z+2, r26	; 0x02
    3c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c24:	fe 01       	movw	r30, r28
    3c26:	e3 5b       	subi	r30, 0xB3	; 179
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e8       	ldi	r20, 0x80	; 128
    3c38:	5f e3       	ldi	r21, 0x3F	; 63
    3c3a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3c3e:	88 23       	and	r24, r24
    3c40:	44 f4       	brge	.+16     	; 0x3c52 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    3c42:	fe 01       	movw	r30, r28
    3c44:	e5 5b       	subi	r30, 0xB5	; 181
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
    3c50:	64 c0       	rjmp	.+200    	; 0x3d1a <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    3c52:	fe 01       	movw	r30, r28
    3c54:	e3 5b       	subi	r30, 0xB3	; 179
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	3f ef       	ldi	r19, 0xFF	; 255
    3c64:	4f e7       	ldi	r20, 0x7F	; 127
    3c66:	57 e4       	ldi	r21, 0x47	; 71
    3c68:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3c6c:	18 16       	cp	r1, r24
    3c6e:	0c f0       	brlt	.+2      	; 0x3c72 <LCD_DisplayCharacter+0x22e>
    3c70:	43 c0       	rjmp	.+134    	; 0x3cf8 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c72:	fe 01       	movw	r30, r28
    3c74:	ef 5a       	subi	r30, 0xAF	; 175
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	82 81       	ldd	r24, Z+2	; 0x02
    3c7e:	93 81       	ldd	r25, Z+3	; 0x03
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e2       	ldi	r20, 0x20	; 32
    3c86:	51 e4       	ldi	r21, 0x41	; 65
    3c88:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	8e 01       	movw	r16, r28
    3c92:	05 5b       	subi	r16, 0xB5	; 181
    3c94:	1f 4f       	sbci	r17, 0xFF	; 255
    3c96:	bc 01       	movw	r22, r24
    3c98:	cd 01       	movw	r24, r26
    3c9a:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	f8 01       	movw	r30, r16
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	80 83       	st	Z, r24
    3ca8:	1f c0       	rjmp	.+62     	; 0x3ce8 <LCD_DisplayCharacter+0x2a4>
    3caa:	fe 01       	movw	r30, r28
    3cac:	e7 5b       	subi	r30, 0xB7	; 183
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	80 e9       	ldi	r24, 0x90	; 144
    3cb2:	91 e0       	ldi	r25, 0x01	; 1
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	80 83       	st	Z, r24
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e7 5b       	subi	r30, 0xB7	; 183
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <LCD_DisplayCharacter+0x27e>
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e7 5b       	subi	r30, 0xB7	; 183
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd0:	de 01       	movw	r26, r28
    3cd2:	a5 5b       	subi	r26, 0xB5	; 181
    3cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e5 5b       	subi	r30, 0xB5	; 181
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	11 96       	adiw	r26, 0x01	; 1
    3ce4:	9c 93       	st	X, r25
    3ce6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e5 5b       	subi	r30, 0xB5	; 181
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	d1 f6       	brne	.-76     	; 0x3caa <LCD_DisplayCharacter+0x266>
    3cf6:	27 c0       	rjmp	.+78     	; 0x3d46 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf8:	8e 01       	movw	r16, r28
    3cfa:	05 5b       	subi	r16, 0xB5	; 181
    3cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e3 5b       	subi	r30, 0xB3	; 179
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	f8 01       	movw	r30, r16
    3d16:	91 83       	std	Z+1, r25	; 0x01
    3d18:	80 83       	st	Z, r24
    3d1a:	de 01       	movw	r26, r28
    3d1c:	a9 5b       	subi	r26, 0xB9	; 185
    3d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	e5 5b       	subi	r30, 0xB5	; 181
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	8d 93       	st	X+, r24
    3d2c:	9c 93       	st	X, r25
    3d2e:	fe 01       	movw	r30, r28
    3d30:	e9 5b       	subi	r30, 0xB9	; 185
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	80 81       	ld	r24, Z
    3d36:	91 81       	ldd	r25, Z+1	; 0x01
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <LCD_DisplayCharacter+0x2f4>
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e9 5b       	subi	r30, 0xB9	; 185
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    3d46:	de 01       	movw	r26, r28
    3d48:	ad 59       	subi	r26, 0x9D	; 157
    3d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	ec 59       	subi	r30, 0x9C	; 156
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	80 81       	ld	r24, Z
    3d54:	82 95       	swap	r24
    3d56:	8f 70       	andi	r24, 0x0F	; 15
    3d58:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ed 59       	subi	r30, 0x9D	; 157
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	98 2f       	mov	r25, r24
    3d64:	91 70       	andi	r25, 0x01	; 1
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	49 2f       	mov	r20, r25
    3d6c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 59       	subi	r30, 0x9D	; 157
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 81       	ld	r24, Z
    3d78:	86 95       	lsr	r24
    3d7a:	98 2f       	mov	r25, r24
    3d7c:	91 70       	andi	r25, 0x01	; 1
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	61 e0       	ldi	r22, 0x01	; 1
    3d82:	49 2f       	mov	r20, r25
    3d84:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3d88:	fe 01       	movw	r30, r28
    3d8a:	ed 59       	subi	r30, 0x9D	; 157
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	86 95       	lsr	r24
    3d92:	86 95       	lsr	r24
    3d94:	98 2f       	mov	r25, r24
    3d96:	91 70       	andi	r25, 0x01	; 1
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	62 e0       	ldi	r22, 0x02	; 2
    3d9c:	49 2f       	mov	r20, r25
    3d9e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    3da2:	fe 01       	movw	r30, r28
    3da4:	ed 59       	subi	r30, 0x9D	; 157
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 81       	ld	r24, Z
    3daa:	86 95       	lsr	r24
    3dac:	86 95       	lsr	r24
    3dae:	86 95       	lsr	r24
    3db0:	98 2f       	mov	r25, r24
    3db2:	91 70       	andi	r25, 0x01	; 1
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	64 e0       	ldi	r22, 0x04	; 4
    3db8:	49 2f       	mov	r20, r25
    3dba:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ed 5b       	subi	r30, 0xBD	; 189
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	a0 e8       	ldi	r26, 0x80	; 128
    3dca:	bf e3       	ldi	r27, 0x3F	; 63
    3dcc:	80 83       	st	Z, r24
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	a2 83       	std	Z+2, r26	; 0x02
    3dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd4:	8e 01       	movw	r16, r28
    3dd6:	01 5c       	subi	r16, 0xC1	; 193
    3dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dda:	fe 01       	movw	r30, r28
    3ddc:	ed 5b       	subi	r30, 0xBD	; 189
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	60 81       	ld	r22, Z
    3de2:	71 81       	ldd	r23, Z+1	; 0x01
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	93 81       	ldd	r25, Z+3	; 0x03
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	4a e7       	ldi	r20, 0x7A	; 122
    3dee:	55 e4       	ldi	r21, 0x45	; 69
    3df0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	f8 01       	movw	r30, r16
    3dfa:	80 83       	st	Z, r24
    3dfc:	91 83       	std	Z+1, r25	; 0x01
    3dfe:	a2 83       	std	Z+2, r26	; 0x02
    3e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e02:	fe 01       	movw	r30, r28
    3e04:	ff 96       	adiw	r30, 0x3f	; 63
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e8       	ldi	r20, 0x80	; 128
    3e14:	5f e3       	ldi	r21, 0x3F	; 63
    3e16:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3e1a:	88 23       	and	r24, r24
    3e1c:	2c f4       	brge	.+10     	; 0x3e28 <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9e af       	std	Y+62, r25	; 0x3e
    3e24:	8d af       	std	Y+61, r24	; 0x3d
    3e26:	46 c0       	rjmp	.+140    	; 0x3eb4 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ff 96       	adiw	r30, 0x3f	; 63
    3e2c:	60 81       	ld	r22, Z
    3e2e:	71 81       	ldd	r23, Z+1	; 0x01
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	93 81       	ldd	r25, Z+3	; 0x03
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	3f ef       	ldi	r19, 0xFF	; 255
    3e38:	4f e7       	ldi	r20, 0x7F	; 127
    3e3a:	57 e4       	ldi	r21, 0x47	; 71
    3e3c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3e40:	18 16       	cp	r1, r24
    3e42:	64 f5       	brge	.+88     	; 0x3e9c <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e44:	fe 01       	movw	r30, r28
    3e46:	ed 5b       	subi	r30, 0xBD	; 189
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	60 81       	ld	r22, Z
    3e4c:	71 81       	ldd	r23, Z+1	; 0x01
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e2       	ldi	r20, 0x20	; 32
    3e58:	51 e4       	ldi	r21, 0x41	; 65
    3e5a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	bc 01       	movw	r22, r24
    3e64:	cd 01       	movw	r24, r26
    3e66:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	9e af       	std	Y+62, r25	; 0x3e
    3e70:	8d af       	std	Y+61, r24	; 0x3d
    3e72:	0f c0       	rjmp	.+30     	; 0x3e92 <LCD_DisplayCharacter+0x44e>
    3e74:	80 e9       	ldi	r24, 0x90	; 144
    3e76:	91 e0       	ldi	r25, 0x01	; 1
    3e78:	9c af       	std	Y+60, r25	; 0x3c
    3e7a:	8b af       	std	Y+59, r24	; 0x3b
    3e7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e80:	01 97       	sbiw	r24, 0x01	; 1
    3e82:	f1 f7       	brne	.-4      	; 0x3e80 <LCD_DisplayCharacter+0x43c>
    3e84:	9c af       	std	Y+60, r25	; 0x3c
    3e86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e88:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	9e af       	std	Y+62, r25	; 0x3e
    3e90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	69 f7       	brne	.-38     	; 0x3e74 <LCD_DisplayCharacter+0x430>
    3e9a:	16 c0       	rjmp	.+44     	; 0x3ec8 <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ff 96       	adiw	r30, 0x3f	; 63
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	93 81       	ldd	r25, Z+3	; 0x03
    3ea8:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	9e af       	std	Y+62, r25	; 0x3e
    3eb2:	8d af       	std	Y+61, r24	; 0x3d
    3eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3eb8:	9a af       	std	Y+58, r25	; 0x3a
    3eba:	89 af       	std	Y+57, r24	; 0x39
    3ebc:	89 ad       	ldd	r24, Y+57	; 0x39
    3ebe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <LCD_DisplayCharacter+0x47c>
    3ec4:	9a af       	std	Y+58, r25	; 0x3a
    3ec6:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	62 e0       	ldi	r22, 0x02	; 2
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	a0 e8       	ldi	r26, 0x80	; 128
    3ed8:	bf e3       	ldi	r27, 0x3F	; 63
    3eda:	8d ab       	std	Y+53, r24	; 0x35
    3edc:	9e ab       	std	Y+54, r25	; 0x36
    3ede:	af ab       	std	Y+55, r26	; 0x37
    3ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	4a e7       	ldi	r20, 0x7A	; 122
    3ef0:	55 e4       	ldi	r21, 0x45	; 69
    3ef2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	89 ab       	std	Y+49, r24	; 0x31
    3efc:	9a ab       	std	Y+50, r25	; 0x32
    3efe:	ab ab       	std	Y+51, r26	; 0x33
    3f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f02:	69 a9       	ldd	r22, Y+49	; 0x31
    3f04:	7a a9       	ldd	r23, Y+50	; 0x32
    3f06:	8b a9       	ldd	r24, Y+51	; 0x33
    3f08:	9c a9       	ldd	r25, Y+52	; 0x34
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e8       	ldi	r20, 0x80	; 128
    3f10:	5f e3       	ldi	r21, 0x3F	; 63
    3f12:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    3f16:	88 23       	and	r24, r24
    3f18:	2c f4       	brge	.+10     	; 0x3f24 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	98 ab       	std	Y+48, r25	; 0x30
    3f20:	8f a7       	std	Y+47, r24	; 0x2f
    3f22:	3f c0       	rjmp	.+126    	; 0x3fa2 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    3f24:	69 a9       	ldd	r22, Y+49	; 0x31
    3f26:	7a a9       	ldd	r23, Y+50	; 0x32
    3f28:	8b a9       	ldd	r24, Y+51	; 0x33
    3f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	3f ef       	ldi	r19, 0xFF	; 255
    3f30:	4f e7       	ldi	r20, 0x7F	; 127
    3f32:	57 e4       	ldi	r21, 0x47	; 71
    3f34:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    3f38:	18 16       	cp	r1, r24
    3f3a:	4c f5       	brge	.+82     	; 0x3f8e <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3c:	6d a9       	ldd	r22, Y+53	; 0x35
    3f3e:	7e a9       	ldd	r23, Y+54	; 0x36
    3f40:	8f a9       	ldd	r24, Y+55	; 0x37
    3f42:	98 ad       	ldd	r25, Y+56	; 0x38
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e2       	ldi	r20, 0x20	; 32
    3f4a:	51 e4       	ldi	r21, 0x41	; 65
    3f4c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	98 ab       	std	Y+48, r25	; 0x30
    3f62:	8f a7       	std	Y+47, r24	; 0x2f
    3f64:	0f c0       	rjmp	.+30     	; 0x3f84 <LCD_DisplayCharacter+0x540>
    3f66:	80 e9       	ldi	r24, 0x90	; 144
    3f68:	91 e0       	ldi	r25, 0x01	; 1
    3f6a:	9e a7       	std	Y+46, r25	; 0x2e
    3f6c:	8d a7       	std	Y+45, r24	; 0x2d
    3f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f70:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <LCD_DisplayCharacter+0x52e>
    3f76:	9e a7       	std	Y+46, r25	; 0x2e
    3f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	98 ab       	std	Y+48, r25	; 0x30
    3f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f86:	98 a9       	ldd	r25, Y+48	; 0x30
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	69 f7       	brne	.-38     	; 0x3f66 <LCD_DisplayCharacter+0x522>
    3f8c:	14 c0       	rjmp	.+40     	; 0x3fb6 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    3f90:	7a a9       	ldd	r23, Y+50	; 0x32
    3f92:	8b a9       	ldd	r24, Y+51	; 0x33
    3f94:	9c a9       	ldd	r25, Y+52	; 0x34
    3f96:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	98 ab       	std	Y+48, r25	; 0x30
    3fa0:	8f a7       	std	Y+47, r24	; 0x2f
    3fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    3fa6:	9c a7       	std	Y+44, r25	; 0x2c
    3fa8:	8b a7       	std	Y+43, r24	; 0x2b
    3faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <LCD_DisplayCharacter+0x56a>
    3fb2:	9c a7       	std	Y+44, r25	; 0x2c
    3fb4:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	62 e0       	ldi	r22, 0x02	; 2
    3fba:	41 e0       	ldi	r20, 0x01	; 1
    3fbc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	a0 e8       	ldi	r26, 0x80	; 128
    3fc6:	bf e3       	ldi	r27, 0x3F	; 63
    3fc8:	8f a3       	std	Y+39, r24	; 0x27
    3fca:	98 a7       	std	Y+40, r25	; 0x28
    3fcc:	a9 a7       	std	Y+41, r26	; 0x29
    3fce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	4a e7       	ldi	r20, 0x7A	; 122
    3fde:	55 e4       	ldi	r21, 0x45	; 69
    3fe0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	8b a3       	std	Y+35, r24	; 0x23
    3fea:	9c a3       	std	Y+36, r25	; 0x24
    3fec:	ad a3       	std	Y+37, r26	; 0x25
    3fee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	40 e8       	ldi	r20, 0x80	; 128
    3ffe:	5f e3       	ldi	r21, 0x3F	; 63
    4000:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4004:	88 23       	and	r24, r24
    4006:	2c f4       	brge	.+10     	; 0x4012 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	9a a3       	std	Y+34, r25	; 0x22
    400e:	89 a3       	std	Y+33, r24	; 0x21
    4010:	3f c0       	rjmp	.+126    	; 0x4090 <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    4012:	6b a1       	ldd	r22, Y+35	; 0x23
    4014:	7c a1       	ldd	r23, Y+36	; 0x24
    4016:	8d a1       	ldd	r24, Y+37	; 0x25
    4018:	9e a1       	ldd	r25, Y+38	; 0x26
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	3f ef       	ldi	r19, 0xFF	; 255
    401e:	4f e7       	ldi	r20, 0x7F	; 127
    4020:	57 e4       	ldi	r21, 0x47	; 71
    4022:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4026:	18 16       	cp	r1, r24
    4028:	4c f5       	brge	.+82     	; 0x407c <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402a:	6f a1       	ldd	r22, Y+39	; 0x27
    402c:	78 a5       	ldd	r23, Y+40	; 0x28
    402e:	89 a5       	ldd	r24, Y+41	; 0x29
    4030:	9a a5       	ldd	r25, Y+42	; 0x2a
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e2       	ldi	r20, 0x20	; 32
    4038:	51 e4       	ldi	r21, 0x41	; 65
    403a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	9a a3       	std	Y+34, r25	; 0x22
    4050:	89 a3       	std	Y+33, r24	; 0x21
    4052:	0f c0       	rjmp	.+30     	; 0x4072 <LCD_DisplayCharacter+0x62e>
    4054:	80 e9       	ldi	r24, 0x90	; 144
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	98 a3       	std	Y+32, r25	; 0x20
    405a:	8f 8f       	std	Y+31, r24	; 0x1f
    405c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    405e:	98 a1       	ldd	r25, Y+32	; 0x20
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <LCD_DisplayCharacter+0x61c>
    4064:	98 a3       	std	Y+32, r25	; 0x20
    4066:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4068:	89 a1       	ldd	r24, Y+33	; 0x21
    406a:	9a a1       	ldd	r25, Y+34	; 0x22
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	9a a3       	std	Y+34, r25	; 0x22
    4070:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4072:	89 a1       	ldd	r24, Y+33	; 0x21
    4074:	9a a1       	ldd	r25, Y+34	; 0x22
    4076:	00 97       	sbiw	r24, 0x00	; 0
    4078:	69 f7       	brne	.-38     	; 0x4054 <LCD_DisplayCharacter+0x610>
    407a:	14 c0       	rjmp	.+40     	; 0x40a4 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407c:	6b a1       	ldd	r22, Y+35	; 0x23
    407e:	7c a1       	ldd	r23, Y+36	; 0x24
    4080:	8d a1       	ldd	r24, Y+37	; 0x25
    4082:	9e a1       	ldd	r25, Y+38	; 0x26
    4084:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	9a a3       	std	Y+34, r25	; 0x22
    408e:	89 a3       	std	Y+33, r24	; 0x21
    4090:	89 a1       	ldd	r24, Y+33	; 0x21
    4092:	9a a1       	ldd	r25, Y+34	; 0x22
    4094:	9e 8f       	std	Y+30, r25	; 0x1e
    4096:	8d 8f       	std	Y+29, r24	; 0x1d
    4098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    409a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <LCD_DisplayCharacter+0x658>
    40a0:	9e 8f       	std	Y+30, r25	; 0x1e
    40a2:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    40a4:	de 01       	movw	r26, r28
    40a6:	ad 59       	subi	r26, 0x9D	; 157
    40a8:	bf 4f       	sbci	r27, 0xFF	; 255
    40aa:	fe 01       	movw	r30, r28
    40ac:	ec 59       	subi	r30, 0x9C	; 156
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	8f 70       	andi	r24, 0x0F	; 15
    40b4:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    40b6:	fe 01       	movw	r30, r28
    40b8:	ed 59       	subi	r30, 0x9D	; 157
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 81       	ld	r24, Z
    40be:	98 2f       	mov	r25, r24
    40c0:	91 70       	andi	r25, 0x01	; 1
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	49 2f       	mov	r20, r25
    40c8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    40cc:	fe 01       	movw	r30, r28
    40ce:	ed 59       	subi	r30, 0x9D	; 157
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	86 95       	lsr	r24
    40d6:	98 2f       	mov	r25, r24
    40d8:	91 70       	andi	r25, 0x01	; 1
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	49 2f       	mov	r20, r25
    40e0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    40e4:	fe 01       	movw	r30, r28
    40e6:	ed 59       	subi	r30, 0x9D	; 157
    40e8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ea:	80 81       	ld	r24, Z
    40ec:	86 95       	lsr	r24
    40ee:	86 95       	lsr	r24
    40f0:	98 2f       	mov	r25, r24
    40f2:	91 70       	andi	r25, 0x01	; 1
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	62 e0       	ldi	r22, 0x02	; 2
    40f8:	49 2f       	mov	r20, r25
    40fa:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    40fe:	fe 01       	movw	r30, r28
    4100:	ed 59       	subi	r30, 0x9D	; 157
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	86 95       	lsr	r24
    4108:	86 95       	lsr	r24
    410a:	86 95       	lsr	r24
    410c:	98 2f       	mov	r25, r24
    410e:	91 70       	andi	r25, 0x01	; 1
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	64 e0       	ldi	r22, 0x04	; 4
    4114:	49 2f       	mov	r20, r25
    4116:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a0 e8       	ldi	r26, 0x80	; 128
    4120:	bf e3       	ldi	r27, 0x3F	; 63
    4122:	89 8f       	std	Y+25, r24	; 0x19
    4124:	9a 8f       	std	Y+26, r25	; 0x1a
    4126:	ab 8f       	std	Y+27, r26	; 0x1b
    4128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412a:	69 8d       	ldd	r22, Y+25	; 0x19
    412c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    412e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	4a e7       	ldi	r20, 0x7A	; 122
    4138:	55 e4       	ldi	r21, 0x45	; 69
    413a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	8d 8b       	std	Y+21, r24	; 0x15
    4144:	9e 8b       	std	Y+22, r25	; 0x16
    4146:	af 8b       	std	Y+23, r26	; 0x17
    4148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    414a:	6d 89       	ldd	r22, Y+21	; 0x15
    414c:	7e 89       	ldd	r23, Y+22	; 0x16
    414e:	8f 89       	ldd	r24, Y+23	; 0x17
    4150:	98 8d       	ldd	r25, Y+24	; 0x18
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e8       	ldi	r20, 0x80	; 128
    4158:	5f e3       	ldi	r21, 0x3F	; 63
    415a:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    415e:	88 23       	and	r24, r24
    4160:	2c f4       	brge	.+10     	; 0x416c <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	9c 8b       	std	Y+20, r25	; 0x14
    4168:	8b 8b       	std	Y+19, r24	; 0x13
    416a:	3f c0       	rjmp	.+126    	; 0x41ea <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    416c:	6d 89       	ldd	r22, Y+21	; 0x15
    416e:	7e 89       	ldd	r23, Y+22	; 0x16
    4170:	8f 89       	ldd	r24, Y+23	; 0x17
    4172:	98 8d       	ldd	r25, Y+24	; 0x18
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	3f ef       	ldi	r19, 0xFF	; 255
    4178:	4f e7       	ldi	r20, 0x7F	; 127
    417a:	57 e4       	ldi	r21, 0x47	; 71
    417c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4180:	18 16       	cp	r1, r24
    4182:	4c f5       	brge	.+82     	; 0x41d6 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4184:	69 8d       	ldd	r22, Y+25	; 0x19
    4186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    418a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	40 e2       	ldi	r20, 0x20	; 32
    4192:	51 e4       	ldi	r21, 0x41	; 65
    4194:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	bc 01       	movw	r22, r24
    419e:	cd 01       	movw	r24, r26
    41a0:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	9c 8b       	std	Y+20, r25	; 0x14
    41aa:	8b 8b       	std	Y+19, r24	; 0x13
    41ac:	0f c0       	rjmp	.+30     	; 0x41cc <LCD_DisplayCharacter+0x788>
    41ae:	80 e9       	ldi	r24, 0x90	; 144
    41b0:	91 e0       	ldi	r25, 0x01	; 1
    41b2:	9a 8b       	std	Y+18, r25	; 0x12
    41b4:	89 8b       	std	Y+17, r24	; 0x11
    41b6:	89 89       	ldd	r24, Y+17	; 0x11
    41b8:	9a 89       	ldd	r25, Y+18	; 0x12
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <LCD_DisplayCharacter+0x776>
    41be:	9a 8b       	std	Y+18, r25	; 0x12
    41c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c2:	8b 89       	ldd	r24, Y+19	; 0x13
    41c4:	9c 89       	ldd	r25, Y+20	; 0x14
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	9c 8b       	std	Y+20, r25	; 0x14
    41ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41cc:	8b 89       	ldd	r24, Y+19	; 0x13
    41ce:	9c 89       	ldd	r25, Y+20	; 0x14
    41d0:	00 97       	sbiw	r24, 0x00	; 0
    41d2:	69 f7       	brne	.-38     	; 0x41ae <LCD_DisplayCharacter+0x76a>
    41d4:	14 c0       	rjmp	.+40     	; 0x41fe <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d6:	6d 89       	ldd	r22, Y+21	; 0x15
    41d8:	7e 89       	ldd	r23, Y+22	; 0x16
    41da:	8f 89       	ldd	r24, Y+23	; 0x17
    41dc:	98 8d       	ldd	r25, Y+24	; 0x18
    41de:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	9c 8b       	std	Y+20, r25	; 0x14
    41e8:	8b 8b       	std	Y+19, r24	; 0x13
    41ea:	8b 89       	ldd	r24, Y+19	; 0x13
    41ec:	9c 89       	ldd	r25, Y+20	; 0x14
    41ee:	98 8b       	std	Y+16, r25	; 0x10
    41f0:	8f 87       	std	Y+15, r24	; 0x0f
    41f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f4:	98 89       	ldd	r25, Y+16	; 0x10
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <LCD_DisplayCharacter+0x7b2>
    41fa:	98 8b       	std	Y+16, r25	; 0x10
    41fc:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	62 e0       	ldi	r22, 0x02	; 2
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_WritePin>
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	a0 e8       	ldi	r26, 0x80	; 128
    420e:	bf e3       	ldi	r27, 0x3F	; 63
    4210:	8b 87       	std	Y+11, r24	; 0x0b
    4212:	9c 87       	std	Y+12, r25	; 0x0c
    4214:	ad 87       	std	Y+13, r26	; 0x0d
    4216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4218:	6b 85       	ldd	r22, Y+11	; 0x0b
    421a:	7c 85       	ldd	r23, Y+12	; 0x0c
    421c:	8d 85       	ldd	r24, Y+13	; 0x0d
    421e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	4a e7       	ldi	r20, 0x7A	; 122
    4226:	55 e4       	ldi	r21, 0x45	; 69
    4228:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	8f 83       	std	Y+7, r24	; 0x07
    4232:	98 87       	std	Y+8, r25	; 0x08
    4234:	a9 87       	std	Y+9, r26	; 0x09
    4236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4238:	6f 81       	ldd	r22, Y+7	; 0x07
    423a:	78 85       	ldd	r23, Y+8	; 0x08
    423c:	89 85       	ldd	r24, Y+9	; 0x09
    423e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e8       	ldi	r20, 0x80	; 128
    4246:	5f e3       	ldi	r21, 0x3F	; 63
    4248:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    424c:	88 23       	and	r24, r24
    424e:	2c f4       	brge	.+10     	; 0x425a <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	9e 83       	std	Y+6, r25	; 0x06
    4256:	8d 83       	std	Y+5, r24	; 0x05
    4258:	3f c0       	rjmp	.+126    	; 0x42d8 <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    425a:	6f 81       	ldd	r22, Y+7	; 0x07
    425c:	78 85       	ldd	r23, Y+8	; 0x08
    425e:	89 85       	ldd	r24, Y+9	; 0x09
    4260:	9a 85       	ldd	r25, Y+10	; 0x0a
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	3f ef       	ldi	r19, 0xFF	; 255
    4266:	4f e7       	ldi	r20, 0x7F	; 127
    4268:	57 e4       	ldi	r21, 0x47	; 71
    426a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    426e:	18 16       	cp	r1, r24
    4270:	4c f5       	brge	.+82     	; 0x42c4 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4272:	6b 85       	ldd	r22, Y+11	; 0x0b
    4274:	7c 85       	ldd	r23, Y+12	; 0x0c
    4276:	8d 85       	ldd	r24, Y+13	; 0x0d
    4278:	9e 85       	ldd	r25, Y+14	; 0x0e
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	bc 01       	movw	r22, r24
    428c:	cd 01       	movw	r24, r26
    428e:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	9e 83       	std	Y+6, r25	; 0x06
    4298:	8d 83       	std	Y+5, r24	; 0x05
    429a:	0f c0       	rjmp	.+30     	; 0x42ba <LCD_DisplayCharacter+0x876>
    429c:	80 e9       	ldi	r24, 0x90	; 144
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	9c 83       	std	Y+4, r25	; 0x04
    42a2:	8b 83       	std	Y+3, r24	; 0x03
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	01 97       	sbiw	r24, 0x01	; 1
    42aa:	f1 f7       	brne	.-4      	; 0x42a8 <LCD_DisplayCharacter+0x864>
    42ac:	9c 83       	std	Y+4, r25	; 0x04
    42ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	9e 81       	ldd	r25, Y+6	; 0x06
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	9e 83       	std	Y+6, r25	; 0x06
    42b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ba:	8d 81       	ldd	r24, Y+5	; 0x05
    42bc:	9e 81       	ldd	r25, Y+6	; 0x06
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	69 f7       	brne	.-38     	; 0x429c <LCD_DisplayCharacter+0x858>
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c4:	6f 81       	ldd	r22, Y+7	; 0x07
    42c6:	78 85       	ldd	r23, Y+8	; 0x08
    42c8:	89 85       	ldd	r24, Y+9	; 0x09
    42ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    42cc:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	9e 83       	std	Y+6, r25	; 0x06
    42d6:	8d 83       	std	Y+5, r24	; 0x05
    42d8:	8d 81       	ldd	r24, Y+5	; 0x05
    42da:	9e 81       	ldd	r25, Y+6	; 0x06
    42dc:	9a 83       	std	Y+2, r25	; 0x02
    42de:	89 83       	std	Y+1, r24	; 0x01
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	9a 81       	ldd	r25, Y+2	; 0x02
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <LCD_DisplayCharacter+0x8a0>
    42e8:	9a 83       	std	Y+2, r25	; 0x02
    42ea:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    42ec:	80 91 8b 03 	lds	r24, 0x038B
    42f0:	8f 5f       	subi	r24, 0xFF	; 255
    42f2:	80 93 8b 03 	sts	0x038B, r24
    if(col_global == MAX_NUM_COL_LCD)
    42f6:	80 91 8b 03 	lds	r24, 0x038B
    42fa:	84 31       	cpi	r24, 0x14	; 20
    42fc:	69 f4       	brne	.+26     	; 0x4318 <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    42fe:	80 91 8a 03 	lds	r24, 0x038A
    4302:	8f 5f       	subi	r24, 0xFF	; 255
    4304:	80 93 8a 03 	sts	0x038A, r24
        col_global = 0 ;
    4308:	10 92 8b 03 	sts	0x038B, r1
        if(row_global == MAX_NUM_COL_LCD)
    430c:	80 91 8a 03 	lds	r24, 0x038A
    4310:	84 31       	cpi	r24, 0x14	; 20
    4312:	11 f4       	brne	.+4      	; 0x4318 <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    4314:	10 92 8a 03 	sts	0x038A, r1
    }
}
    4318:	cc 59       	subi	r28, 0x9C	; 156
    431a:	df 4f       	sbci	r29, 0xFF	; 255
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	f8 94       	cli
    4320:	de bf       	out	0x3e, r29	; 62
    4322:	0f be       	out	0x3f, r0	; 63
    4324:	cd bf       	out	0x3d, r28	; 61
    4326:	cf 91       	pop	r28
    4328:	df 91       	pop	r29
    432a:	1f 91       	pop	r17
    432c:	0f 91       	pop	r16
    432e:	08 95       	ret

00004330 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	00 d0       	rcall	.+0      	; 0x4336 <LCD_DisplayString+0x6>
    4336:	0f 92       	push	r0
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62
    433c:	9b 83       	std	Y+3, r25	; 0x03
    433e:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    4340:	19 82       	std	Y+1, r1	; 0x01
    4342:	0e c0       	rjmp	.+28     	; 0x4360 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	28 2f       	mov	r18, r24
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	8a 81       	ldd	r24, Y+2	; 0x02
    434c:	9b 81       	ldd	r25, Y+3	; 0x03
    434e:	fc 01       	movw	r30, r24
    4350:	e2 0f       	add	r30, r18
    4352:	f3 1f       	adc	r31, r19
    4354:	80 81       	ld	r24, Z
    4356:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_DisplayCharacter>
        it++;
    435a:	89 81       	ldd	r24, Y+1	; 0x01
    435c:	8f 5f       	subi	r24, 0xFF	; 255
    435e:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	8a 81       	ldd	r24, Y+2	; 0x02
    4368:	9b 81       	ldd	r25, Y+3	; 0x03
    436a:	fc 01       	movw	r30, r24
    436c:	e2 0f       	add	r30, r18
    436e:	f3 1f       	adc	r31, r19
    4370:	80 81       	ld	r24, Z
    4372:	88 23       	and	r24, r24
    4374:	39 f7       	brne	.-50     	; 0x4344 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	cf 91       	pop	r28
    437e:	df 91       	pop	r29
    4380:	08 95       	ret

00004382 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    4382:	df 93       	push	r29
    4384:	cf 93       	push	r28
    4386:	00 d0       	rcall	.+0      	; 0x4388 <LCD_MoveCursor+0x6>
    4388:	00 d0       	rcall	.+0      	; 0x438a <LCD_MoveCursor+0x8>
    438a:	0f 92       	push	r0
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	8a 83       	std	Y+2, r24	; 0x02
    4392:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    4394:	8a 81       	ldd	r24, Y+2	; 0x02
    4396:	28 2f       	mov	r18, r24
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	3d 83       	std	Y+5, r19	; 0x05
    439c:	2c 83       	std	Y+4, r18	; 0x04
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	9d 81       	ldd	r25, Y+5	; 0x05
    43a2:	81 30       	cpi	r24, 0x01	; 1
    43a4:	91 05       	cpc	r25, r1
    43a6:	e9 f0       	breq	.+58     	; 0x43e2 <LCD_MoveCursor+0x60>
    43a8:	2c 81       	ldd	r18, Y+4	; 0x04
    43aa:	3d 81       	ldd	r19, Y+5	; 0x05
    43ac:	22 30       	cpi	r18, 0x02	; 2
    43ae:	31 05       	cpc	r19, r1
    43b0:	2c f4       	brge	.+10     	; 0x43bc <LCD_MoveCursor+0x3a>
    43b2:	8c 81       	ldd	r24, Y+4	; 0x04
    43b4:	9d 81       	ldd	r25, Y+5	; 0x05
    43b6:	00 97       	sbiw	r24, 0x00	; 0
    43b8:	61 f0       	breq	.+24     	; 0x43d2 <LCD_MoveCursor+0x50>
    43ba:	30 c0       	rjmp	.+96     	; 0x441c <LCD_MoveCursor+0x9a>
    43bc:	2c 81       	ldd	r18, Y+4	; 0x04
    43be:	3d 81       	ldd	r19, Y+5	; 0x05
    43c0:	22 30       	cpi	r18, 0x02	; 2
    43c2:	31 05       	cpc	r19, r1
    43c4:	c1 f0       	breq	.+48     	; 0x43f6 <LCD_MoveCursor+0x74>
    43c6:	8c 81       	ldd	r24, Y+4	; 0x04
    43c8:	9d 81       	ldd	r25, Y+5	; 0x05
    43ca:	83 30       	cpi	r24, 0x03	; 3
    43cc:	91 05       	cpc	r25, r1
    43ce:	e9 f0       	breq	.+58     	; 0x440a <LCD_MoveCursor+0x88>
    43d0:	25 c0       	rjmp	.+74     	; 0x441c <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    43d2:	8b 81       	ldd	r24, Y+3	; 0x03
    43d4:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    43d6:	8b 81       	ldd	r24, Y+3	; 0x03
    43d8:	80 93 8b 03 	sts	0x038B, r24
            row_global = 0 ;
    43dc:	10 92 8a 03 	sts	0x038A, r1
    43e0:	1d c0       	rjmp	.+58     	; 0x441c <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    43e2:	8b 81       	ldd	r24, Y+3	; 0x03
    43e4:	80 5c       	subi	r24, 0xC0	; 192
    43e6:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    43e8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ea:	80 93 8b 03 	sts	0x038B, r24
            row_global = 1 ;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	80 93 8a 03 	sts	0x038A, r24
    43f4:	13 c0       	rjmp	.+38     	; 0x441c <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    43f6:	8b 81       	ldd	r24, Y+3	; 0x03
    43f8:	8c 5e       	subi	r24, 0xEC	; 236
    43fa:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	80 93 8b 03 	sts	0x038B, r24
                row_global = 2 ;
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	80 93 8a 03 	sts	0x038A, r24
    4408:	09 c0       	rjmp	.+18     	; 0x441c <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	8c 5a       	subi	r24, 0xAC	; 172
    440e:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	80 93 8b 03 	sts	0x038B, r24
                row_global = 3 ;
    4416:	83 e0       	ldi	r24, 0x03	; 3
    4418:	80 93 8a 03 	sts	0x038A, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	80 68       	ori	r24, 0x80	; 128
    4420:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
}
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	00 d0       	rcall	.+0      	; 0x443a <LCD_DisplayStringRowCol+0x6>
    443a:	00 d0       	rcall	.+0      	; 0x443c <LCD_DisplayStringRowCol+0x8>
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	9a 83       	std	Y+2, r25	; 0x02
    4442:	89 83       	std	Y+1, r24	; 0x01
    4444:	6b 83       	std	Y+3, r22	; 0x03
    4446:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    4448:	8b 81       	ldd	r24, Y+3	; 0x03
    444a:	6c 81       	ldd	r22, Y+4	; 0x04
    444c:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
}
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	cf 91       	pop	r28
    4462:	df 91       	pop	r29
    4464:	08 95       	ret

00004466 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    446e:	10 92 8b 03 	sts	0x038B, r1
    4472:	10 92 8a 03 	sts	0x038A, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
}
    447c:	cf 91       	pop	r28
    447e:	df 91       	pop	r29
    4480:	08 95       	ret

00004482 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    4482:	df 93       	push	r29
    4484:	cf 93       	push	r28
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    448a:	80 91 8b 03 	lds	r24, 0x038B
    448e:	83 31       	cpi	r24, 0x13	; 19
    4490:	89 f4       	brne	.+34     	; 0x44b4 <LCD_MoveCursorRight+0x32>
    4492:	80 91 8a 03 	lds	r24, 0x038A
    4496:	88 23       	and	r24, r24
    4498:	69 f4       	brne	.+26     	; 0x44b4 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    449a:	10 92 8b 03 	sts	0x038B, r1
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    44a4:	80 91 8a 03 	lds	r24, 0x038A
    44a8:	90 91 8b 03 	lds	r25, 0x038B
    44ac:	69 2f       	mov	r22, r25
    44ae:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    44b2:	46 c0       	rjmp	.+140    	; 0x4540 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    44b4:	80 91 8b 03 	lds	r24, 0x038B
    44b8:	83 31       	cpi	r24, 0x13	; 19
    44ba:	89 f4       	brne	.+34     	; 0x44de <LCD_MoveCursorRight+0x5c>
    44bc:	80 91 8a 03 	lds	r24, 0x038A
    44c0:	81 30       	cpi	r24, 0x01	; 1
    44c2:	69 f4       	brne	.+26     	; 0x44de <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    44c4:	10 92 8b 03 	sts	0x038B, r1
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    44ce:	80 91 8a 03 	lds	r24, 0x038A
    44d2:	90 91 8b 03 	lds	r25, 0x038B
    44d6:	69 2f       	mov	r22, r25
    44d8:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    44dc:	31 c0       	rjmp	.+98     	; 0x4540 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    44de:	80 91 8b 03 	lds	r24, 0x038B
    44e2:	83 31       	cpi	r24, 0x13	; 19
    44e4:	89 f4       	brne	.+34     	; 0x4508 <LCD_MoveCursorRight+0x86>
    44e6:	80 91 8a 03 	lds	r24, 0x038A
    44ea:	82 30       	cpi	r24, 0x02	; 2
    44ec:	69 f4       	brne	.+26     	; 0x4508 <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    44ee:	10 92 8b 03 	sts	0x038B, r1
    44f2:	83 e0       	ldi	r24, 0x03	; 3
    44f4:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    44f8:	80 91 8a 03 	lds	r24, 0x038A
    44fc:	90 91 8b 03 	lds	r25, 0x038B
    4500:	69 2f       	mov	r22, r25
    4502:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    4506:	1c c0       	rjmp	.+56     	; 0x4540 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    4508:	80 91 8b 03 	lds	r24, 0x038B
    450c:	83 31       	cpi	r24, 0x13	; 19
    450e:	81 f4       	brne	.+32     	; 0x4530 <LCD_MoveCursorRight+0xae>
    4510:	80 91 8a 03 	lds	r24, 0x038A
    4514:	83 30       	cpi	r24, 0x03	; 3
    4516:	61 f4       	brne	.+24     	; 0x4530 <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    4518:	10 92 8b 03 	sts	0x038B, r1
    451c:	10 92 8a 03 	sts	0x038A, r1
        LCD_MoveCursor(row_global,col_global);
    4520:	80 91 8a 03 	lds	r24, 0x038A
    4524:	90 91 8b 03 	lds	r25, 0x038B
    4528:	69 2f       	mov	r22, r25
    452a:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    452e:	08 c0       	rjmp	.+16     	; 0x4540 <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    4530:	84 e1       	ldi	r24, 0x14	; 20
    4532:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
        col_global++;
    4536:	80 91 8b 03 	lds	r24, 0x038B
    453a:	8f 5f       	subi	r24, 0xFF	; 255
    453c:	80 93 8b 03 	sts	0x038B, r24
    }
}
    4540:	cf 91       	pop	r28
    4542:	df 91       	pop	r29
    4544:	08 95       	ret

00004546 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    454e:	80 91 8b 03 	lds	r24, 0x038B
    4552:	88 23       	and	r24, r24
    4554:	91 f4       	brne	.+36     	; 0x457a <LCD_MoveCursorLeft+0x34>
    4556:	80 91 8a 03 	lds	r24, 0x038A
    455a:	88 23       	and	r24, r24
    455c:	71 f4       	brne	.+28     	; 0x457a <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    455e:	83 e1       	ldi	r24, 0x13	; 19
    4560:	80 93 8b 03 	sts	0x038B, r24
    4564:	83 e0       	ldi	r24, 0x03	; 3
    4566:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    456a:	80 91 8a 03 	lds	r24, 0x038A
    456e:	90 91 8b 03 	lds	r25, 0x038B
    4572:	69 2f       	mov	r22, r25
    4574:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    4578:	49 c0       	rjmp	.+146    	; 0x460c <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    457a:	80 91 8b 03 	lds	r24, 0x038B
    457e:	88 23       	and	r24, r24
    4580:	89 f4       	brne	.+34     	; 0x45a4 <LCD_MoveCursorLeft+0x5e>
    4582:	80 91 8a 03 	lds	r24, 0x038A
    4586:	81 30       	cpi	r24, 0x01	; 1
    4588:	69 f4       	brne	.+26     	; 0x45a4 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    458a:	83 e1       	ldi	r24, 0x13	; 19
    458c:	80 93 8b 03 	sts	0x038B, r24
    4590:	10 92 8a 03 	sts	0x038A, r1
        LCD_MoveCursor(row_global,col_global);
    4594:	80 91 8a 03 	lds	r24, 0x038A
    4598:	90 91 8b 03 	lds	r25, 0x038B
    459c:	69 2f       	mov	r22, r25
    459e:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    45a2:	34 c0       	rjmp	.+104    	; 0x460c <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    45a4:	80 91 8b 03 	lds	r24, 0x038B
    45a8:	88 23       	and	r24, r24
    45aa:	91 f4       	brne	.+36     	; 0x45d0 <LCD_MoveCursorLeft+0x8a>
    45ac:	80 91 8a 03 	lds	r24, 0x038A
    45b0:	82 30       	cpi	r24, 0x02	; 2
    45b2:	71 f4       	brne	.+28     	; 0x45d0 <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    45b4:	83 e1       	ldi	r24, 0x13	; 19
    45b6:	80 93 8b 03 	sts	0x038B, r24
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    45c0:	80 91 8a 03 	lds	r24, 0x038A
    45c4:	90 91 8b 03 	lds	r25, 0x038B
    45c8:	69 2f       	mov	r22, r25
    45ca:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    45ce:	1e c0       	rjmp	.+60     	; 0x460c <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    45d0:	80 91 8b 03 	lds	r24, 0x038B
    45d4:	88 23       	and	r24, r24
    45d6:	91 f4       	brne	.+36     	; 0x45fc <LCD_MoveCursorLeft+0xb6>
    45d8:	80 91 8a 03 	lds	r24, 0x038A
    45dc:	83 30       	cpi	r24, 0x03	; 3
    45de:	71 f4       	brne	.+28     	; 0x45fc <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    45e0:	83 e1       	ldi	r24, 0x13	; 19
    45e2:	80 93 8b 03 	sts	0x038B, r24
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	80 93 8a 03 	sts	0x038A, r24
        LCD_MoveCursor(row_global,col_global);
    45ec:	80 91 8a 03 	lds	r24, 0x038A
    45f0:	90 91 8b 03 	lds	r25, 0x038B
    45f4:	69 2f       	mov	r22, r25
    45f6:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    45fa:	08 c0       	rjmp	.+16     	; 0x460c <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    45fc:	80 e1       	ldi	r24, 0x10	; 16
    45fe:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
        col_global--;
    4602:	80 91 8b 03 	lds	r24, 0x038B
    4606:	81 50       	subi	r24, 0x01	; 1
    4608:	80 93 8b 03 	sts	0x038B, r24
    }
    
}
    460c:	cf 91       	pop	r28
    460e:	df 91       	pop	r29
    4610:	08 95       	ret

00004612 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    4612:	df 93       	push	r29
    4614:	cf 93       	push	r28
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    461a:	8c e1       	ldi	r24, 0x1C	; 28
    461c:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
}
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	08 95       	ret

00004626 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    462e:	88 e1       	ldi	r24, 0x18	; 24
    4630:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
}
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	00 d0       	rcall	.+0      	; 0x4640 <LCD_GenerateCharacterCGRAM+0x6>
    4640:	00 d0       	rcall	.+0      	; 0x4642 <LCD_GenerateCharacterCGRAM+0x8>
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
    4646:	9b 83       	std	Y+3, r25	; 0x03
    4648:	8a 83       	std	Y+2, r24	; 0x02
    464a:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    464c:	8c 81       	ldd	r24, Y+4	; 0x04
    464e:	88 2f       	mov	r24, r24
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	08 96       	adiw	r24, 0x08	; 8
    4654:	88 0f       	add	r24, r24
    4656:	99 1f       	adc	r25, r25
    4658:	88 0f       	add	r24, r24
    465a:	99 1f       	adc	r25, r25
    465c:	88 0f       	add	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	0e 94 c2 18 	call	0x3184	; 0x3184 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    4664:	19 82       	std	Y+1, r1	; 0x01
    4666:	0e c0       	rjmp	.+28     	; 0x4684 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	28 2f       	mov	r18, r24
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	8a 81       	ldd	r24, Y+2	; 0x02
    4670:	9b 81       	ldd	r25, Y+3	; 0x03
    4672:	fc 01       	movw	r30, r24
    4674:	e2 0f       	add	r30, r18
    4676:	f3 1f       	adc	r31, r19
    4678:	80 81       	ld	r24, Z
    467a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	8f 5f       	subi	r24, 0xFF	; 255
    4682:	89 83       	std	Y+1, r24	; 0x01
    4684:	89 81       	ldd	r24, Y+1	; 0x01
    4686:	88 30       	cpi	r24, 0x08	; 8
    4688:	78 f3       	brcs	.-34     	; 0x4668 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    468a:	0f 90       	pop	r0
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	cf 91       	pop	r28
    4694:	df 91       	pop	r29
    4696:	08 95       	ret

00004698 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    4698:	df 93       	push	r29
    469a:	cf 93       	push	r28
    469c:	0f 92       	push	r0
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
    46a2:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_DisplayCharacter>
}
    46aa:	0f 90       	pop	r0
    46ac:	cf 91       	pop	r28
    46ae:	df 91       	pop	r29
    46b0:	08 95       	ret

000046b2 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    46b2:	df 93       	push	r29
    46b4:	cf 93       	push	r28
    46b6:	00 d0       	rcall	.+0      	; 0x46b8 <LCD_DisplayCustomCharacterRowCol+0x6>
    46b8:	0f 92       	push	r0
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	89 83       	std	Y+1, r24	; 0x01
    46c0:	6a 83       	std	Y+2, r22	; 0x02
    46c2:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    46c4:	8a 81       	ldd	r24, Y+2	; 0x02
    46c6:	6b 81       	ldd	r22, Y+3	; 0x03
    46c8:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_DisplayCharacter>
}
    46d2:	0f 90       	pop	r0
    46d4:	0f 90       	pop	r0
    46d6:	0f 90       	pop	r0
    46d8:	cf 91       	pop	r28
    46da:	df 91       	pop	r29
    46dc:	08 95       	ret

000046de <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    46de:	df 93       	push	r29
    46e0:	cf 93       	push	r28
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	65 97       	sbiw	r28, 0x15	; 21
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	f8 94       	cli
    46ec:	de bf       	out	0x3e, r29	; 62
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	6a 8b       	std	Y+18, r22	; 0x12
    46f4:	7b 8b       	std	Y+19, r23	; 0x13
    46f6:	8c 8b       	std	Y+20, r24	; 0x14
    46f8:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    46fa:	8a 89       	ldd	r24, Y+18	; 0x12
    46fc:	9b 89       	ldd	r25, Y+19	; 0x13
    46fe:	9e 01       	movw	r18, r28
    4700:	2f 5f       	subi	r18, 0xFF	; 255
    4702:	3f 4f       	sbci	r19, 0xFF	; 255
    4704:	b9 01       	movw	r22, r18
    4706:	4a e0       	ldi	r20, 0x0A	; 10
    4708:	50 e0       	ldi	r21, 0x00	; 0
    470a:	0e 94 b7 28 	call	0x516e	; 0x516e <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    470e:	ce 01       	movw	r24, r28
    4710:	01 96       	adiw	r24, 0x01	; 1
    4712:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
}
    4716:	65 96       	adiw	r28, 0x15	; 21
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
    4722:	cf 91       	pop	r28
    4724:	df 91       	pop	r29
    4726:	08 95       	ret

00004728 <Int2Str>:
WIFI_SEND_Result_Type  Wifi_UploadResult ;

uint16 POT_Result ;

void Int2Str(uint8 * str , uint16 Num)
{
    4728:	df 93       	push	r29
    472a:	cf 93       	push	r28
    472c:	cd b7       	in	r28, 0x3d	; 61
    472e:	de b7       	in	r29, 0x3e	; 62
    4730:	27 97       	sbiw	r28, 0x07	; 7
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	9d 83       	std	Y+5, r25	; 0x05
    473e:	8c 83       	std	Y+4, r24	; 0x04
    4740:	7f 83       	std	Y+7, r23	; 0x07
    4742:	6e 83       	std	Y+6, r22	; 0x06
	uint16 temp = 0 ;
    4744:	1b 82       	std	Y+3, r1	; 0x03
    4746:	1a 82       	std	Y+2, r1	; 0x02
    4748:	26 c0       	rjmp	.+76     	; 0x4796 <Int2Str+0x6e>
	while(Num)
	{
		temp *= 10 ;
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	9b 81       	ldd	r25, Y+3	; 0x03
    474e:	9c 01       	movw	r18, r24
    4750:	22 0f       	add	r18, r18
    4752:	33 1f       	adc	r19, r19
    4754:	c9 01       	movw	r24, r18
    4756:	88 0f       	add	r24, r24
    4758:	99 1f       	adc	r25, r25
    475a:	88 0f       	add	r24, r24
    475c:	99 1f       	adc	r25, r25
    475e:	82 0f       	add	r24, r18
    4760:	93 1f       	adc	r25, r19
    4762:	9b 83       	std	Y+3, r25	; 0x03
    4764:	8a 83       	std	Y+2, r24	; 0x02
		temp += (Num % 10);
    4766:	8e 81       	ldd	r24, Y+6	; 0x06
    4768:	9f 81       	ldd	r25, Y+7	; 0x07
    476a:	2a e0       	ldi	r18, 0x0A	; 10
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	b9 01       	movw	r22, r18
    4770:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__udivmodhi4>
    4774:	9c 01       	movw	r18, r24
    4776:	8a 81       	ldd	r24, Y+2	; 0x02
    4778:	9b 81       	ldd	r25, Y+3	; 0x03
    477a:	82 0f       	add	r24, r18
    477c:	93 1f       	adc	r25, r19
    477e:	9b 83       	std	Y+3, r25	; 0x03
    4780:	8a 83       	std	Y+2, r24	; 0x02
		Num /= 10 ;
    4782:	8e 81       	ldd	r24, Y+6	; 0x06
    4784:	9f 81       	ldd	r25, Y+7	; 0x07
    4786:	2a e0       	ldi	r18, 0x0A	; 10
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	b9 01       	movw	r22, r18
    478c:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__udivmodhi4>
    4790:	cb 01       	movw	r24, r22
    4792:	9f 83       	std	Y+7, r25	; 0x07
    4794:	8e 83       	std	Y+6, r24	; 0x06
uint16 POT_Result ;

void Int2Str(uint8 * str , uint16 Num)
{
	uint16 temp = 0 ;
	while(Num)
    4796:	8e 81       	ldd	r24, Y+6	; 0x06
    4798:	9f 81       	ldd	r25, Y+7	; 0x07
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	b1 f6       	brne	.-84     	; 0x474a <Int2Str+0x22>
		temp *= 10 ;
		temp += (Num % 10);
		Num /= 10 ;
	}

	uint8 count = 0 ;
    479e:	19 82       	std	Y+1, r1	; 0x01
    47a0:	1e c0       	rjmp	.+60     	; 0x47de <Int2Str+0xb6>
	while(temp)
	{
		str[count] = (temp % 10) + '0';
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	28 2f       	mov	r18, r24
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	8c 81       	ldd	r24, Y+4	; 0x04
    47aa:	9d 81       	ldd	r25, Y+5	; 0x05
    47ac:	fc 01       	movw	r30, r24
    47ae:	e2 0f       	add	r30, r18
    47b0:	f3 1f       	adc	r31, r19
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	9b 81       	ldd	r25, Y+3	; 0x03
    47b6:	2a e0       	ldi	r18, 0x0A	; 10
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	b9 01       	movw	r22, r18
    47bc:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__udivmodhi4>
    47c0:	80 5d       	subi	r24, 0xD0	; 208
    47c2:	80 83       	st	Z, r24
		temp /= 10 ;
    47c4:	8a 81       	ldd	r24, Y+2	; 0x02
    47c6:	9b 81       	ldd	r25, Y+3	; 0x03
    47c8:	2a e0       	ldi	r18, 0x0A	; 10
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	b9 01       	movw	r22, r18
    47ce:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__udivmodhi4>
    47d2:	cb 01       	movw	r24, r22
    47d4:	9b 83       	std	Y+3, r25	; 0x03
    47d6:	8a 83       	std	Y+2, r24	; 0x02
		count++;
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	8f 5f       	subi	r24, 0xFF	; 255
    47dc:	89 83       	std	Y+1, r24	; 0x01
		temp += (Num % 10);
		Num /= 10 ;
	}

	uint8 count = 0 ;
	while(temp)
    47de:	8a 81       	ldd	r24, Y+2	; 0x02
    47e0:	9b 81       	ldd	r25, Y+3	; 0x03
    47e2:	00 97       	sbiw	r24, 0x00	; 0
    47e4:	f1 f6       	brne	.-68     	; 0x47a2 <Int2Str+0x7a>
	{
		str[count] = (temp % 10) + '0';
		temp /= 10 ;
		count++;
	}
	str[count] = '\0';
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	28 2f       	mov	r18, r24
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	8c 81       	ldd	r24, Y+4	; 0x04
    47ee:	9d 81       	ldd	r25, Y+5	; 0x05
    47f0:	fc 01       	movw	r30, r24
    47f2:	e2 0f       	add	r30, r18
    47f4:	f3 1f       	adc	r31, r19
    47f6:	10 82       	st	Z, r1
}
    47f8:	27 96       	adiw	r28, 0x07	; 7
    47fa:	0f b6       	in	r0, 0x3f	; 63
    47fc:	f8 94       	cli
    47fe:	de bf       	out	0x3e, r29	; 62
    4800:	0f be       	out	0x3f, r0	; 63
    4802:	cd bf       	out	0x3d, r28	; 61
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <main>:



int main(void)
{
    480a:	0f 93       	push	r16
    480c:	1f 93       	push	r17
    480e:	df 93       	push	r29
    4810:	cf 93       	push	r28
    4812:	cd b7       	in	r28, 0x3d	; 61
    4814:	de b7       	in	r29, 0x3e	; 62
    4816:	c4 5b       	subi	r28, 0xB4	; 180
    4818:	d0 40       	sbci	r29, 0x00	; 0
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	de bf       	out	0x3e, r29	; 62
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	cd bf       	out	0x3d, r28	; 61
    sei();
    4824:	78 94       	sei
    LCD_init();
    4826:	0e 94 91 18 	call	0x3122	; 0x3122 <LCD_init>
    ADC_Init();
    482a:	0e 94 23 11 	call	0x2246	; 0x2246 <ADC_Init>
    USART_Init();
    482e:	0e 94 11 09 	call	0x1222	; 0x1222 <USART_Init>

    LCD_DisplayString("Begin");
    4832:	8f e9       	ldi	r24, 0x9F	; 159
    4834:	91 e0       	ldi	r25, 0x01	; 1
    4836:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    483a:	fe 01       	movw	r30, r28
    483c:	ef 5a       	subi	r30, 0xAF	; 175
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 e0       	ldi	r24, 0x00	; 0
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	aa e7       	ldi	r26, 0x7A	; 122
    4846:	b4 e4       	ldi	r27, 0x44	; 68
    4848:	80 83       	st	Z, r24
    484a:	91 83       	std	Z+1, r25	; 0x01
    484c:	a2 83       	std	Z+2, r26	; 0x02
    484e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4850:	8e 01       	movw	r16, r28
    4852:	03 5b       	subi	r16, 0xB3	; 179
    4854:	1f 4f       	sbci	r17, 0xFF	; 255
    4856:	fe 01       	movw	r30, r28
    4858:	ef 5a       	subi	r30, 0xAF	; 175
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	60 81       	ld	r22, Z
    485e:	71 81       	ldd	r23, Z+1	; 0x01
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	4a ef       	ldi	r20, 0xFA	; 250
    486a:	54 e4       	ldi	r21, 0x44	; 68
    486c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	f8 01       	movw	r30, r16
    4876:	80 83       	st	Z, r24
    4878:	91 83       	std	Z+1, r25	; 0x01
    487a:	a2 83       	std	Z+2, r26	; 0x02
    487c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    487e:	fe 01       	movw	r30, r28
    4880:	e3 5b       	subi	r30, 0xB3	; 179
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	60 81       	ld	r22, Z
    4886:	71 81       	ldd	r23, Z+1	; 0x01
    4888:	82 81       	ldd	r24, Z+2	; 0x02
    488a:	93 81       	ldd	r25, Z+3	; 0x03
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	40 e8       	ldi	r20, 0x80	; 128
    4892:	5f e3       	ldi	r21, 0x3F	; 63
    4894:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4898:	88 23       	and	r24, r24
    489a:	44 f4       	brge	.+16     	; 0x48ac <main+0xa2>
		__ticks = 1;
    489c:	fe 01       	movw	r30, r28
    489e:	e5 5b       	subi	r30, 0xB5	; 181
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	91 83       	std	Z+1, r25	; 0x01
    48a8:	80 83       	st	Z, r24
    48aa:	64 c0       	rjmp	.+200    	; 0x4974 <main+0x16a>
	else if (__tmp > 65535)
    48ac:	fe 01       	movw	r30, r28
    48ae:	e3 5b       	subi	r30, 0xB3	; 179
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	60 81       	ld	r22, Z
    48b4:	71 81       	ldd	r23, Z+1	; 0x01
    48b6:	82 81       	ldd	r24, Z+2	; 0x02
    48b8:	93 81       	ldd	r25, Z+3	; 0x03
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	3f ef       	ldi	r19, 0xFF	; 255
    48be:	4f e7       	ldi	r20, 0x7F	; 127
    48c0:	57 e4       	ldi	r21, 0x47	; 71
    48c2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    48c6:	18 16       	cp	r1, r24
    48c8:	0c f0       	brlt	.+2      	; 0x48cc <main+0xc2>
    48ca:	43 c0       	rjmp	.+134    	; 0x4952 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48cc:	fe 01       	movw	r30, r28
    48ce:	ef 5a       	subi	r30, 0xAF	; 175
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	60 81       	ld	r22, Z
    48d4:	71 81       	ldd	r23, Z+1	; 0x01
    48d6:	82 81       	ldd	r24, Z+2	; 0x02
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e2       	ldi	r20, 0x20	; 32
    48e0:	51 e4       	ldi	r21, 0x41	; 65
    48e2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    48e6:	dc 01       	movw	r26, r24
    48e8:	cb 01       	movw	r24, r22
    48ea:	8e 01       	movw	r16, r28
    48ec:	05 5b       	subi	r16, 0xB5	; 181
    48ee:	1f 4f       	sbci	r17, 0xFF	; 255
    48f0:	bc 01       	movw	r22, r24
    48f2:	cd 01       	movw	r24, r26
    48f4:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	f8 01       	movw	r30, r16
    48fe:	91 83       	std	Z+1, r25	; 0x01
    4900:	80 83       	st	Z, r24
    4902:	1f c0       	rjmp	.+62     	; 0x4942 <main+0x138>
    4904:	fe 01       	movw	r30, r28
    4906:	e7 5b       	subi	r30, 0xB7	; 183
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	88 ec       	ldi	r24, 0xC8	; 200
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	80 83       	st	Z, r24
    4912:	fe 01       	movw	r30, r28
    4914:	e7 5b       	subi	r30, 0xB7	; 183
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	80 81       	ld	r24, Z
    491a:	91 81       	ldd	r25, Z+1	; 0x01
    491c:	01 97       	sbiw	r24, 0x01	; 1
    491e:	f1 f7       	brne	.-4      	; 0x491c <main+0x112>
    4920:	fe 01       	movw	r30, r28
    4922:	e7 5b       	subi	r30, 0xB7	; 183
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	91 83       	std	Z+1, r25	; 0x01
    4928:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492a:	de 01       	movw	r26, r28
    492c:	a5 5b       	subi	r26, 0xB5	; 181
    492e:	bf 4f       	sbci	r27, 0xFF	; 255
    4930:	fe 01       	movw	r30, r28
    4932:	e5 5b       	subi	r30, 0xB5	; 181
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	91 81       	ldd	r25, Z+1	; 0x01
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	11 96       	adiw	r26, 0x01	; 1
    493e:	9c 93       	st	X, r25
    4940:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	fe 01       	movw	r30, r28
    4944:	e5 5b       	subi	r30, 0xB5	; 181
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	91 81       	ldd	r25, Z+1	; 0x01
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	d1 f6       	brne	.-76     	; 0x4904 <main+0xfa>
    4950:	27 c0       	rjmp	.+78     	; 0x49a0 <main+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4952:	8e 01       	movw	r16, r28
    4954:	05 5b       	subi	r16, 0xB5	; 181
    4956:	1f 4f       	sbci	r17, 0xFF	; 255
    4958:	fe 01       	movw	r30, r28
    495a:	e3 5b       	subi	r30, 0xB3	; 179
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	60 81       	ld	r22, Z
    4960:	71 81       	ldd	r23, Z+1	; 0x01
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	93 81       	ldd	r25, Z+3	; 0x03
    4966:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	f8 01       	movw	r30, r16
    4970:	91 83       	std	Z+1, r25	; 0x01
    4972:	80 83       	st	Z, r24
    4974:	de 01       	movw	r26, r28
    4976:	a9 5b       	subi	r26, 0xB9	; 185
    4978:	bf 4f       	sbci	r27, 0xFF	; 255
    497a:	fe 01       	movw	r30, r28
    497c:	e5 5b       	subi	r30, 0xB5	; 181
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	8d 93       	st	X+, r24
    4986:	9c 93       	st	X, r25
    4988:	fe 01       	movw	r30, r28
    498a:	e9 5b       	subi	r30, 0xB9	; 185
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	80 81       	ld	r24, Z
    4990:	91 81       	ldd	r25, Z+1	; 0x01
    4992:	01 97       	sbiw	r24, 0x01	; 1
    4994:	f1 f7       	brne	.-4      	; 0x4992 <main+0x188>
    4996:	fe 01       	movw	r30, r28
    4998:	e9 5b       	subi	r30, 0xB9	; 185
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	80 83       	st	Z, r24
	_delay_ms(1000);

    WIFI_Init(&WIFI_Result_OP);
    49a0:	80 e9       	ldi	r24, 0x90	; 144
    49a2:	93 e0       	ldi	r25, 0x03	; 3
    49a4:	0e 94 c5 14 	call	0x298a	; 0x298a <WIFI_Init>
    
    LCD_MoveCursor(0,0);
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    if(WIFI_Result_OP == WIFI_ERROR)
    49b0:	80 91 90 03 	lds	r24, 0x0390
    49b4:	88 23       	and	r24, r24
    49b6:	29 f4       	brne	.+10     	; 0x49c2 <main+0x1b8>
    {
        LCD_DisplayString("Test Failed ) : ");
    49b8:	85 ea       	ldi	r24, 0xA5	; 165
    49ba:	91 e0       	ldi	r25, 0x01	; 1
    49bc:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    49c0:	08 c0       	rjmp	.+16     	; 0x49d2 <main+0x1c8>
    }
    else if(WIFI_Result_OP == WIFI_OK)
    49c2:	80 91 90 03 	lds	r24, 0x0390
    49c6:	81 30       	cpi	r24, 0x01	; 1
    49c8:	21 f4       	brne	.+8      	; 0x49d2 <main+0x1c8>
    {
        LCD_DisplayString("Test Succeed ( :");
    49ca:	86 eb       	ldi	r24, 0xB6	; 182
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    }

    WiFi_joinAccessPoint(WIFI_SSID,WIFI_Pass,&WIFI_AP_Connection_Result);
    49d2:	80 ec       	ldi	r24, 0xC0	; 192
    49d4:	92 e0       	ldi	r25, 0x02	; 2
    49d6:	2a ec       	ldi	r18, 0xCA	; 202
    49d8:	32 e0       	ldi	r19, 0x02	; 2
    49da:	4c e8       	ldi	r20, 0x8C	; 140
    49dc:	53 e0       	ldi	r21, 0x03	; 3
    49de:	b9 01       	movw	r22, r18
    49e0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <WiFi_joinAccessPoint>
    49e4:	fe 01       	movw	r30, r28
    49e6:	ed 5b       	subi	r30, 0xBD	; 189
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	80 e0       	ldi	r24, 0x00	; 0
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	aa ef       	ldi	r26, 0xFA	; 250
    49f0:	b4 e4       	ldi	r27, 0x44	; 68
    49f2:	80 83       	st	Z, r24
    49f4:	91 83       	std	Z+1, r25	; 0x01
    49f6:	a2 83       	std	Z+2, r26	; 0x02
    49f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49fa:	8e 01       	movw	r16, r28
    49fc:	01 5c       	subi	r16, 0xC1	; 193
    49fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4a00:	fe 01       	movw	r30, r28
    4a02:	ed 5b       	subi	r30, 0xBD	; 189
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	60 81       	ld	r22, Z
    4a08:	71 81       	ldd	r23, Z+1	; 0x01
    4a0a:	82 81       	ldd	r24, Z+2	; 0x02
    4a0c:	93 81       	ldd	r25, Z+3	; 0x03
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a ef       	ldi	r20, 0xFA	; 250
    4a14:	54 e4       	ldi	r21, 0x44	; 68
    4a16:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	f8 01       	movw	r30, r16
    4a20:	80 83       	st	Z, r24
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	a2 83       	std	Z+2, r26	; 0x02
    4a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a28:	fe 01       	movw	r30, r28
    4a2a:	ff 96       	adiw	r30, 0x3f	; 63
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	40 e8       	ldi	r20, 0x80	; 128
    4a3a:	5f e3       	ldi	r21, 0x3F	; 63
    4a3c:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4a40:	88 23       	and	r24, r24
    4a42:	2c f4       	brge	.+10     	; 0x4a4e <main+0x244>
		__ticks = 1;
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	9e af       	std	Y+62, r25	; 0x3e
    4a4a:	8d af       	std	Y+61, r24	; 0x3d
    4a4c:	46 c0       	rjmp	.+140    	; 0x4ada <main+0x2d0>
	else if (__tmp > 65535)
    4a4e:	fe 01       	movw	r30, r28
    4a50:	ff 96       	adiw	r30, 0x3f	; 63
    4a52:	60 81       	ld	r22, Z
    4a54:	71 81       	ldd	r23, Z+1	; 0x01
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	3f ef       	ldi	r19, 0xFF	; 255
    4a5e:	4f e7       	ldi	r20, 0x7F	; 127
    4a60:	57 e4       	ldi	r21, 0x47	; 71
    4a62:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4a66:	18 16       	cp	r1, r24
    4a68:	64 f5       	brge	.+88     	; 0x4ac2 <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	ed 5b       	subi	r30, 0xBD	; 189
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	60 81       	ld	r22, Z
    4a72:	71 81       	ldd	r23, Z+1	; 0x01
    4a74:	82 81       	ldd	r24, Z+2	; 0x02
    4a76:	93 81       	ldd	r25, Z+3	; 0x03
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	40 e2       	ldi	r20, 0x20	; 32
    4a7e:	51 e4       	ldi	r21, 0x41	; 65
    4a80:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	bc 01       	movw	r22, r24
    4a8a:	cd 01       	movw	r24, r26
    4a8c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	9e af       	std	Y+62, r25	; 0x3e
    4a96:	8d af       	std	Y+61, r24	; 0x3d
    4a98:	0f c0       	rjmp	.+30     	; 0x4ab8 <main+0x2ae>
    4a9a:	88 ec       	ldi	r24, 0xC8	; 200
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	9c af       	std	Y+60, r25	; 0x3c
    4aa0:	8b af       	std	Y+59, r24	; 0x3b
    4aa2:	8b ad       	ldd	r24, Y+59	; 0x3b
    4aa4:	9c ad       	ldd	r25, Y+60	; 0x3c
    4aa6:	01 97       	sbiw	r24, 0x01	; 1
    4aa8:	f1 f7       	brne	.-4      	; 0x4aa6 <main+0x29c>
    4aaa:	9c af       	std	Y+60, r25	; 0x3c
    4aac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	9e af       	std	Y+62, r25	; 0x3e
    4ab6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aba:	9e ad       	ldd	r25, Y+62	; 0x3e
    4abc:	00 97       	sbiw	r24, 0x00	; 0
    4abe:	69 f7       	brne	.-38     	; 0x4a9a <main+0x290>
    4ac0:	16 c0       	rjmp	.+44     	; 0x4aee <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ff 96       	adiw	r30, 0x3f	; 63
    4ac6:	60 81       	ld	r22, Z
    4ac8:	71 81       	ldd	r23, Z+1	; 0x01
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	93 81       	ldd	r25, Z+3	; 0x03
    4ace:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	cb 01       	movw	r24, r22
    4ad6:	9e af       	std	Y+62, r25	; 0x3e
    4ad8:	8d af       	std	Y+61, r24	; 0x3d
    4ada:	8d ad       	ldd	r24, Y+61	; 0x3d
    4adc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ade:	9a af       	std	Y+58, r25	; 0x3a
    4ae0:	89 af       	std	Y+57, r24	; 0x39
    4ae2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ae4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	f1 f7       	brne	.-4      	; 0x4ae6 <main+0x2dc>
    4aea:	9a af       	std	Y+58, r25	; 0x3a
    4aec:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2000);
    LCD_MoveCursor(0,0);
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	60 e0       	ldi	r22, 0x00	; 0
    4af2:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    if(WIFI_AP_Connection_Result == WIFI_Connection_OK)
    4af6:	80 91 8c 03 	lds	r24, 0x038C
    4afa:	81 30       	cpi	r24, 0x01	; 1
    4afc:	29 f4       	brne	.+10     	; 0x4b08 <main+0x2fe>
    {
        LCD_DisplayString("AP Connect Done");
    4afe:	87 ec       	ldi	r24, 0xC7	; 199
    4b00:	91 e0       	ldi	r25, 0x01	; 1
    4b02:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4b06:	23 c0       	rjmp	.+70     	; 0x4b4e <main+0x344>
    }
    else if(WIFI_AP_Connection_Result == WIFI_Connection_TimeOut)
    4b08:	80 91 8c 03 	lds	r24, 0x038C
    4b0c:	82 30       	cpi	r24, 0x02	; 2
    4b0e:	29 f4       	brne	.+10     	; 0x4b1a <main+0x310>
    {
        LCD_DisplayString("AP TimeOut ");
    4b10:	87 ed       	ldi	r24, 0xD7	; 215
    4b12:	91 e0       	ldi	r25, 0x01	; 1
    4b14:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4b18:	1a c0       	rjmp	.+52     	; 0x4b4e <main+0x344>
    }
    else if(WIFI_AP_Connection_Result == WIFI_Connection_WrongPassword)
    4b1a:	80 91 8c 03 	lds	r24, 0x038C
    4b1e:	83 30       	cpi	r24, 0x03	; 3
    4b20:	29 f4       	brne	.+10     	; 0x4b2c <main+0x322>
    {
        LCD_DisplayString("AP Wrong Pass ");
    4b22:	83 ee       	ldi	r24, 0xE3	; 227
    4b24:	91 e0       	ldi	r25, 0x01	; 1
    4b26:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4b2a:	11 c0       	rjmp	.+34     	; 0x4b4e <main+0x344>
    }
    else if(WIFI_AP_Connection_Result == WIFI_COnnection_CanNotFindAP)
    4b2c:	80 91 8c 03 	lds	r24, 0x038C
    4b30:	84 30       	cpi	r24, 0x04	; 4
    4b32:	29 f4       	brne	.+10     	; 0x4b3e <main+0x334>
    {
        LCD_DisplayString("AP Not Exist ");
    4b34:	82 ef       	ldi	r24, 0xF2	; 242
    4b36:	91 e0       	ldi	r25, 0x01	; 1
    4b38:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4b3c:	08 c0       	rjmp	.+16     	; 0x4b4e <main+0x344>
    }
    else if(WIFI_AP_Connection_Result == WIFI_Connection_FAil)
    4b3e:	80 91 8c 03 	lds	r24, 0x038C
    4b42:	85 30       	cpi	r24, 0x05	; 5
    4b44:	21 f4       	brne	.+8      	; 0x4b4e <main+0x344>
    {
        LCD_DisplayString("AP Failed Conne");
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	92 e0       	ldi	r25, 0x02	; 2
    4b4a:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    }
    
    
    WiFi_checkConnection(&WIFI_Status);
    4b4e:	82 e9       	ldi	r24, 0x92	; 146
    4b50:	93 e0       	ldi	r25, 0x03	; 3
    4b52:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <WiFi_checkConnection>
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	aa ef       	ldi	r26, 0xFA	; 250
    4b5c:	b4 e4       	ldi	r27, 0x44	; 68
    4b5e:	8d ab       	std	Y+53, r24	; 0x35
    4b60:	9e ab       	std	Y+54, r25	; 0x36
    4b62:	af ab       	std	Y+55, r26	; 0x37
    4b64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b66:	6d a9       	ldd	r22, Y+53	; 0x35
    4b68:	7e a9       	ldd	r23, Y+54	; 0x36
    4b6a:	8f a9       	ldd	r24, Y+55	; 0x37
    4b6c:	98 ad       	ldd	r25, Y+56	; 0x38
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	4a ef       	ldi	r20, 0xFA	; 250
    4b74:	54 e4       	ldi	r21, 0x44	; 68
    4b76:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	89 ab       	std	Y+49, r24	; 0x31
    4b80:	9a ab       	std	Y+50, r25	; 0x32
    4b82:	ab ab       	std	Y+51, r26	; 0x33
    4b84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b86:	69 a9       	ldd	r22, Y+49	; 0x31
    4b88:	7a a9       	ldd	r23, Y+50	; 0x32
    4b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    4b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	40 e8       	ldi	r20, 0x80	; 128
    4b94:	5f e3       	ldi	r21, 0x3F	; 63
    4b96:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4b9a:	88 23       	and	r24, r24
    4b9c:	2c f4       	brge	.+10     	; 0x4ba8 <main+0x39e>
		__ticks = 1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	98 ab       	std	Y+48, r25	; 0x30
    4ba4:	8f a7       	std	Y+47, r24	; 0x2f
    4ba6:	3f c0       	rjmp	.+126    	; 0x4c26 <main+0x41c>
	else if (__tmp > 65535)
    4ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    4baa:	7a a9       	ldd	r23, Y+50	; 0x32
    4bac:	8b a9       	ldd	r24, Y+51	; 0x33
    4bae:	9c a9       	ldd	r25, Y+52	; 0x34
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	3f ef       	ldi	r19, 0xFF	; 255
    4bb4:	4f e7       	ldi	r20, 0x7F	; 127
    4bb6:	57 e4       	ldi	r21, 0x47	; 71
    4bb8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4bbc:	18 16       	cp	r1, r24
    4bbe:	4c f5       	brge	.+82     	; 0x4c12 <main+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc0:	6d a9       	ldd	r22, Y+53	; 0x35
    4bc2:	7e a9       	ldd	r23, Y+54	; 0x36
    4bc4:	8f a9       	ldd	r24, Y+55	; 0x37
    4bc6:	98 ad       	ldd	r25, Y+56	; 0x38
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e2       	ldi	r20, 0x20	; 32
    4bce:	51 e4       	ldi	r21, 0x41	; 65
    4bd0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	bc 01       	movw	r22, r24
    4bda:	cd 01       	movw	r24, r26
    4bdc:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4be0:	dc 01       	movw	r26, r24
    4be2:	cb 01       	movw	r24, r22
    4be4:	98 ab       	std	Y+48, r25	; 0x30
    4be6:	8f a7       	std	Y+47, r24	; 0x2f
    4be8:	0f c0       	rjmp	.+30     	; 0x4c08 <main+0x3fe>
    4bea:	88 ec       	ldi	r24, 0xC8	; 200
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	9e a7       	std	Y+46, r25	; 0x2e
    4bf0:	8d a7       	std	Y+45, r24	; 0x2d
    4bf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    4bf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	f1 f7       	brne	.-4      	; 0x4bf6 <main+0x3ec>
    4bfa:	9e a7       	std	Y+46, r25	; 0x2e
    4bfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c00:	98 a9       	ldd	r25, Y+48	; 0x30
    4c02:	01 97       	sbiw	r24, 0x01	; 1
    4c04:	98 ab       	std	Y+48, r25	; 0x30
    4c06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c0c:	00 97       	sbiw	r24, 0x00	; 0
    4c0e:	69 f7       	brne	.-38     	; 0x4bea <main+0x3e0>
    4c10:	14 c0       	rjmp	.+40     	; 0x4c3a <main+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c12:	69 a9       	ldd	r22, Y+49	; 0x31
    4c14:	7a a9       	ldd	r23, Y+50	; 0x32
    4c16:	8b a9       	ldd	r24, Y+51	; 0x33
    4c18:	9c a9       	ldd	r25, Y+52	; 0x34
    4c1a:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	98 ab       	std	Y+48, r25	; 0x30
    4c24:	8f a7       	std	Y+47, r24	; 0x2f
    4c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c28:	98 a9       	ldd	r25, Y+48	; 0x30
    4c2a:	9c a7       	std	Y+44, r25	; 0x2c
    4c2c:	8b a7       	std	Y+43, r24	; 0x2b
    4c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c30:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c32:	01 97       	sbiw	r24, 0x01	; 1
    4c34:	f1 f7       	brne	.-4      	; 0x4c32 <main+0x428>
    4c36:	9c a7       	std	Y+44, r25	; 0x2c
    4c38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	LCD_MoveCursor(0,0);
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    if(WIFI_Status ==WIFI_AP_GotIP)
    4c42:	80 91 92 03 	lds	r24, 0x0392
    4c46:	82 30       	cpi	r24, 0x02	; 2
    4c48:	29 f4       	brne	.+10     	; 0x4c54 <main+0x44a>
    {
        LCD_DisplayString("Get IP Add");
    4c4a:	80 e1       	ldi	r24, 0x10	; 16
    4c4c:	92 e0       	ldi	r25, 0x02	; 2
    4c4e:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4c52:	1a c0       	rjmp	.+52     	; 0x4c88 <main+0x47e>
    }
    else if(WIFI_Status ==WIFI_AP_Connected)
    4c54:	80 91 92 03 	lds	r24, 0x0392
    4c58:	83 30       	cpi	r24, 0x03	; 3
    4c5a:	29 f4       	brne	.+10     	; 0x4c66 <main+0x45c>
    {
        LCD_DisplayString("Only Connected ");
    4c5c:	8b e1       	ldi	r24, 0x1B	; 27
    4c5e:	92 e0       	ldi	r25, 0x02	; 2
    4c60:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4c64:	11 c0       	rjmp	.+34     	; 0x4c88 <main+0x47e>
    }
    else if(WIFI_Status ==WIFI_AP_Disconnected)
    4c66:	80 91 92 03 	lds	r24, 0x0392
    4c6a:	84 30       	cpi	r24, 0x04	; 4
    4c6c:	29 f4       	brne	.+10     	; 0x4c78 <main+0x46e>
    {
        LCD_DisplayString("Dis Connected");
    4c6e:	8b e2       	ldi	r24, 0x2B	; 43
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4c76:	08 c0       	rjmp	.+16     	; 0x4c88 <main+0x47e>
    }
    else if(WIFI_Status ==WIFI_AP_Connection_Fail)
    4c78:	80 91 92 03 	lds	r24, 0x0392
    4c7c:	85 30       	cpi	r24, 0x05	; 5
    4c7e:	21 f4       	brne	.+8      	; 0x4c88 <main+0x47e>
    {
        LCD_DisplayString("Fail Connection");
    4c80:	89 e3       	ldi	r24, 0x39	; 57
    4c82:	92 e0       	ldi	r25, 0x02	; 2
    4c84:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    }

    WiFi_start(Domain,Port,&WIFI_OpeningSocket_Result);
    4c88:	8e ed       	ldi	r24, 0xDE	; 222
    4c8a:	92 e0       	ldi	r25, 0x02	; 2
    4c8c:	21 ef       	ldi	r18, 0xF1	; 241
    4c8e:	32 e0       	ldi	r19, 0x02	; 2
    4c90:	4f e8       	ldi	r20, 0x8F	; 143
    4c92:	53 e0       	ldi	r21, 0x03	; 3
    4c94:	b9 01       	movw	r22, r18
    4c96:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <WiFi_start>
    LCD_MoveCursor(0,0);
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	60 e0       	ldi	r22, 0x00	; 0
    4c9e:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    if(WIFI_OpeningSocket_Result == WIFI_Socket_OK)
    4ca2:	80 91 8f 03 	lds	r24, 0x038F
    4ca6:	81 30       	cpi	r24, 0x01	; 1
    4ca8:	29 f4       	brne	.+10     	; 0x4cb4 <main+0x4aa>
    {
        LCD_DisplayString("Open Socket OK");
    4caa:	89 e4       	ldi	r24, 0x49	; 73
    4cac:	92 e0       	ldi	r25, 0x02	; 2
    4cae:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4cb2:	11 c0       	rjmp	.+34     	; 0x4cd6 <main+0x4cc>
        
    }
    else if(WIFI_OpeningSocket_Result == WIFI_Socket_ERROR)
    4cb4:	80 91 8f 03 	lds	r24, 0x038F
    4cb8:	82 30       	cpi	r24, 0x02	; 2
    4cba:	29 f4       	brne	.+10     	; 0x4cc6 <main+0x4bc>
    {
       LCD_DisplayString("Open Socket Err") ;
    4cbc:	88 e5       	ldi	r24, 0x58	; 88
    4cbe:	92 e0       	ldi	r25, 0x02	; 2
    4cc0:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4cc4:	08 c0       	rjmp	.+16     	; 0x4cd6 <main+0x4cc>
    }
    else if(WIFI_OpeningSocket_Result == WIFI_Socket_AlreadyConnected)
    4cc6:	80 91 8f 03 	lds	r24, 0x038F
    4cca:	83 30       	cpi	r24, 0x03	; 3
    4ccc:	21 f4       	brne	.+8      	; 0x4cd6 <main+0x4cc>
    {
       LCD_DisplayString("Alr Socket open") ;
    4cce:	88 e6       	ldi	r24, 0x68	; 104
    4cd0:	92 e0       	ldi	r25, 0x02	; 2
    4cd2:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	90 e8       	ldi	r25, 0x80	; 128
    4cda:	ab eb       	ldi	r26, 0xBB	; 187
    4cdc:	b4 e4       	ldi	r27, 0x44	; 68
    4cde:	8f a3       	std	Y+39, r24	; 0x27
    4ce0:	98 a7       	std	Y+40, r25	; 0x28
    4ce2:	a9 a7       	std	Y+41, r26	; 0x29
    4ce4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    4ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    4cea:	89 a5       	ldd	r24, Y+41	; 0x29
    4cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	4a ef       	ldi	r20, 0xFA	; 250
    4cf4:	54 e4       	ldi	r21, 0x44	; 68
    4cf6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	8b a3       	std	Y+35, r24	; 0x23
    4d00:	9c a3       	std	Y+36, r25	; 0x24
    4d02:	ad a3       	std	Y+37, r26	; 0x25
    4d04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d06:	6b a1       	ldd	r22, Y+35	; 0x23
    4d08:	7c a1       	ldd	r23, Y+36	; 0x24
    4d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e8       	ldi	r20, 0x80	; 128
    4d14:	5f e3       	ldi	r21, 0x3F	; 63
    4d16:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4d1a:	88 23       	and	r24, r24
    4d1c:	2c f4       	brge	.+10     	; 0x4d28 <main+0x51e>
		__ticks = 1;
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	9a a3       	std	Y+34, r25	; 0x22
    4d24:	89 a3       	std	Y+33, r24	; 0x21
    4d26:	3f c0       	rjmp	.+126    	; 0x4da6 <main+0x59c>
	else if (__tmp > 65535)
    4d28:	6b a1       	ldd	r22, Y+35	; 0x23
    4d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	3f ef       	ldi	r19, 0xFF	; 255
    4d34:	4f e7       	ldi	r20, 0x7F	; 127
    4d36:	57 e4       	ldi	r21, 0x47	; 71
    4d38:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4d3c:	18 16       	cp	r1, r24
    4d3e:	4c f5       	brge	.+82     	; 0x4d92 <main+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d40:	6f a1       	ldd	r22, Y+39	; 0x27
    4d42:	78 a5       	ldd	r23, Y+40	; 0x28
    4d44:	89 a5       	ldd	r24, Y+41	; 0x29
    4d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e2       	ldi	r20, 0x20	; 32
    4d4e:	51 e4       	ldi	r21, 0x41	; 65
    4d50:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	bc 01       	movw	r22, r24
    4d5a:	cd 01       	movw	r24, r26
    4d5c:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	9a a3       	std	Y+34, r25	; 0x22
    4d66:	89 a3       	std	Y+33, r24	; 0x21
    4d68:	0f c0       	rjmp	.+30     	; 0x4d88 <main+0x57e>
    4d6a:	88 ec       	ldi	r24, 0xC8	; 200
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	98 a3       	std	Y+32, r25	; 0x20
    4d70:	8f 8f       	std	Y+31, r24	; 0x1f
    4d72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d74:	98 a1       	ldd	r25, Y+32	; 0x20
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <main+0x56c>
    4d7a:	98 a3       	std	Y+32, r25	; 0x20
    4d7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    4d80:	9a a1       	ldd	r25, Y+34	; 0x22
    4d82:	01 97       	sbiw	r24, 0x01	; 1
    4d84:	9a a3       	std	Y+34, r25	; 0x22
    4d86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d88:	89 a1       	ldd	r24, Y+33	; 0x21
    4d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    4d8c:	00 97       	sbiw	r24, 0x00	; 0
    4d8e:	69 f7       	brne	.-38     	; 0x4d6a <main+0x560>
    4d90:	14 c0       	rjmp	.+40     	; 0x4dba <main+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d92:	6b a1       	ldd	r22, Y+35	; 0x23
    4d94:	7c a1       	ldd	r23, Y+36	; 0x24
    4d96:	8d a1       	ldd	r24, Y+37	; 0x25
    4d98:	9e a1       	ldd	r25, Y+38	; 0x26
    4d9a:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	9a a3       	std	Y+34, r25	; 0x22
    4da4:	89 a3       	std	Y+33, r24	; 0x21
    4da6:	89 a1       	ldd	r24, Y+33	; 0x21
    4da8:	9a a1       	ldd	r25, Y+34	; 0x22
    4daa:	9e 8f       	std	Y+30, r25	; 0x1e
    4dac:	8d 8f       	std	Y+29, r24	; 0x1d
    4dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4db0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	f1 f7       	brne	.-4      	; 0x4db2 <main+0x5a8>
    4db6:	9e 8f       	std	Y+30, r25	; 0x1e
    4db8:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    _delay_ms(1500);

    WiFi_send(feild_Data,&Wifi_UploadResult) ;
    4dba:	84 ef       	ldi	r24, 0xF4	; 244
    4dbc:	92 e0       	ldi	r25, 0x02	; 2
    4dbe:	21 e9       	ldi	r18, 0x91	; 145
    4dc0:	33 e0       	ldi	r19, 0x03	; 3
    4dc2:	b9 01       	movw	r22, r18
    4dc4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <WiFi_send>
    LCD_MoveCursor(0,0);
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	60 e0       	ldi	r22, 0x00	; 0
    4dcc:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
    if(Wifi_UploadResult == WIFI_SEND_OK)
    4dd0:	80 91 91 03 	lds	r24, 0x0391
    4dd4:	81 30       	cpi	r24, 0x01	; 1
    4dd6:	29 f4       	brne	.+10     	; 0x4de2 <main+0x5d8>
    {
        LCD_DisplayString("Upload Done");
    4dd8:	88 e7       	ldi	r24, 0x78	; 120
    4dda:	92 e0       	ldi	r25, 0x02	; 2
    4ddc:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4de0:	08 c0       	rjmp	.+16     	; 0x4df2 <main+0x5e8>
    }
    else if(Wifi_UploadResult == WIFI_SEND_ERROR)
    4de2:	80 91 91 03 	lds	r24, 0x0391
    4de6:	88 23       	and	r24, r24
    4de8:	21 f4       	brne	.+8      	; 0x4df2 <main+0x5e8>
    {
        LCD_DisplayString("Upload Failed");
    4dea:	84 e8       	ldi	r24, 0x84	; 132
    4dec:	92 e0       	ldi	r25, 0x02	; 2
    4dee:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>

    while(1)
    {


        WiFi_start(Domain,Port,&WIFI_OpeningSocket_Result);
    4df2:	8e ed       	ldi	r24, 0xDE	; 222
    4df4:	92 e0       	ldi	r25, 0x02	; 2
    4df6:	21 ef       	ldi	r18, 0xF1	; 241
    4df8:	32 e0       	ldi	r19, 0x02	; 2
    4dfa:	4f e8       	ldi	r20, 0x8F	; 143
    4dfc:	53 e0       	ldi	r21, 0x03	; 3
    4dfe:	b9 01       	movw	r22, r18
    4e00:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <WiFi_start>
        LCD_MoveCursor(0,0);
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	0e 94 c1 21 	call	0x4382	; 0x4382 <LCD_MoveCursor>
        if(WIFI_OpeningSocket_Result == WIFI_Socket_OK)
    4e0c:	80 91 8f 03 	lds	r24, 0x038F
    4e10:	81 30       	cpi	r24, 0x01	; 1
    4e12:	09 f0       	breq	.+2      	; 0x4e16 <main+0x60c>
    4e14:	dd c0       	rjmp	.+442    	; 0x4fd0 <main+0x7c6>
        {
            LCD_ClearScreen();
    4e16:	0e 94 33 22 	call	0x4466	; 0x4466 <LCD_ClearScreen>
            LCD_DisplayString("Open Socket OK");
    4e1a:	89 e4       	ldi	r24, 0x49	; 73
    4e1c:	92 e0       	ldi	r25, 0x02	; 2
    4e1e:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	aa e7       	ldi	r26, 0x7A	; 122
    4e28:	b4 e4       	ldi	r27, 0x44	; 68
    4e2a:	89 8f       	std	Y+25, r24	; 0x19
    4e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    4e2e:	ab 8f       	std	Y+27, r26	; 0x1b
    4e30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e32:	69 8d       	ldd	r22, Y+25	; 0x19
    4e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	4a ef       	ldi	r20, 0xFA	; 250
    4e40:	54 e4       	ldi	r21, 0x44	; 68
    4e42:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	8d 8b       	std	Y+21, r24	; 0x15
    4e4c:	9e 8b       	std	Y+22, r25	; 0x16
    4e4e:	af 8b       	std	Y+23, r26	; 0x17
    4e50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e52:	6d 89       	ldd	r22, Y+21	; 0x15
    4e54:	7e 89       	ldd	r23, Y+22	; 0x16
    4e56:	8f 89       	ldd	r24, Y+23	; 0x17
    4e58:	98 8d       	ldd	r25, Y+24	; 0x18
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	40 e8       	ldi	r20, 0x80	; 128
    4e60:	5f e3       	ldi	r21, 0x3F	; 63
    4e62:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    4e66:	88 23       	and	r24, r24
    4e68:	2c f4       	brge	.+10     	; 0x4e74 <main+0x66a>
		__ticks = 1;
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	9c 8b       	std	Y+20, r25	; 0x14
    4e70:	8b 8b       	std	Y+19, r24	; 0x13
    4e72:	3f c0       	rjmp	.+126    	; 0x4ef2 <main+0x6e8>
	else if (__tmp > 65535)
    4e74:	6d 89       	ldd	r22, Y+21	; 0x15
    4e76:	7e 89       	ldd	r23, Y+22	; 0x16
    4e78:	8f 89       	ldd	r24, Y+23	; 0x17
    4e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	3f ef       	ldi	r19, 0xFF	; 255
    4e80:	4f e7       	ldi	r20, 0x7F	; 127
    4e82:	57 e4       	ldi	r21, 0x47	; 71
    4e84:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    4e88:	18 16       	cp	r1, r24
    4e8a:	4c f5       	brge	.+82     	; 0x4ede <main+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	40 e2       	ldi	r20, 0x20	; 32
    4e9a:	51 e4       	ldi	r21, 0x41	; 65
    4e9c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    4ea0:	dc 01       	movw	r26, r24
    4ea2:	cb 01       	movw	r24, r22
    4ea4:	bc 01       	movw	r22, r24
    4ea6:	cd 01       	movw	r24, r26
    4ea8:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	9c 8b       	std	Y+20, r25	; 0x14
    4eb2:	8b 8b       	std	Y+19, r24	; 0x13
    4eb4:	0f c0       	rjmp	.+30     	; 0x4ed4 <main+0x6ca>
    4eb6:	88 ec       	ldi	r24, 0xC8	; 200
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	9a 8b       	std	Y+18, r25	; 0x12
    4ebc:	89 8b       	std	Y+17, r24	; 0x11
    4ebe:	89 89       	ldd	r24, Y+17	; 0x11
    4ec0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <main+0x6b8>
    4ec6:	9a 8b       	std	Y+18, r25	; 0x12
    4ec8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eca:	8b 89       	ldd	r24, Y+19	; 0x13
    4ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	9c 8b       	std	Y+20, r25	; 0x14
    4ed2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	69 f7       	brne	.-38     	; 0x4eb6 <main+0x6ac>
    4edc:	14 c0       	rjmp	.+40     	; 0x4f06 <main+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ede:	6d 89       	ldd	r22, Y+21	; 0x15
    4ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee6:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	9c 8b       	std	Y+20, r25	; 0x14
    4ef0:	8b 8b       	std	Y+19, r24	; 0x13
    4ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef6:	98 8b       	std	Y+16, r25	; 0x10
    4ef8:	8f 87       	std	Y+15, r24	; 0x0f
    4efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4efc:	98 89       	ldd	r25, Y+16	; 0x10
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	f1 f7       	brne	.-4      	; 0x4efe <main+0x6f4>
    4f02:	98 8b       	std	Y+16, r25	; 0x10
    4f04:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(1000);

            POT_Result = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	0e 94 a8 11 	call	0x2350	; 0x2350 <ADC_ReadChannelSingleConvertion>
    4f0c:	90 93 8e 03 	sts	0x038E, r25
    4f10:	80 93 8d 03 	sts	0x038D, r24
            uint8 String [6];
            Int2Str(String,POT_Result);
    4f14:	20 91 8d 03 	lds	r18, 0x038D
    4f18:	30 91 8e 03 	lds	r19, 0x038E
    4f1c:	ce 01       	movw	r24, r28
    4f1e:	8b 5a       	subi	r24, 0xAB	; 171
    4f20:	9f 4f       	sbci	r25, 0xFF	; 255
    4f22:	b9 01       	movw	r22, r18
    4f24:	0e 94 94 23 	call	0x4728	; 0x4728 <Int2Str>

            uint8 Data[90] = { };
    4f28:	ce 01       	movw	r24, r28
    4f2a:	85 5a       	subi	r24, 0xA5	; 165
    4f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2e:	2a e5       	ldi	r18, 0x5A	; 90
    4f30:	fc 01       	movw	r30, r24
    4f32:	df 01       	movw	r26, r30
    4f34:	82 2f       	mov	r24, r18
    4f36:	1d 92       	st	X+, r1
    4f38:	8a 95       	dec	r24
    4f3a:	e9 f7       	brne	.-6      	; 0x4f36 <main+0x72c>
            sprintf(Data, "%s%s",feild_Data,String);
    4f3c:	ad b7       	in	r26, 0x3d	; 61
    4f3e:	be b7       	in	r27, 0x3e	; 62
    4f40:	18 97       	sbiw	r26, 0x08	; 8
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	be bf       	out	0x3e, r27	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	ad bf       	out	0x3d, r26	; 61
    4f4c:	ed b7       	in	r30, 0x3d	; 61
    4f4e:	fe b7       	in	r31, 0x3e	; 62
    4f50:	31 96       	adiw	r30, 0x01	; 1
    4f52:	ce 01       	movw	r24, r28
    4f54:	85 5a       	subi	r24, 0xA5	; 165
    4f56:	9f 4f       	sbci	r25, 0xFF	; 255
    4f58:	91 83       	std	Z+1, r25	; 0x01
    4f5a:	80 83       	st	Z, r24
    4f5c:	82 e9       	ldi	r24, 0x92	; 146
    4f5e:	92 e0       	ldi	r25, 0x02	; 2
    4f60:	93 83       	std	Z+3, r25	; 0x03
    4f62:	82 83       	std	Z+2, r24	; 0x02
    4f64:	84 ef       	ldi	r24, 0xF4	; 244
    4f66:	92 e0       	ldi	r25, 0x02	; 2
    4f68:	95 83       	std	Z+5, r25	; 0x05
    4f6a:	84 83       	std	Z+4, r24	; 0x04
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	8b 5a       	subi	r24, 0xAB	; 171
    4f70:	9f 4f       	sbci	r25, 0xFF	; 255
    4f72:	97 83       	std	Z+7, r25	; 0x07
    4f74:	86 83       	std	Z+6, r24	; 0x06
    4f76:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <sprintf>
    4f7a:	ed b7       	in	r30, 0x3d	; 61
    4f7c:	fe b7       	in	r31, 0x3e	; 62
    4f7e:	38 96       	adiw	r30, 0x08	; 8
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	fe bf       	out	0x3e, r31	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	ed bf       	out	0x3d, r30	; 61
            Data[89] = 0;
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	85 5a       	subi	r24, 0xA5	; 165
    4f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f90:	fc 01       	movw	r30, r24
    4f92:	e7 5a       	subi	r30, 0xA7	; 167
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	10 82       	st	Z, r1

            WiFi_send(Data,&Wifi_UploadResult) ;
    4f98:	ce 01       	movw	r24, r28
    4f9a:	85 5a       	subi	r24, 0xA5	; 165
    4f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f9e:	21 e9       	ldi	r18, 0x91	; 145
    4fa0:	33 e0       	ldi	r19, 0x03	; 3
    4fa2:	b9 01       	movw	r22, r18
    4fa4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <WiFi_send>
            LCD_ClearScreen();
    4fa8:	0e 94 33 22 	call	0x4466	; 0x4466 <LCD_ClearScreen>
            if(Wifi_UploadResult == WIFI_SEND_OK)
    4fac:	80 91 91 03 	lds	r24, 0x0391
    4fb0:	81 30       	cpi	r24, 0x01	; 1
    4fb2:	29 f4       	brne	.+10     	; 0x4fbe <main+0x7b4>
            {
                LCD_DisplayString("Upload Done");
    4fb4:	88 e7       	ldi	r24, 0x78	; 120
    4fb6:	92 e0       	ldi	r25, 0x02	; 2
    4fb8:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4fbc:	1a c0       	rjmp	.+52     	; 0x4ff2 <main+0x7e8>
            }
            else if(Wifi_UploadResult == WIFI_SEND_ERROR)
    4fbe:	80 91 91 03 	lds	r24, 0x0391
    4fc2:	88 23       	and	r24, r24
    4fc4:	b1 f4       	brne	.+44     	; 0x4ff2 <main+0x7e8>
            {
                LCD_DisplayString("Upload Failed");
    4fc6:	84 e8       	ldi	r24, 0x84	; 132
    4fc8:	92 e0       	ldi	r25, 0x02	; 2
    4fca:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4fce:	11 c0       	rjmp	.+34     	; 0x4ff2 <main+0x7e8>
            }
            
        }
        else if(WIFI_OpeningSocket_Result == WIFI_Socket_ERROR)
    4fd0:	80 91 8f 03 	lds	r24, 0x038F
    4fd4:	82 30       	cpi	r24, 0x02	; 2
    4fd6:	29 f4       	brne	.+10     	; 0x4fe2 <main+0x7d8>
        {
            LCD_DisplayString("Open Socket Err") ;
    4fd8:	88 e5       	ldi	r24, 0x58	; 88
    4fda:	92 e0       	ldi	r25, 0x02	; 2
    4fdc:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4fe0:	08 c0       	rjmp	.+16     	; 0x4ff2 <main+0x7e8>
        }
        else if(WIFI_OpeningSocket_Result == WIFI_Socket_AlreadyConnected)
    4fe2:	80 91 8f 03 	lds	r24, 0x038F
    4fe6:	83 30       	cpi	r24, 0x03	; 3
    4fe8:	21 f4       	brne	.+8      	; 0x4ff2 <main+0x7e8>
        {
            LCD_DisplayString("Alr Socket open") ;
    4fea:	88 e6       	ldi	r24, 0x68	; 104
    4fec:	92 e0       	ldi	r25, 0x02	; 2
    4fee:	0e 94 98 21 	call	0x4330	; 0x4330 <LCD_DisplayString>
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	90 e8       	ldi	r25, 0x80	; 128
    4ff6:	ab eb       	ldi	r26, 0xBB	; 187
    4ff8:	b4 e4       	ldi	r27, 0x44	; 68
    4ffa:	8b 87       	std	Y+11, r24	; 0x0b
    4ffc:	9c 87       	std	Y+12, r25	; 0x0c
    4ffe:	ad 87       	std	Y+13, r26	; 0x0d
    5000:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5002:	6b 85       	ldd	r22, Y+11	; 0x0b
    5004:	7c 85       	ldd	r23, Y+12	; 0x0c
    5006:	8d 85       	ldd	r24, Y+13	; 0x0d
    5008:	9e 85       	ldd	r25, Y+14	; 0x0e
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	4a ef       	ldi	r20, 0xFA	; 250
    5010:	54 e4       	ldi	r21, 0x44	; 68
    5012:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    5016:	dc 01       	movw	r26, r24
    5018:	cb 01       	movw	r24, r22
    501a:	8f 83       	std	Y+7, r24	; 0x07
    501c:	98 87       	std	Y+8, r25	; 0x08
    501e:	a9 87       	std	Y+9, r26	; 0x09
    5020:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5022:	6f 81       	ldd	r22, Y+7	; 0x07
    5024:	78 85       	ldd	r23, Y+8	; 0x08
    5026:	89 85       	ldd	r24, Y+9	; 0x09
    5028:	9a 85       	ldd	r25, Y+10	; 0x0a
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	40 e8       	ldi	r20, 0x80	; 128
    5030:	5f e3       	ldi	r21, 0x3F	; 63
    5032:	0e 94 4b 04 	call	0x896	; 0x896 <__ltsf2>
    5036:	88 23       	and	r24, r24
    5038:	2c f4       	brge	.+10     	; 0x5044 <main+0x83a>
		__ticks = 1;
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	9e 83       	std	Y+6, r25	; 0x06
    5040:	8d 83       	std	Y+5, r24	; 0x05
    5042:	3f c0       	rjmp	.+126    	; 0x50c2 <main+0x8b8>
	else if (__tmp > 65535)
    5044:	6f 81       	ldd	r22, Y+7	; 0x07
    5046:	78 85       	ldd	r23, Y+8	; 0x08
    5048:	89 85       	ldd	r24, Y+9	; 0x09
    504a:	9a 85       	ldd	r25, Y+10	; 0x0a
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	3f ef       	ldi	r19, 0xFF	; 255
    5050:	4f e7       	ldi	r20, 0x7F	; 127
    5052:	57 e4       	ldi	r21, 0x47	; 71
    5054:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__gtsf2>
    5058:	18 16       	cp	r1, r24
    505a:	4c f5       	brge	.+82     	; 0x50ae <main+0x8a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    505c:	6b 85       	ldd	r22, Y+11	; 0x0b
    505e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5060:	8d 85       	ldd	r24, Y+13	; 0x0d
    5062:	9e 85       	ldd	r25, Y+14	; 0x0e
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	40 e2       	ldi	r20, 0x20	; 32
    506a:	51 e4       	ldi	r21, 0x41	; 65
    506c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	bc 01       	movw	r22, r24
    5076:	cd 01       	movw	r24, r26
    5078:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	9e 83       	std	Y+6, r25	; 0x06
    5082:	8d 83       	std	Y+5, r24	; 0x05
    5084:	0f c0       	rjmp	.+30     	; 0x50a4 <main+0x89a>
    5086:	88 ec       	ldi	r24, 0xC8	; 200
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	9c 83       	std	Y+4, r25	; 0x04
    508c:	8b 83       	std	Y+3, r24	; 0x03
    508e:	8b 81       	ldd	r24, Y+3	; 0x03
    5090:	9c 81       	ldd	r25, Y+4	; 0x04
    5092:	01 97       	sbiw	r24, 0x01	; 1
    5094:	f1 f7       	brne	.-4      	; 0x5092 <main+0x888>
    5096:	9c 83       	std	Y+4, r25	; 0x04
    5098:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    509a:	8d 81       	ldd	r24, Y+5	; 0x05
    509c:	9e 81       	ldd	r25, Y+6	; 0x06
    509e:	01 97       	sbiw	r24, 0x01	; 1
    50a0:	9e 83       	std	Y+6, r25	; 0x06
    50a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50a4:	8d 81       	ldd	r24, Y+5	; 0x05
    50a6:	9e 81       	ldd	r25, Y+6	; 0x06
    50a8:	00 97       	sbiw	r24, 0x00	; 0
    50aa:	69 f7       	brne	.-38     	; 0x5086 <main+0x87c>
    50ac:	a2 ce       	rjmp	.-700    	; 0x4df2 <main+0x5e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ae:	6f 81       	ldd	r22, Y+7	; 0x07
    50b0:	78 85       	ldd	r23, Y+8	; 0x08
    50b2:	89 85       	ldd	r24, Y+9	; 0x09
    50b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b6:	0e 94 1b 01 	call	0x236	; 0x236 <__fixunssfsi>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	9e 83       	std	Y+6, r25	; 0x06
    50c0:	8d 83       	std	Y+5, r24	; 0x05
    50c2:	8d 81       	ldd	r24, Y+5	; 0x05
    50c4:	9e 81       	ldd	r25, Y+6	; 0x06
    50c6:	9a 83       	std	Y+2, r25	; 0x02
    50c8:	89 83       	std	Y+1, r24	; 0x01
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	9a 81       	ldd	r25, Y+2	; 0x02
    50ce:	01 97       	sbiw	r24, 0x01	; 1
    50d0:	f1 f7       	brne	.-4      	; 0x50ce <main+0x8c4>
    50d2:	9a 83       	std	Y+2, r25	; 0x02
    50d4:	89 83       	std	Y+1, r24	; 0x01
    50d6:	8d ce       	rjmp	.-742    	; 0x4df2 <main+0x5e8>

000050d8 <__udivmodhi4>:
    50d8:	aa 1b       	sub	r26, r26
    50da:	bb 1b       	sub	r27, r27
    50dc:	51 e1       	ldi	r21, 0x11	; 17
    50de:	07 c0       	rjmp	.+14     	; 0x50ee <__udivmodhi4_ep>

000050e0 <__udivmodhi4_loop>:
    50e0:	aa 1f       	adc	r26, r26
    50e2:	bb 1f       	adc	r27, r27
    50e4:	a6 17       	cp	r26, r22
    50e6:	b7 07       	cpc	r27, r23
    50e8:	10 f0       	brcs	.+4      	; 0x50ee <__udivmodhi4_ep>
    50ea:	a6 1b       	sub	r26, r22
    50ec:	b7 0b       	sbc	r27, r23

000050ee <__udivmodhi4_ep>:
    50ee:	88 1f       	adc	r24, r24
    50f0:	99 1f       	adc	r25, r25
    50f2:	5a 95       	dec	r21
    50f4:	a9 f7       	brne	.-22     	; 0x50e0 <__udivmodhi4_loop>
    50f6:	80 95       	com	r24
    50f8:	90 95       	com	r25
    50fa:	bc 01       	movw	r22, r24
    50fc:	cd 01       	movw	r24, r26
    50fe:	08 95       	ret

00005100 <__prologue_saves__>:
    5100:	2f 92       	push	r2
    5102:	3f 92       	push	r3
    5104:	4f 92       	push	r4
    5106:	5f 92       	push	r5
    5108:	6f 92       	push	r6
    510a:	7f 92       	push	r7
    510c:	8f 92       	push	r8
    510e:	9f 92       	push	r9
    5110:	af 92       	push	r10
    5112:	bf 92       	push	r11
    5114:	cf 92       	push	r12
    5116:	df 92       	push	r13
    5118:	ef 92       	push	r14
    511a:	ff 92       	push	r15
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	cd b7       	in	r28, 0x3d	; 61
    5126:	de b7       	in	r29, 0x3e	; 62
    5128:	ca 1b       	sub	r28, r26
    512a:	db 0b       	sbc	r29, r27
    512c:	0f b6       	in	r0, 0x3f	; 63
    512e:	f8 94       	cli
    5130:	de bf       	out	0x3e, r29	; 62
    5132:	0f be       	out	0x3f, r0	; 63
    5134:	cd bf       	out	0x3d, r28	; 61
    5136:	09 94       	ijmp

00005138 <__epilogue_restores__>:
    5138:	2a 88       	ldd	r2, Y+18	; 0x12
    513a:	39 88       	ldd	r3, Y+17	; 0x11
    513c:	48 88       	ldd	r4, Y+16	; 0x10
    513e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5140:	6e 84       	ldd	r6, Y+14	; 0x0e
    5142:	7d 84       	ldd	r7, Y+13	; 0x0d
    5144:	8c 84       	ldd	r8, Y+12	; 0x0c
    5146:	9b 84       	ldd	r9, Y+11	; 0x0b
    5148:	aa 84       	ldd	r10, Y+10	; 0x0a
    514a:	b9 84       	ldd	r11, Y+9	; 0x09
    514c:	c8 84       	ldd	r12, Y+8	; 0x08
    514e:	df 80       	ldd	r13, Y+7	; 0x07
    5150:	ee 80       	ldd	r14, Y+6	; 0x06
    5152:	fd 80       	ldd	r15, Y+5	; 0x05
    5154:	0c 81       	ldd	r16, Y+4	; 0x04
    5156:	1b 81       	ldd	r17, Y+3	; 0x03
    5158:	aa 81       	ldd	r26, Y+2	; 0x02
    515a:	b9 81       	ldd	r27, Y+1	; 0x01
    515c:	ce 0f       	add	r28, r30
    515e:	d1 1d       	adc	r29, r1
    5160:	0f b6       	in	r0, 0x3f	; 63
    5162:	f8 94       	cli
    5164:	de bf       	out	0x3e, r29	; 62
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	cd bf       	out	0x3d, r28	; 61
    516a:	ed 01       	movw	r28, r26
    516c:	08 95       	ret

0000516e <itoa>:
    516e:	fb 01       	movw	r30, r22
    5170:	9f 01       	movw	r18, r30
    5172:	e8 94       	clt
    5174:	42 30       	cpi	r20, 0x02	; 2
    5176:	c4 f0       	brlt	.+48     	; 0x51a8 <itoa+0x3a>
    5178:	45 32       	cpi	r20, 0x25	; 37
    517a:	b4 f4       	brge	.+44     	; 0x51a8 <itoa+0x3a>
    517c:	4a 30       	cpi	r20, 0x0A	; 10
    517e:	29 f4       	brne	.+10     	; 0x518a <itoa+0x1c>
    5180:	97 fb       	bst	r25, 7
    5182:	1e f4       	brtc	.+6      	; 0x518a <itoa+0x1c>
    5184:	90 95       	com	r25
    5186:	81 95       	neg	r24
    5188:	9f 4f       	sbci	r25, 0xFF	; 255
    518a:	64 2f       	mov	r22, r20
    518c:	77 27       	eor	r23, r23
    518e:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__udivmodhi4>
    5192:	80 5d       	subi	r24, 0xD0	; 208
    5194:	8a 33       	cpi	r24, 0x3A	; 58
    5196:	0c f0       	brlt	.+2      	; 0x519a <itoa+0x2c>
    5198:	89 5d       	subi	r24, 0xD9	; 217
    519a:	81 93       	st	Z+, r24
    519c:	cb 01       	movw	r24, r22
    519e:	00 97       	sbiw	r24, 0x00	; 0
    51a0:	a1 f7       	brne	.-24     	; 0x518a <itoa+0x1c>
    51a2:	16 f4       	brtc	.+4      	; 0x51a8 <itoa+0x3a>
    51a4:	5d e2       	ldi	r21, 0x2D	; 45
    51a6:	51 93       	st	Z+, r21
    51a8:	10 82       	st	Z, r1
    51aa:	c9 01       	movw	r24, r18
    51ac:	0c 94 ef 2a 	jmp	0x55de	; 0x55de <strrev>

000051b0 <sprintf>:
    51b0:	ae e0       	ldi	r26, 0x0E	; 14
    51b2:	b0 e0       	ldi	r27, 0x00	; 0
    51b4:	ee ed       	ldi	r30, 0xDE	; 222
    51b6:	f8 e2       	ldi	r31, 0x28	; 40
    51b8:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__prologue_saves__+0x1c>
    51bc:	0d 89       	ldd	r16, Y+21	; 0x15
    51be:	1e 89       	ldd	r17, Y+22	; 0x16
    51c0:	86 e0       	ldi	r24, 0x06	; 6
    51c2:	8c 83       	std	Y+4, r24	; 0x04
    51c4:	1a 83       	std	Y+2, r17	; 0x02
    51c6:	09 83       	std	Y+1, r16	; 0x01
    51c8:	8f ef       	ldi	r24, 0xFF	; 255
    51ca:	9f e7       	ldi	r25, 0x7F	; 127
    51cc:	9e 83       	std	Y+6, r25	; 0x06
    51ce:	8d 83       	std	Y+5, r24	; 0x05
    51d0:	9e 01       	movw	r18, r28
    51d2:	27 5e       	subi	r18, 0xE7	; 231
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	ce 01       	movw	r24, r28
    51d8:	01 96       	adiw	r24, 0x01	; 1
    51da:	6f 89       	ldd	r22, Y+23	; 0x17
    51dc:	78 8d       	ldd	r23, Y+24	; 0x18
    51de:	a9 01       	movw	r20, r18
    51e0:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <vfprintf>
    51e4:	2f 81       	ldd	r18, Y+7	; 0x07
    51e6:	38 85       	ldd	r19, Y+8	; 0x08
    51e8:	02 0f       	add	r16, r18
    51ea:	13 1f       	adc	r17, r19
    51ec:	f8 01       	movw	r30, r16
    51ee:	10 82       	st	Z, r1
    51f0:	2e 96       	adiw	r28, 0x0e	; 14
    51f2:	e4 e0       	ldi	r30, 0x04	; 4
    51f4:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__epilogue_restores__+0x1c>

000051f8 <vfprintf>:
    51f8:	ab e0       	ldi	r26, 0x0B	; 11
    51fa:	b0 e0       	ldi	r27, 0x00	; 0
    51fc:	e2 e0       	ldi	r30, 0x02	; 2
    51fe:	f9 e2       	ldi	r31, 0x29	; 41
    5200:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__prologue_saves__>
    5204:	3c 01       	movw	r6, r24
    5206:	2b 01       	movw	r4, r22
    5208:	5a 01       	movw	r10, r20
    520a:	fc 01       	movw	r30, r24
    520c:	17 82       	std	Z+7, r1	; 0x07
    520e:	16 82       	std	Z+6, r1	; 0x06
    5210:	83 81       	ldd	r24, Z+3	; 0x03
    5212:	81 fd       	sbrc	r24, 1
    5214:	03 c0       	rjmp	.+6      	; 0x521c <vfprintf+0x24>
    5216:	6f ef       	ldi	r22, 0xFF	; 255
    5218:	7f ef       	ldi	r23, 0xFF	; 255
    521a:	c6 c1       	rjmp	.+908    	; 0x55a8 <vfprintf+0x3b0>
    521c:	9a e0       	ldi	r25, 0x0A	; 10
    521e:	89 2e       	mov	r8, r25
    5220:	1e 01       	movw	r2, r28
    5222:	08 94       	sec
    5224:	21 1c       	adc	r2, r1
    5226:	31 1c       	adc	r3, r1
    5228:	f3 01       	movw	r30, r6
    522a:	23 81       	ldd	r18, Z+3	; 0x03
    522c:	f2 01       	movw	r30, r4
    522e:	23 fd       	sbrc	r18, 3
    5230:	85 91       	lpm	r24, Z+
    5232:	23 ff       	sbrs	r18, 3
    5234:	81 91       	ld	r24, Z+
    5236:	2f 01       	movw	r4, r30
    5238:	88 23       	and	r24, r24
    523a:	09 f4       	brne	.+2      	; 0x523e <vfprintf+0x46>
    523c:	b2 c1       	rjmp	.+868    	; 0x55a2 <vfprintf+0x3aa>
    523e:	85 32       	cpi	r24, 0x25	; 37
    5240:	39 f4       	brne	.+14     	; 0x5250 <vfprintf+0x58>
    5242:	23 fd       	sbrc	r18, 3
    5244:	85 91       	lpm	r24, Z+
    5246:	23 ff       	sbrs	r18, 3
    5248:	81 91       	ld	r24, Z+
    524a:	2f 01       	movw	r4, r30
    524c:	85 32       	cpi	r24, 0x25	; 37
    524e:	29 f4       	brne	.+10     	; 0x525a <vfprintf+0x62>
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	b3 01       	movw	r22, r6
    5254:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5258:	e7 cf       	rjmp	.-50     	; 0x5228 <vfprintf+0x30>
    525a:	98 2f       	mov	r25, r24
    525c:	ff 24       	eor	r15, r15
    525e:	ee 24       	eor	r14, r14
    5260:	99 24       	eor	r9, r9
    5262:	ff e1       	ldi	r31, 0x1F	; 31
    5264:	ff 15       	cp	r31, r15
    5266:	d0 f0       	brcs	.+52     	; 0x529c <vfprintf+0xa4>
    5268:	9b 32       	cpi	r25, 0x2B	; 43
    526a:	69 f0       	breq	.+26     	; 0x5286 <vfprintf+0x8e>
    526c:	9c 32       	cpi	r25, 0x2C	; 44
    526e:	28 f4       	brcc	.+10     	; 0x527a <vfprintf+0x82>
    5270:	90 32       	cpi	r25, 0x20	; 32
    5272:	59 f0       	breq	.+22     	; 0x528a <vfprintf+0x92>
    5274:	93 32       	cpi	r25, 0x23	; 35
    5276:	91 f4       	brne	.+36     	; 0x529c <vfprintf+0xa4>
    5278:	0e c0       	rjmp	.+28     	; 0x5296 <vfprintf+0x9e>
    527a:	9d 32       	cpi	r25, 0x2D	; 45
    527c:	49 f0       	breq	.+18     	; 0x5290 <vfprintf+0x98>
    527e:	90 33       	cpi	r25, 0x30	; 48
    5280:	69 f4       	brne	.+26     	; 0x529c <vfprintf+0xa4>
    5282:	41 e0       	ldi	r20, 0x01	; 1
    5284:	24 c0       	rjmp	.+72     	; 0x52ce <vfprintf+0xd6>
    5286:	52 e0       	ldi	r21, 0x02	; 2
    5288:	f5 2a       	or	r15, r21
    528a:	84 e0       	ldi	r24, 0x04	; 4
    528c:	f8 2a       	or	r15, r24
    528e:	28 c0       	rjmp	.+80     	; 0x52e0 <vfprintf+0xe8>
    5290:	98 e0       	ldi	r25, 0x08	; 8
    5292:	f9 2a       	or	r15, r25
    5294:	25 c0       	rjmp	.+74     	; 0x52e0 <vfprintf+0xe8>
    5296:	e0 e1       	ldi	r30, 0x10	; 16
    5298:	fe 2a       	or	r15, r30
    529a:	22 c0       	rjmp	.+68     	; 0x52e0 <vfprintf+0xe8>
    529c:	f7 fc       	sbrc	r15, 7
    529e:	29 c0       	rjmp	.+82     	; 0x52f2 <vfprintf+0xfa>
    52a0:	89 2f       	mov	r24, r25
    52a2:	80 53       	subi	r24, 0x30	; 48
    52a4:	8a 30       	cpi	r24, 0x0A	; 10
    52a6:	70 f4       	brcc	.+28     	; 0x52c4 <vfprintf+0xcc>
    52a8:	f6 fe       	sbrs	r15, 6
    52aa:	05 c0       	rjmp	.+10     	; 0x52b6 <vfprintf+0xbe>
    52ac:	98 9c       	mul	r9, r8
    52ae:	90 2c       	mov	r9, r0
    52b0:	11 24       	eor	r1, r1
    52b2:	98 0e       	add	r9, r24
    52b4:	15 c0       	rjmp	.+42     	; 0x52e0 <vfprintf+0xe8>
    52b6:	e8 9c       	mul	r14, r8
    52b8:	e0 2c       	mov	r14, r0
    52ba:	11 24       	eor	r1, r1
    52bc:	e8 0e       	add	r14, r24
    52be:	f0 e2       	ldi	r31, 0x20	; 32
    52c0:	ff 2a       	or	r15, r31
    52c2:	0e c0       	rjmp	.+28     	; 0x52e0 <vfprintf+0xe8>
    52c4:	9e 32       	cpi	r25, 0x2E	; 46
    52c6:	29 f4       	brne	.+10     	; 0x52d2 <vfprintf+0xda>
    52c8:	f6 fc       	sbrc	r15, 6
    52ca:	6b c1       	rjmp	.+726    	; 0x55a2 <vfprintf+0x3aa>
    52cc:	40 e4       	ldi	r20, 0x40	; 64
    52ce:	f4 2a       	or	r15, r20
    52d0:	07 c0       	rjmp	.+14     	; 0x52e0 <vfprintf+0xe8>
    52d2:	9c 36       	cpi	r25, 0x6C	; 108
    52d4:	19 f4       	brne	.+6      	; 0x52dc <vfprintf+0xe4>
    52d6:	50 e8       	ldi	r21, 0x80	; 128
    52d8:	f5 2a       	or	r15, r21
    52da:	02 c0       	rjmp	.+4      	; 0x52e0 <vfprintf+0xe8>
    52dc:	98 36       	cpi	r25, 0x68	; 104
    52de:	49 f4       	brne	.+18     	; 0x52f2 <vfprintf+0xfa>
    52e0:	f2 01       	movw	r30, r4
    52e2:	23 fd       	sbrc	r18, 3
    52e4:	95 91       	lpm	r25, Z+
    52e6:	23 ff       	sbrs	r18, 3
    52e8:	91 91       	ld	r25, Z+
    52ea:	2f 01       	movw	r4, r30
    52ec:	99 23       	and	r25, r25
    52ee:	09 f0       	breq	.+2      	; 0x52f2 <vfprintf+0xfa>
    52f0:	b8 cf       	rjmp	.-144    	; 0x5262 <vfprintf+0x6a>
    52f2:	89 2f       	mov	r24, r25
    52f4:	85 54       	subi	r24, 0x45	; 69
    52f6:	83 30       	cpi	r24, 0x03	; 3
    52f8:	18 f0       	brcs	.+6      	; 0x5300 <vfprintf+0x108>
    52fa:	80 52       	subi	r24, 0x20	; 32
    52fc:	83 30       	cpi	r24, 0x03	; 3
    52fe:	38 f4       	brcc	.+14     	; 0x530e <vfprintf+0x116>
    5300:	44 e0       	ldi	r20, 0x04	; 4
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	a4 0e       	add	r10, r20
    5306:	b5 1e       	adc	r11, r21
    5308:	5f e3       	ldi	r21, 0x3F	; 63
    530a:	59 83       	std	Y+1, r21	; 0x01
    530c:	0f c0       	rjmp	.+30     	; 0x532c <vfprintf+0x134>
    530e:	93 36       	cpi	r25, 0x63	; 99
    5310:	31 f0       	breq	.+12     	; 0x531e <vfprintf+0x126>
    5312:	93 37       	cpi	r25, 0x73	; 115
    5314:	79 f0       	breq	.+30     	; 0x5334 <vfprintf+0x13c>
    5316:	93 35       	cpi	r25, 0x53	; 83
    5318:	09 f0       	breq	.+2      	; 0x531c <vfprintf+0x124>
    531a:	56 c0       	rjmp	.+172    	; 0x53c8 <vfprintf+0x1d0>
    531c:	20 c0       	rjmp	.+64     	; 0x535e <vfprintf+0x166>
    531e:	f5 01       	movw	r30, r10
    5320:	80 81       	ld	r24, Z
    5322:	89 83       	std	Y+1, r24	; 0x01
    5324:	42 e0       	ldi	r20, 0x02	; 2
    5326:	50 e0       	ldi	r21, 0x00	; 0
    5328:	a4 0e       	add	r10, r20
    532a:	b5 1e       	adc	r11, r21
    532c:	61 01       	movw	r12, r2
    532e:	01 e0       	ldi	r16, 0x01	; 1
    5330:	10 e0       	ldi	r17, 0x00	; 0
    5332:	12 c0       	rjmp	.+36     	; 0x5358 <vfprintf+0x160>
    5334:	f5 01       	movw	r30, r10
    5336:	c0 80       	ld	r12, Z
    5338:	d1 80       	ldd	r13, Z+1	; 0x01
    533a:	f6 fc       	sbrc	r15, 6
    533c:	03 c0       	rjmp	.+6      	; 0x5344 <vfprintf+0x14c>
    533e:	6f ef       	ldi	r22, 0xFF	; 255
    5340:	7f ef       	ldi	r23, 0xFF	; 255
    5342:	02 c0       	rjmp	.+4      	; 0x5348 <vfprintf+0x150>
    5344:	69 2d       	mov	r22, r9
    5346:	70 e0       	ldi	r23, 0x00	; 0
    5348:	42 e0       	ldi	r20, 0x02	; 2
    534a:	50 e0       	ldi	r21, 0x00	; 0
    534c:	a4 0e       	add	r10, r20
    534e:	b5 1e       	adc	r11, r21
    5350:	c6 01       	movw	r24, r12
    5352:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <strnlen>
    5356:	8c 01       	movw	r16, r24
    5358:	5f e7       	ldi	r21, 0x7F	; 127
    535a:	f5 22       	and	r15, r21
    535c:	14 c0       	rjmp	.+40     	; 0x5386 <vfprintf+0x18e>
    535e:	f5 01       	movw	r30, r10
    5360:	c0 80       	ld	r12, Z
    5362:	d1 80       	ldd	r13, Z+1	; 0x01
    5364:	f6 fc       	sbrc	r15, 6
    5366:	03 c0       	rjmp	.+6      	; 0x536e <vfprintf+0x176>
    5368:	6f ef       	ldi	r22, 0xFF	; 255
    536a:	7f ef       	ldi	r23, 0xFF	; 255
    536c:	02 c0       	rjmp	.+4      	; 0x5372 <vfprintf+0x17a>
    536e:	69 2d       	mov	r22, r9
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	42 e0       	ldi	r20, 0x02	; 2
    5374:	50 e0       	ldi	r21, 0x00	; 0
    5376:	a4 0e       	add	r10, r20
    5378:	b5 1e       	adc	r11, r21
    537a:	c6 01       	movw	r24, r12
    537c:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <strnlen_P>
    5380:	8c 01       	movw	r16, r24
    5382:	50 e8       	ldi	r21, 0x80	; 128
    5384:	f5 2a       	or	r15, r21
    5386:	f3 fe       	sbrs	r15, 3
    5388:	07 c0       	rjmp	.+14     	; 0x5398 <vfprintf+0x1a0>
    538a:	1a c0       	rjmp	.+52     	; 0x53c0 <vfprintf+0x1c8>
    538c:	80 e2       	ldi	r24, 0x20	; 32
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	b3 01       	movw	r22, r6
    5392:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5396:	ea 94       	dec	r14
    5398:	8e 2d       	mov	r24, r14
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	08 17       	cp	r16, r24
    539e:	19 07       	cpc	r17, r25
    53a0:	a8 f3       	brcs	.-22     	; 0x538c <vfprintf+0x194>
    53a2:	0e c0       	rjmp	.+28     	; 0x53c0 <vfprintf+0x1c8>
    53a4:	f6 01       	movw	r30, r12
    53a6:	f7 fc       	sbrc	r15, 7
    53a8:	85 91       	lpm	r24, Z+
    53aa:	f7 fe       	sbrs	r15, 7
    53ac:	81 91       	ld	r24, Z+
    53ae:	6f 01       	movw	r12, r30
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	b3 01       	movw	r22, r6
    53b4:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    53b8:	e1 10       	cpse	r14, r1
    53ba:	ea 94       	dec	r14
    53bc:	01 50       	subi	r16, 0x01	; 1
    53be:	10 40       	sbci	r17, 0x00	; 0
    53c0:	01 15       	cp	r16, r1
    53c2:	11 05       	cpc	r17, r1
    53c4:	79 f7       	brne	.-34     	; 0x53a4 <vfprintf+0x1ac>
    53c6:	ea c0       	rjmp	.+468    	; 0x559c <vfprintf+0x3a4>
    53c8:	94 36       	cpi	r25, 0x64	; 100
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <vfprintf+0x1d8>
    53cc:	99 36       	cpi	r25, 0x69	; 105
    53ce:	69 f5       	brne	.+90     	; 0x542a <vfprintf+0x232>
    53d0:	f7 fe       	sbrs	r15, 7
    53d2:	08 c0       	rjmp	.+16     	; 0x53e4 <vfprintf+0x1ec>
    53d4:	f5 01       	movw	r30, r10
    53d6:	20 81       	ld	r18, Z
    53d8:	31 81       	ldd	r19, Z+1	; 0x01
    53da:	42 81       	ldd	r20, Z+2	; 0x02
    53dc:	53 81       	ldd	r21, Z+3	; 0x03
    53de:	84 e0       	ldi	r24, 0x04	; 4
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	0a c0       	rjmp	.+20     	; 0x53f8 <vfprintf+0x200>
    53e4:	f5 01       	movw	r30, r10
    53e6:	80 81       	ld	r24, Z
    53e8:	91 81       	ldd	r25, Z+1	; 0x01
    53ea:	9c 01       	movw	r18, r24
    53ec:	44 27       	eor	r20, r20
    53ee:	37 fd       	sbrc	r19, 7
    53f0:	40 95       	com	r20
    53f2:	54 2f       	mov	r21, r20
    53f4:	82 e0       	ldi	r24, 0x02	; 2
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	a8 0e       	add	r10, r24
    53fa:	b9 1e       	adc	r11, r25
    53fc:	9f e6       	ldi	r25, 0x6F	; 111
    53fe:	f9 22       	and	r15, r25
    5400:	57 ff       	sbrs	r21, 7
    5402:	09 c0       	rjmp	.+18     	; 0x5416 <vfprintf+0x21e>
    5404:	50 95       	com	r21
    5406:	40 95       	com	r20
    5408:	30 95       	com	r19
    540a:	21 95       	neg	r18
    540c:	3f 4f       	sbci	r19, 0xFF	; 255
    540e:	4f 4f       	sbci	r20, 0xFF	; 255
    5410:	5f 4f       	sbci	r21, 0xFF	; 255
    5412:	e0 e8       	ldi	r30, 0x80	; 128
    5414:	fe 2a       	or	r15, r30
    5416:	ca 01       	movw	r24, r20
    5418:	b9 01       	movw	r22, r18
    541a:	a1 01       	movw	r20, r2
    541c:	2a e0       	ldi	r18, 0x0A	; 10
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	0e 94 2b 2b 	call	0x5656	; 0x5656 <__ultoa_invert>
    5424:	d8 2e       	mov	r13, r24
    5426:	d2 18       	sub	r13, r2
    5428:	40 c0       	rjmp	.+128    	; 0x54aa <vfprintf+0x2b2>
    542a:	95 37       	cpi	r25, 0x75	; 117
    542c:	29 f4       	brne	.+10     	; 0x5438 <vfprintf+0x240>
    542e:	1f 2d       	mov	r17, r15
    5430:	1f 7e       	andi	r17, 0xEF	; 239
    5432:	2a e0       	ldi	r18, 0x0A	; 10
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	1d c0       	rjmp	.+58     	; 0x5472 <vfprintf+0x27a>
    5438:	1f 2d       	mov	r17, r15
    543a:	19 7f       	andi	r17, 0xF9	; 249
    543c:	9f 36       	cpi	r25, 0x6F	; 111
    543e:	61 f0       	breq	.+24     	; 0x5458 <vfprintf+0x260>
    5440:	90 37       	cpi	r25, 0x70	; 112
    5442:	20 f4       	brcc	.+8      	; 0x544c <vfprintf+0x254>
    5444:	98 35       	cpi	r25, 0x58	; 88
    5446:	09 f0       	breq	.+2      	; 0x544a <vfprintf+0x252>
    5448:	ac c0       	rjmp	.+344    	; 0x55a2 <vfprintf+0x3aa>
    544a:	0f c0       	rjmp	.+30     	; 0x546a <vfprintf+0x272>
    544c:	90 37       	cpi	r25, 0x70	; 112
    544e:	39 f0       	breq	.+14     	; 0x545e <vfprintf+0x266>
    5450:	98 37       	cpi	r25, 0x78	; 120
    5452:	09 f0       	breq	.+2      	; 0x5456 <vfprintf+0x25e>
    5454:	a6 c0       	rjmp	.+332    	; 0x55a2 <vfprintf+0x3aa>
    5456:	04 c0       	rjmp	.+8      	; 0x5460 <vfprintf+0x268>
    5458:	28 e0       	ldi	r18, 0x08	; 8
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	0a c0       	rjmp	.+20     	; 0x5472 <vfprintf+0x27a>
    545e:	10 61       	ori	r17, 0x10	; 16
    5460:	14 fd       	sbrc	r17, 4
    5462:	14 60       	ori	r17, 0x04	; 4
    5464:	20 e1       	ldi	r18, 0x10	; 16
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	04 c0       	rjmp	.+8      	; 0x5472 <vfprintf+0x27a>
    546a:	14 fd       	sbrc	r17, 4
    546c:	16 60       	ori	r17, 0x06	; 6
    546e:	20 e1       	ldi	r18, 0x10	; 16
    5470:	32 e0       	ldi	r19, 0x02	; 2
    5472:	17 ff       	sbrs	r17, 7
    5474:	08 c0       	rjmp	.+16     	; 0x5486 <vfprintf+0x28e>
    5476:	f5 01       	movw	r30, r10
    5478:	60 81       	ld	r22, Z
    547a:	71 81       	ldd	r23, Z+1	; 0x01
    547c:	82 81       	ldd	r24, Z+2	; 0x02
    547e:	93 81       	ldd	r25, Z+3	; 0x03
    5480:	44 e0       	ldi	r20, 0x04	; 4
    5482:	50 e0       	ldi	r21, 0x00	; 0
    5484:	08 c0       	rjmp	.+16     	; 0x5496 <vfprintf+0x29e>
    5486:	f5 01       	movw	r30, r10
    5488:	80 81       	ld	r24, Z
    548a:	91 81       	ldd	r25, Z+1	; 0x01
    548c:	bc 01       	movw	r22, r24
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	42 e0       	ldi	r20, 0x02	; 2
    5494:	50 e0       	ldi	r21, 0x00	; 0
    5496:	a4 0e       	add	r10, r20
    5498:	b5 1e       	adc	r11, r21
    549a:	a1 01       	movw	r20, r2
    549c:	0e 94 2b 2b 	call	0x5656	; 0x5656 <__ultoa_invert>
    54a0:	d8 2e       	mov	r13, r24
    54a2:	d2 18       	sub	r13, r2
    54a4:	8f e7       	ldi	r24, 0x7F	; 127
    54a6:	f8 2e       	mov	r15, r24
    54a8:	f1 22       	and	r15, r17
    54aa:	f6 fe       	sbrs	r15, 6
    54ac:	0b c0       	rjmp	.+22     	; 0x54c4 <vfprintf+0x2cc>
    54ae:	5e ef       	ldi	r21, 0xFE	; 254
    54b0:	f5 22       	and	r15, r21
    54b2:	d9 14       	cp	r13, r9
    54b4:	38 f4       	brcc	.+14     	; 0x54c4 <vfprintf+0x2cc>
    54b6:	f4 fe       	sbrs	r15, 4
    54b8:	07 c0       	rjmp	.+14     	; 0x54c8 <vfprintf+0x2d0>
    54ba:	f2 fc       	sbrc	r15, 2
    54bc:	05 c0       	rjmp	.+10     	; 0x54c8 <vfprintf+0x2d0>
    54be:	8f ee       	ldi	r24, 0xEF	; 239
    54c0:	f8 22       	and	r15, r24
    54c2:	02 c0       	rjmp	.+4      	; 0x54c8 <vfprintf+0x2d0>
    54c4:	1d 2d       	mov	r17, r13
    54c6:	01 c0       	rjmp	.+2      	; 0x54ca <vfprintf+0x2d2>
    54c8:	19 2d       	mov	r17, r9
    54ca:	f4 fe       	sbrs	r15, 4
    54cc:	0d c0       	rjmp	.+26     	; 0x54e8 <vfprintf+0x2f0>
    54ce:	fe 01       	movw	r30, r28
    54d0:	ed 0d       	add	r30, r13
    54d2:	f1 1d       	adc	r31, r1
    54d4:	80 81       	ld	r24, Z
    54d6:	80 33       	cpi	r24, 0x30	; 48
    54d8:	19 f4       	brne	.+6      	; 0x54e0 <vfprintf+0x2e8>
    54da:	99 ee       	ldi	r25, 0xE9	; 233
    54dc:	f9 22       	and	r15, r25
    54de:	08 c0       	rjmp	.+16     	; 0x54f0 <vfprintf+0x2f8>
    54e0:	1f 5f       	subi	r17, 0xFF	; 255
    54e2:	f2 fe       	sbrs	r15, 2
    54e4:	05 c0       	rjmp	.+10     	; 0x54f0 <vfprintf+0x2f8>
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <vfprintf+0x2f6>
    54e8:	8f 2d       	mov	r24, r15
    54ea:	86 78       	andi	r24, 0x86	; 134
    54ec:	09 f0       	breq	.+2      	; 0x54f0 <vfprintf+0x2f8>
    54ee:	1f 5f       	subi	r17, 0xFF	; 255
    54f0:	0f 2d       	mov	r16, r15
    54f2:	f3 fc       	sbrc	r15, 3
    54f4:	14 c0       	rjmp	.+40     	; 0x551e <vfprintf+0x326>
    54f6:	f0 fe       	sbrs	r15, 0
    54f8:	0f c0       	rjmp	.+30     	; 0x5518 <vfprintf+0x320>
    54fa:	1e 15       	cp	r17, r14
    54fc:	10 f0       	brcs	.+4      	; 0x5502 <vfprintf+0x30a>
    54fe:	9d 2c       	mov	r9, r13
    5500:	0b c0       	rjmp	.+22     	; 0x5518 <vfprintf+0x320>
    5502:	9d 2c       	mov	r9, r13
    5504:	9e 0c       	add	r9, r14
    5506:	91 1a       	sub	r9, r17
    5508:	1e 2d       	mov	r17, r14
    550a:	06 c0       	rjmp	.+12     	; 0x5518 <vfprintf+0x320>
    550c:	80 e2       	ldi	r24, 0x20	; 32
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	b3 01       	movw	r22, r6
    5512:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5516:	1f 5f       	subi	r17, 0xFF	; 255
    5518:	1e 15       	cp	r17, r14
    551a:	c0 f3       	brcs	.-16     	; 0x550c <vfprintf+0x314>
    551c:	04 c0       	rjmp	.+8      	; 0x5526 <vfprintf+0x32e>
    551e:	1e 15       	cp	r17, r14
    5520:	10 f4       	brcc	.+4      	; 0x5526 <vfprintf+0x32e>
    5522:	e1 1a       	sub	r14, r17
    5524:	01 c0       	rjmp	.+2      	; 0x5528 <vfprintf+0x330>
    5526:	ee 24       	eor	r14, r14
    5528:	04 ff       	sbrs	r16, 4
    552a:	0f c0       	rjmp	.+30     	; 0x554a <vfprintf+0x352>
    552c:	80 e3       	ldi	r24, 0x30	; 48
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	b3 01       	movw	r22, r6
    5532:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5536:	02 ff       	sbrs	r16, 2
    5538:	1d c0       	rjmp	.+58     	; 0x5574 <vfprintf+0x37c>
    553a:	01 fd       	sbrc	r16, 1
    553c:	03 c0       	rjmp	.+6      	; 0x5544 <vfprintf+0x34c>
    553e:	88 e7       	ldi	r24, 0x78	; 120
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	0e c0       	rjmp	.+28     	; 0x5560 <vfprintf+0x368>
    5544:	88 e5       	ldi	r24, 0x58	; 88
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	0b c0       	rjmp	.+22     	; 0x5560 <vfprintf+0x368>
    554a:	80 2f       	mov	r24, r16
    554c:	86 78       	andi	r24, 0x86	; 134
    554e:	91 f0       	breq	.+36     	; 0x5574 <vfprintf+0x37c>
    5550:	01 ff       	sbrs	r16, 1
    5552:	02 c0       	rjmp	.+4      	; 0x5558 <vfprintf+0x360>
    5554:	8b e2       	ldi	r24, 0x2B	; 43
    5556:	01 c0       	rjmp	.+2      	; 0x555a <vfprintf+0x362>
    5558:	80 e2       	ldi	r24, 0x20	; 32
    555a:	f7 fc       	sbrc	r15, 7
    555c:	8d e2       	ldi	r24, 0x2D	; 45
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	b3 01       	movw	r22, r6
    5562:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5566:	06 c0       	rjmp	.+12     	; 0x5574 <vfprintf+0x37c>
    5568:	80 e3       	ldi	r24, 0x30	; 48
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	b3 01       	movw	r22, r6
    556e:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    5572:	9a 94       	dec	r9
    5574:	d9 14       	cp	r13, r9
    5576:	c0 f3       	brcs	.-16     	; 0x5568 <vfprintf+0x370>
    5578:	da 94       	dec	r13
    557a:	f1 01       	movw	r30, r2
    557c:	ed 0d       	add	r30, r13
    557e:	f1 1d       	adc	r31, r1
    5580:	80 81       	ld	r24, Z
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	b3 01       	movw	r22, r6
    5586:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    558a:	dd 20       	and	r13, r13
    558c:	a9 f7       	brne	.-22     	; 0x5578 <vfprintf+0x380>
    558e:	06 c0       	rjmp	.+12     	; 0x559c <vfprintf+0x3a4>
    5590:	80 e2       	ldi	r24, 0x20	; 32
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	b3 01       	movw	r22, r6
    5596:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <fputc>
    559a:	ea 94       	dec	r14
    559c:	ee 20       	and	r14, r14
    559e:	c1 f7       	brne	.-16     	; 0x5590 <vfprintf+0x398>
    55a0:	43 ce       	rjmp	.-890    	; 0x5228 <vfprintf+0x30>
    55a2:	f3 01       	movw	r30, r6
    55a4:	66 81       	ldd	r22, Z+6	; 0x06
    55a6:	77 81       	ldd	r23, Z+7	; 0x07
    55a8:	cb 01       	movw	r24, r22
    55aa:	2b 96       	adiw	r28, 0x0b	; 11
    55ac:	e2 e1       	ldi	r30, 0x12	; 18
    55ae:	0c 94 9c 28 	jmp	0x5138	; 0x5138 <__epilogue_restores__>

000055b2 <strnlen_P>:
    55b2:	fc 01       	movw	r30, r24
    55b4:	05 90       	lpm	r0, Z+
    55b6:	61 50       	subi	r22, 0x01	; 1
    55b8:	70 40       	sbci	r23, 0x00	; 0
    55ba:	01 10       	cpse	r0, r1
    55bc:	d8 f7       	brcc	.-10     	; 0x55b4 <strnlen_P+0x2>
    55be:	80 95       	com	r24
    55c0:	90 95       	com	r25
    55c2:	8e 0f       	add	r24, r30
    55c4:	9f 1f       	adc	r25, r31
    55c6:	08 95       	ret

000055c8 <strnlen>:
    55c8:	fc 01       	movw	r30, r24
    55ca:	61 50       	subi	r22, 0x01	; 1
    55cc:	70 40       	sbci	r23, 0x00	; 0
    55ce:	01 90       	ld	r0, Z+
    55d0:	01 10       	cpse	r0, r1
    55d2:	d8 f7       	brcc	.-10     	; 0x55ca <strnlen+0x2>
    55d4:	80 95       	com	r24
    55d6:	90 95       	com	r25
    55d8:	8e 0f       	add	r24, r30
    55da:	9f 1f       	adc	r25, r31
    55dc:	08 95       	ret

000055de <strrev>:
    55de:	dc 01       	movw	r26, r24
    55e0:	fc 01       	movw	r30, r24
    55e2:	67 2f       	mov	r22, r23
    55e4:	71 91       	ld	r23, Z+
    55e6:	77 23       	and	r23, r23
    55e8:	e1 f7       	brne	.-8      	; 0x55e2 <strrev+0x4>
    55ea:	32 97       	sbiw	r30, 0x02	; 2
    55ec:	04 c0       	rjmp	.+8      	; 0x55f6 <strrev+0x18>
    55ee:	7c 91       	ld	r23, X
    55f0:	6d 93       	st	X+, r22
    55f2:	70 83       	st	Z, r23
    55f4:	62 91       	ld	r22, -Z
    55f6:	ae 17       	cp	r26, r30
    55f8:	bf 07       	cpc	r27, r31
    55fa:	c8 f3       	brcs	.-14     	; 0x55ee <strrev+0x10>
    55fc:	08 95       	ret

000055fe <fputc>:
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	8c 01       	movw	r16, r24
    5608:	eb 01       	movw	r28, r22
    560a:	8b 81       	ldd	r24, Y+3	; 0x03
    560c:	81 ff       	sbrs	r24, 1
    560e:	1b c0       	rjmp	.+54     	; 0x5646 <fputc+0x48>
    5610:	82 ff       	sbrs	r24, 2
    5612:	0d c0       	rjmp	.+26     	; 0x562e <fputc+0x30>
    5614:	2e 81       	ldd	r18, Y+6	; 0x06
    5616:	3f 81       	ldd	r19, Y+7	; 0x07
    5618:	8c 81       	ldd	r24, Y+4	; 0x04
    561a:	9d 81       	ldd	r25, Y+5	; 0x05
    561c:	28 17       	cp	r18, r24
    561e:	39 07       	cpc	r19, r25
    5620:	64 f4       	brge	.+24     	; 0x563a <fputc+0x3c>
    5622:	e8 81       	ld	r30, Y
    5624:	f9 81       	ldd	r31, Y+1	; 0x01
    5626:	01 93       	st	Z+, r16
    5628:	f9 83       	std	Y+1, r31	; 0x01
    562a:	e8 83       	st	Y, r30
    562c:	06 c0       	rjmp	.+12     	; 0x563a <fputc+0x3c>
    562e:	e8 85       	ldd	r30, Y+8	; 0x08
    5630:	f9 85       	ldd	r31, Y+9	; 0x09
    5632:	80 2f       	mov	r24, r16
    5634:	09 95       	icall
    5636:	89 2b       	or	r24, r25
    5638:	31 f4       	brne	.+12     	; 0x5646 <fputc+0x48>
    563a:	8e 81       	ldd	r24, Y+6	; 0x06
    563c:	9f 81       	ldd	r25, Y+7	; 0x07
    563e:	01 96       	adiw	r24, 0x01	; 1
    5640:	9f 83       	std	Y+7, r25	; 0x07
    5642:	8e 83       	std	Y+6, r24	; 0x06
    5644:	02 c0       	rjmp	.+4      	; 0x564a <fputc+0x4c>
    5646:	0f ef       	ldi	r16, 0xFF	; 255
    5648:	1f ef       	ldi	r17, 0xFF	; 255
    564a:	c8 01       	movw	r24, r16
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	08 95       	ret

00005656 <__ultoa_invert>:
    5656:	fa 01       	movw	r30, r20
    5658:	aa 27       	eor	r26, r26
    565a:	28 30       	cpi	r18, 0x08	; 8
    565c:	51 f1       	breq	.+84     	; 0x56b2 <__ultoa_invert+0x5c>
    565e:	20 31       	cpi	r18, 0x10	; 16
    5660:	81 f1       	breq	.+96     	; 0x56c2 <__ultoa_invert+0x6c>
    5662:	e8 94       	clt
    5664:	6f 93       	push	r22
    5666:	6e 7f       	andi	r22, 0xFE	; 254
    5668:	6e 5f       	subi	r22, 0xFE	; 254
    566a:	7f 4f       	sbci	r23, 0xFF	; 255
    566c:	8f 4f       	sbci	r24, 0xFF	; 255
    566e:	9f 4f       	sbci	r25, 0xFF	; 255
    5670:	af 4f       	sbci	r26, 0xFF	; 255
    5672:	b1 e0       	ldi	r27, 0x01	; 1
    5674:	3e d0       	rcall	.+124    	; 0x56f2 <__ultoa_invert+0x9c>
    5676:	b4 e0       	ldi	r27, 0x04	; 4
    5678:	3c d0       	rcall	.+120    	; 0x56f2 <__ultoa_invert+0x9c>
    567a:	67 0f       	add	r22, r23
    567c:	78 1f       	adc	r23, r24
    567e:	89 1f       	adc	r24, r25
    5680:	9a 1f       	adc	r25, r26
    5682:	a1 1d       	adc	r26, r1
    5684:	68 0f       	add	r22, r24
    5686:	79 1f       	adc	r23, r25
    5688:	8a 1f       	adc	r24, r26
    568a:	91 1d       	adc	r25, r1
    568c:	a1 1d       	adc	r26, r1
    568e:	6a 0f       	add	r22, r26
    5690:	71 1d       	adc	r23, r1
    5692:	81 1d       	adc	r24, r1
    5694:	91 1d       	adc	r25, r1
    5696:	a1 1d       	adc	r26, r1
    5698:	20 d0       	rcall	.+64     	; 0x56da <__ultoa_invert+0x84>
    569a:	09 f4       	brne	.+2      	; 0x569e <__ultoa_invert+0x48>
    569c:	68 94       	set
    569e:	3f 91       	pop	r19
    56a0:	2a e0       	ldi	r18, 0x0A	; 10
    56a2:	26 9f       	mul	r18, r22
    56a4:	11 24       	eor	r1, r1
    56a6:	30 19       	sub	r19, r0
    56a8:	30 5d       	subi	r19, 0xD0	; 208
    56aa:	31 93       	st	Z+, r19
    56ac:	de f6       	brtc	.-74     	; 0x5664 <__ultoa_invert+0xe>
    56ae:	cf 01       	movw	r24, r30
    56b0:	08 95       	ret
    56b2:	46 2f       	mov	r20, r22
    56b4:	47 70       	andi	r20, 0x07	; 7
    56b6:	40 5d       	subi	r20, 0xD0	; 208
    56b8:	41 93       	st	Z+, r20
    56ba:	b3 e0       	ldi	r27, 0x03	; 3
    56bc:	0f d0       	rcall	.+30     	; 0x56dc <__ultoa_invert+0x86>
    56be:	c9 f7       	brne	.-14     	; 0x56b2 <__ultoa_invert+0x5c>
    56c0:	f6 cf       	rjmp	.-20     	; 0x56ae <__ultoa_invert+0x58>
    56c2:	46 2f       	mov	r20, r22
    56c4:	4f 70       	andi	r20, 0x0F	; 15
    56c6:	40 5d       	subi	r20, 0xD0	; 208
    56c8:	4a 33       	cpi	r20, 0x3A	; 58
    56ca:	18 f0       	brcs	.+6      	; 0x56d2 <__ultoa_invert+0x7c>
    56cc:	49 5d       	subi	r20, 0xD9	; 217
    56ce:	31 fd       	sbrc	r19, 1
    56d0:	40 52       	subi	r20, 0x20	; 32
    56d2:	41 93       	st	Z+, r20
    56d4:	02 d0       	rcall	.+4      	; 0x56da <__ultoa_invert+0x84>
    56d6:	a9 f7       	brne	.-22     	; 0x56c2 <__ultoa_invert+0x6c>
    56d8:	ea cf       	rjmp	.-44     	; 0x56ae <__ultoa_invert+0x58>
    56da:	b4 e0       	ldi	r27, 0x04	; 4
    56dc:	a6 95       	lsr	r26
    56de:	97 95       	ror	r25
    56e0:	87 95       	ror	r24
    56e2:	77 95       	ror	r23
    56e4:	67 95       	ror	r22
    56e6:	ba 95       	dec	r27
    56e8:	c9 f7       	brne	.-14     	; 0x56dc <__ultoa_invert+0x86>
    56ea:	00 97       	sbiw	r24, 0x00	; 0
    56ec:	61 05       	cpc	r22, r1
    56ee:	71 05       	cpc	r23, r1
    56f0:	08 95       	ret
    56f2:	9b 01       	movw	r18, r22
    56f4:	ac 01       	movw	r20, r24
    56f6:	0a 2e       	mov	r0, r26
    56f8:	06 94       	lsr	r0
    56fa:	57 95       	ror	r21
    56fc:	47 95       	ror	r20
    56fe:	37 95       	ror	r19
    5700:	27 95       	ror	r18
    5702:	ba 95       	dec	r27
    5704:	c9 f7       	brne	.-14     	; 0x56f8 <__ultoa_invert+0xa2>
    5706:	62 0f       	add	r22, r18
    5708:	73 1f       	adc	r23, r19
    570a:	84 1f       	adc	r24, r20
    570c:	95 1f       	adc	r25, r21
    570e:	a0 1d       	adc	r26, r0
    5710:	08 95       	ret

00005712 <_exit>:
    5712:	f8 94       	cli

00005714 <__stop_program>:
    5714:	ff cf       	rjmp	.-2      	; 0x5714 <__stop_program>
